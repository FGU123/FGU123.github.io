<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一张图汇总Arthas命令大全</title>
      <link href="/2024/03/19/Arthas-Commands/"/>
      <url>/2024/03/19/Arthas-Commands/</url>
      
        <content type="html"><![CDATA[<h1 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h1><p><img src="/images/post-Arthas-Commands/20240319_230902.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> 命令 </tag>
            
            <tag> Commands </tag>
            
            <tag> 排查 </tag>
            
            <tag> 线上诊断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo配置连接数过大导致CPU飙升、OOM</title>
      <link href="/2024/01/18/Dubbo-Connections-CPU-OOM/"/>
      <url>/2024/01/18/Dubbo-Connections-CPU-OOM/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="Dubbo服务上下游情况"><a href="#Dubbo服务上下游情况" class="headerlink" title="Dubbo服务上下游情况"></a>Dubbo服务上下游情况</h2><p>1.背景<br>公司项目，Dubbo上游服务在元旦前夕流量突增，为应对突增流量带来的压力，上游（consumer）节点服务临时扩容一倍机器数量，而扩容操作完成之后，后续出现下游的部分（provider）节点服务器抛出异常，表现为下游机器的CPU使用率飙高达至大于100%的水平（远高于正常水平），机器在运行一段时间后，出现堆内存溢出（Out Of Memory: Java Heap Space），此时机器实际上已经不能正常服务于上游，继而机器很快地会被服务器容器（docker）预设的OOM killer程序强制杀死JVM进程，服务器所在容器的实例进入“未就绪”状态，随后实例被销毁、回收，继而导致上游调用超时或失败并且引起监控侧的告警，影响业务正常运行。</p><h2 id="问题暴露"><a href="#问题暴露" class="headerlink" title="问题暴露"></a>问题暴露</h2><p>问题表现有二：<br>现象1：重启下游机器后，CPU使用率瞬间飙高，超100%以上（约5个线程并行占用CPU 70% ~ 100%，因为是docker容器虚拟化环境，所以top命令显示出来简单合计为约350% ~ 500%的占用率）</p><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_025107.png"></p><p>现象2：服务器在持续高负载下运行一段时间后，日志一直打印OOM（堆溢出）错误，继而机器进入“未就绪”状态（不可服务状态）<br>–堆栈截图过于模糊，图略</p><h2 id="现场处理"><a href="#现场处理" class="headerlink" title="现场处理"></a>现场处理</h2><p>即时通过Dubbo服务治理将下游出现问题的机器禁用，禁止上游机器流量进入下游的问题机器，将有问题的机器保留现场，并且由于JVM启动参数有配置OOM自动生成并导出dump堆栈（-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;&#x2F;tmp&#x2F;data），OOM文件作为问题排查的线索。</p><h2 id="原因定位及分析"><a href="#原因定位及分析" class="headerlink" title="原因定位及分析"></a>原因定位及分析</h2><p>初时因为出现OOM，我们开发团队的排查方向很自然地被带到了分析内存，由Dump文件入手分析当时内存状态。<br>但分析内存过程中，出现排查难的困境，主要原因在于：</p><ol><li><p>内存快照文件（Dump文件）过大：Dump文件反映的是服务器内存的状态，其文件内容就是当时整个堆内存的快照，而我们的服务器分配的内存是4G（正常水平），所以导出的文件有4G之大。这为文件的导出、下载等带来各种实质操作上的难度。</p></li><li><p>Dump文件只在容器里短暂存留：由于我们的服务器配置了OOM的自动Dump配置，当发生OOM时系统会自动导出Dump文件，但由于运维机制，此时机器很快会被OOM Kiler程序强制杀死JVM进程，服务器所在容器实例进入“未就绪”状态，不多久该服务器实例即会被销毁、回收。故Dump文件如果不及时导出（上传至云盘或外部存储），那么Dump文件将不复存在。<br>在多番努力尝试下，终于导出Dump文件，但此时发现，对内存的分析，所得到的有用信息，并不多。我们充其量只知道，当时对堆内存占用较多的一些实例对象，都是些正常的基础对象实例（char数组、byte数组、string、hashmap等）、业务对象实例等。</p></li></ol><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_032701.png"></p><p>于是转到直接正面排查CPU飙高的问题，通过线上诊断工具（Arthas工具，由于线上容器实例默认无安装Arthas，此前实际上还花费了些时间折腾了一阵子工具的安装配置）来直接定位到当时占用CPU最高的3条线程，发现3条线程的调用栈均一致（事实上是不止3条，当时有5条类似的线程，都在跑同样的任务），如下图：</p><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_033740.png"></p><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_035215.png"></p><p>通过Arthas列出这条最耗CPU资源的线程正在跑的堆栈，与我们导出的火焰图（性能分析图）所描述的堆栈，也完全一致。</p><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_040304.png"></p><p>这段堆栈信息，所指向的代码，并非业务代码，而是Dubbo微服务框架的代码。</p><p>Dubbo代码分析：NettyServerHandler创建连接的过程</p><blockquote><p>io.netty.channel.AbstractChannel.AbstractUnsafe.register(EventLoop, ChannelPromise)<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_000916.png"></p></blockquote><blockquote><p>io.netty.channel.AbstractChannel.AbstractUnsafe.register0(ChannelPromise)<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_001215.png"></p></blockquote><blockquote><p>org.apache.dubbo.remoting.transport.netty4.NettyServerHandler.channelActive(ChannelHandlerContext)<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_001738.png"></p></blockquote><blockquote><p>org.apache.dubbo.remoting.transport.AbstractServer.connected(Channel)<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_002217.png"></p></blockquote><blockquote><p>org.apache.dubbo.remoting.transport.netty4.NettyServer.getChannels()<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_002434.png"></p></blockquote><p>分析到NettyServer.getChannels这里，这段代码的大体逻辑很清晰，就是服务器（NettySeverHandler）在创建连接，在获取连接通道（getChannel）。<br>结合上述的线程信息、堆栈信息分析，我们于是提出一个疑点：为什么Dubbo会一直卡在建立连接的这一过程（这5条工作线程一直忙于或者卡在调用这一段代码），表现得像一个死循环，或者说，更像是一直不断在建立连接。<br>那么，排查思路被转到了：如何解答上述这个疑点?<br></br><br>我们反复通过若干的Arthas命令，前后来来回回反复排查约一天半，去定位上游不同的调用入口代码，试图从建立连接的上游找到突破口，去排查这个疑点，但基本没有头绪。<br>因为按正常逻辑，Dubbo只有在启动服务器时，与上下游建立连接（作为provider时与上游建立连接，作为consumer时则与下游建立连接），而这个连接是一个长连接，因为Dubbo协议默认使用单一长连接的方式来进行通信。<br></br><br>所谓单一长连接，就是指客户端与服务端之间只建立一个TCP连接，并保持长时间的有效性。在启动完成之后，长连接不会断开的，会一直保持。<br>所以按正常逻辑来理解，Dubbo不会自动断开连接再重新建立，也就是说不会出现上述这种“一直不断在建立连接”的类似“死循环”的现象。<br></br><br>又经过了一顿捣腾+观察，我们发现其实这一段并非死循环，而只是，只要持续有一个或两个请求进来，服务器的CPU就不会在短时间内降下来，就会出现CPU占高。或者，持续请求比较长时间，那么nety的任务队列里就会积累几十万的任务，我们通过arthas查看到netty的任务队列中存在着几十万个任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vmtool--action getInstances --className io.netty.channel.nio.NioEventLoop --express‘instances.[#this.hashcode()+&quot;--&quot;+#this.taskQueue.size()&#125;&#x27; --limit 10000</span><br><span class="line">vmtool--action getInstances --className io.netty.channel.SingleThreadEventLoop --express‘instances.&#123;#this.hashcode(）+&quot;--&quot;+#this.taskQueue:size()&#125;&quot; --limit 10000</span><br></pre></td></tr></table></figure></br>但只要此时不再有流量进来，nety的任务队列会慢慢减少，在一段长时间之后，CPU就会降下来。从而说明其实就并非死循环，也正是因为这一点，回过头来印证了当时线上的现场处理（禁止上游机器流量进入下游的问题机器）是正确且有效的。</br></br>这一点，我们通过Dubbo服务治理页面上操作一个"禁用/启用"的功能，便可复现（这是Dubbo提供的一个动态操作，可以通过"禁用"按钮对当前接口禁止上游流量打入，而后可以再重新"启用"，恢复流量打入）：我们通过先禁用再启用服务，这样的操作便可以必现本次问题的现象：每次重新启用服务，服务器就会持续一段长时间飙高CPU占用率，期间表现得像一个“死循环”或者说是一个“巨大的循环”。</br></br>而因为服务器实例节点的CPU被占用过多，导致调用链的监控日志无法正常上报至监控中心，所以此时我们的监控页面没有监控数据可以来辅助匹配验证此现象。</br></br>最后我们通过Linux命令实时查询机器所占用的网络连接，统计Dubbo端口（默认20880）的占用总数来匹配现象以验证，此时发现了连接数量非常庞大：40万+，而对比兄弟项目的服务器的正常水平2千+，这个数字水平可以说是异常地高。<blockquote><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240311_003116.png"></p></blockquote><p>回顾回来，既然验证了CPU真的并非耗在一直假想的“死循环”上，那么猜测应该是存在着类似于遍历或迭代大集合这样的耗时处理，而又联想到netty任务队列里有40万+个连接任务（对应着dubbo端口占用40万+个TCP连接），就很容易心生猜想：代码里是否有遍历任务队列的操作从而导致耗CPU呢？此时再反复review回去之前的堆栈里所指向的那些模块的代码，终于发现了耗CPU的地方：</p><blockquote><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240319_233710.png"></p></blockquote><p>那么为什么，连接数会如此之大呢？<br>对dubbo的服务提供者（provider）的单台机器而言，【连接数&#x3D;消费者实例数 × connections】，理解一下这里为何要乘以消费者实例数：是因为上游任何一个消费者consumer都可能跟提供者provider建立连接并产生调用。而在排查时，我们通过dubbo的动态配置页面上，查看到connections（连接池）配置成了300（如果不配置，默认值是1，也就是上文所述的默认上下游只建立1条长连接）。经过排查动态配置的操作记录，才得知，是较早之前团队里有开发同学手工误配成了300（他本人口述其实当时是想配置线程池&#x3D;300，但配成了连接池&#x3D;300）</p><p>至此，终于排查思路得以明朗，根本原因是出现在下游Dubbo服务器与上游的连接数量上，再结合排查时浏览的一些GitHub帖子，梳理一下前因后果，如下：</p><blockquote><p>Dubbo的NettyServerWorker问题<br><a href="https://github.com/apache/dubbo/issues/10492">NettyServerWorker问题·Issue #10492</a><br><a href="https://github.com/apache/dubbo/issues/6902">dubbo HeaderExchangeChannel close method logic error· Issue #6902</a><br>代码分析<br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240317_005242.png"><br><img src="/images/post-Dubbo-Conns-CPU-OOM/20240317_222132.png"><br><br/><br>问题原因总结</p><p>该问题的根因在于，由于动态配置项connections配置不当（误配成了300），并且因为对dubbo服务提供者（provider）单机器而言，【连接数&#x3D;消费者实例数 × connections】，所以导致下游provider服务器的连接数太大。<br>而dubbo在重启（或者禁用后再启用）服务后，因为close()方法的bug导致禁用时没有实际关闭连接，并在重新启用后又再根据connections和消费者数量来决定建立大量的连接，由于服务器此时建立的连接的数量太多，最终导致netty的连接任务队列（channels集合）堆积严重，而在Dubbo内部的NettyServer中又存在着遍历channels的操作，因为遍历大集合比较耗CPU资源，所以CPU占用率就飙升，在持续一段时间后再叠加GC的操作，CPU耗费更严重，如此持续下来，内存占用率也疯涨，GC频繁但无效回收，最终也就导致了Out Of Memory，服务器最终崩溃。</p></blockquote><p>解决方案</p><ol><li>Dubbo动态配置页面上，删除connections配置，恢复默认连接数1</li><li>升级dubbo组件版本至最新版本</li></ol><p>其中第1步操作后，效果立竿见影：</p><blockquote><p><img src="/images/post-Dubbo-Conns-CPU-OOM/20240317_005723.png"></p></blockquote><p>问题回顾<br>至此，回顾一下问题产生的背景，就不难理解了，此问题是在元旦时候临时扩容上游实例而得到触发、暴露，这是因为上游（consumer）做了扩容，导致上游的实例节点增加，而下游每个实例与上游建立的连接数量等于connections数值 × 上游实例数（即consumer数量），上游扩容一倍（节点数量相应增加了一倍），导致了下游（provider）的连接数扩大一倍，从而导致下游在重启（或禁用后重新启用）后，忙于处理连接任务队列里的channels集合的遍历，CPU一直占高，继而影响整体机器性能。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="/2024/03/19/Arthas-Commands/">一张图汇总Arthas命令大全</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> 线上诊断 </tag>
            
            <tag> OutOfMemoryError </tag>
            
            <tag> OOM </tag>
            
            <tag> Dubbo </tag>
            
            <tag> Connections </tag>
            
            <tag> TCP连接 </tag>
            
            <tag> CPU飙升 </tag>
            
            <tag> Netty </tag>
            
            <tag> NettyServer </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Aviator的表达式缓存膨胀问题</title>
      <link href="/2021/02/26/Aviator-Expression-Cache-OOM/"/>
      <url>/2021/02/26/Aviator-Expression-Cache-OOM/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="Aviator简介"><a href="#Aviator简介" class="headerlink" title="Aviator简介"></a>Aviator简介</h2><p>Aviator是一个高性能、轻量级的基于Java实现的表达式引擎，它动态地将String类型的表达式编译成Java ByteCode并交给JVM执行。<br></br><br>Aviator 的基本过程是将表达式直接翻译成对应的 java 字节码执行，整个过程最多扫两趟（开启执行优先模式，如果是编译优先模式下就一趟），这样就保证了它的性能超越绝大部分解释性的表达式引擎，测试也证明如此；其次，除了依赖  commons-beanutils 这个库之外（用于做反射）不依赖任何第三方库，因此整体非常轻量级，整个 jar 包大小哪怕发展到现在 5.0 这个大版本，也才 430K。同时， Aviator 内置的函数库非常“节制”，除了必须的字符串处理、数学函数和集合处理之外，类似文件 IO、网络等等你都是没法使用的，这样能保证运行期的安全，如果你需要这些高阶能力，可以通过开放的自定义函数来接入。因此总结它的特点是：<br></br></p><blockquote><ul><li>高性能</li><li>轻量级</li><li>一些比较有特色的特点：<br>○ 支持运算符重载<br>○ 原生支持大整数和 BigDecimal 类型及运算，并且通过运算符重载和一般数字类型保持一致的运算方式。<br>○ 原生支持正则表达式类型及匹配运算符 &#x3D;~<br>○ 类 clojure 的 seq 库及 lambda 支持，可以灵活地处理各种集合</li><li>开放能力：包括自定义函数接入以及各种定制选项</li></ul></blockquote><h2 id="Aviator表达式的使用场景"><a href="#Aviator表达式的使用场景" class="headerlink" title="Aviator表达式的使用场景"></a>Aviator表达式的使用场景</h2><p>在公司的一个项目，主要是基于配置来定义和实现不同的埋点接口，当中涉及部分表达式求值的配置项，使用了Aviator来实现所配置的表达式。<br>该项目使用了Aviator一段较长的时间，期间一直保持稳定服务。直到最近一次突然线上出现内存膨胀问题。</p><h2 id="问题暴露"><a href="#问题暴露" class="headerlink" title="问题暴露"></a>问题暴露</h2><p>2021年2月21号收到告警服务请求成功率下降，可用性变低</p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><h3 id="即时处理"><a href="#即时处理" class="headerlink" title="即时处理"></a>即时处理</h3><p>接收到告警后，开发迅速响应处理问题，通过日志快速排查到是OOM问题，内存爆满，在服务器上dump内存日志后并重启机器，尽快恢复线上服务正常。</p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226152336.png"></p><h3 id="原因定位及分析"><a href="#原因定位及分析" class="headerlink" title="原因定位及分析"></a>原因定位及分析</h3><p>通过日志观察得知服务在当天某个时间点左右开始出现频繁fullGC，并且日志里打印了类似GC回收无效&#x2F;低效（GC overhead limit exceeded）的异常堆栈<br>从该报错信息可以看出，GC并不能有效地回收内存，从而导致频繁fullGC</p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226143711.png"></p><p>要解决这个问题，需要先分析到内存中的对象情况，思路在于如何解答这两个问题：</p><blockquote><p>1.哪类对象占用了最多的内存？<br>2.这些对象是在哪部分代码中分配的？</p></blockquote><p>通过运维同学帮忙在线上dump出的内存快照，使用Jprofiler分析，看出内存当中，存在一个静态对象（com.googlecode.aviator.AviatorEvaluationInstance），这个对象占用内存比例极高（98%），这解答了上面第一个问题</p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226151224.png"></p><p>再看这个对象的引用链，我们看到了这个静态对象的对外引用（outgoing reference，对其它对象的引用）情况，从逐层的引用情况看出来，当中有两层ConcurrentHashMap，其中第二层的ConcurrentHashMap被怀疑正是当时内存占用率飙高的原因所在。我们通过引用链，翻查框架的源码，找到了这个对象和它所引用的两层ConcurrentHashMap，最终解决了上面第二个问题。</p><p>一开始，通过翻阅源码及相关文档，尝试理解这个框架的代码设计，尝试解答为什么这里会设计两个缓存对象。</p><blockquote><p>排查过程中，在GitHub上搜查这个框架相关的问题，找到了一个类似的内存被占满的issue，<a href="https://github.com/killme2008/aviatorscript/issues/63">循环调用AviatorEvaluator.execute的时候会出现问题</a> ， 但发现这个issue讨论的是Aviator框架在默认不使用缓存的模式下会在每次调用执行引擎时都实时编译表达式，并且编译后的表达式不是存放在堆内存而是在方法区，这会导致堆外内存占用高，并且由于实时编译，当高并发或高频调用时CPU占用也会偏高。这跟我们线上所遇到的问题还不是同一个问题，但这给了我们一个排查方向，把问题聚焦到了AviatorEvaluator的执行过程的代码，继而聚焦到了当中的两层ConcurrentHashMap缓存的设计。</p></blockquote><p>最后，在官方文档及对照框架源码，个人理解这个框架的两层ConcurrentHashMap缓存的设计，可能有以下的涵义：</p><blockquote><p>第一层ConcurrentHashMap缓存：是为了对不带实参的源表达式（Text Expression）所对应的线程任务列表做缓存，key是Text Expression，value则是FutureTask，用于直接获取不同的源表达式的执行任务情况；</p></blockquote><blockquote><p>第二层ConcurrentHashMap缓存：Expression接口的基础实现类BaseExpression中，一个名为stringSegs的变量，是每个线程任务（FutureTask）里边，执行过的带实参的表达式的任务缓存，用于直接获取同一个源表达式不同实参组合的执行任务，目的是当同一个表达式的同一组入参值在调用第二遍执行引擎时，可以避免引擎重复执行表达式的运算过程（直接调FutureTask.get()方法而不用再次调FutureTask.run()方法）</p></blockquote><p>举个例子，假设我们有一个表达式，声明为expression = a + b / c;</br>当我们在传入a=1，b=2，c=3去调用表达式引擎时，引擎内部会先使用第一层ConcurrentHashMap存储：(key1: (String)"a+b/c", value1: (FutureTask<Exception>) java.util.concurrent.FutureTask@3d6eef13，key2: ...)，其中java.util.concurrent.FutureTask@3d6eef13 代表一个线程实例；</br>而当执行引擎在首次执行了实参代入执行后的表达式运算任务后，第二层ConcurrentHashMap便会存储：(key1: (String)"a+b/c", value1: (FutureTask<Exception>) java.util.concurrent.FutureTask@2e6dfe61，key2: ...)，其中1+2/3就是表达式a+b/c代入实参值后的表达式字段（compiled string segments），java.util.concurrent.FutureTask@2e6dfe61代表实际执行表达式运算后的一个线程任务实例。</br>第二层缓存设计目的是为了便于在下一次调用传入同样的参数组合（a=1，b=2，c=3），执行引擎可以从缓存中直接得到java.util.concurrent.FutureTask@2e6dfe61，继而调用其get()方法，直接得到表达式的运算结果，而不需要再次跑run()方法去实时运算而得到结果，从而节省运算开销。</br>在引用关系上，第二层ConcurrentHashMap是被第一层ConcurrentHashMap中的value里边的FutureTask的Expression（Expression是接口类型，对应的实现类是BaseExpression）里透过一个名为outcome的变量的引用的，透过代码debug我们可以看到这层引用关系（这也符合上文我们透过内存快照中看到的reference引用图示）：</br><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226152019.png"></p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226152354.png"></p><p>而因为第二层的ConcurrentHashMap缓存是以带实参的表达式作为key的，而且作者并没有设置第二层缓存的上限值（第一层缓存可以指定为LRUCache指定key上限，但第二层只有一个没指定key容量上限的ConcurrentHashMap实现），那么随着不同的请求参数值传入，形成不同的实参值组合，导致ConcurrentHashMap的key不断增多，而AviatorEvaluationInstance是静态变量，一直常驻内存，即便GC之后也不会被回收，这便是产生了缓存膨胀、内存爆满的根本原因所在。而我们的业务使用场景，就是每个请求一进来都会带一个UUID型的请求ID（可以认为实参组合的数量是无穷的），最终酿成了这次缓存膨胀的故障。</p></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然GC无效的问题，归根到底是由于第二层ConcurrentHashMap缓存导致的，自然地，一开始想到的最简单直接的解决方案，便是不使用缓存或者删除第二层的ConcurrentHashMap即可。但如上文所提到的一个issue，<a href="https://github.com/killme2008/aviatorscript/issues/63">循环调用AviatorEvaluator.execute的时候会出现问题</a> ，不使用缓存将会导致方法区增大（对外内存占用率增大）、且CPU占用率增高，这并不可行。<br></br><br>另一方面，通过翻查代码，发现了这个名为stringSegs的ConcurrentHashMap缓存，并没有开放API供上层调用获取该缓存对象，这下，似乎只能从它的上层引用–第一层缓存下手了，因为第一层缓存持有对第二层缓存的引用，而第一层缓存被一个静态变量所引用，所以无法释放这两层缓存的引用，导致GC后无法回收。那么只要我们清掉第一层的缓存，自然第二层也会被清理。再次review代码，发现框架有针对第一层缓存对外开放API提供直接清理这层的口子：</p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/202102261620315.png"></p><p>而翻查Aviator这个框架的官方说明文档，找到了作者对这个框架的最佳实践指导，包括高版本针对第一层缓存的优化，可以指定使用的缓存模式为LRUCache来避免上文提到的issue（方法区缓存膨胀）及源表达式数量过大导致的堆内存膨胀：</p><p><img src="/images/post-Aviator-Expresion-Cache-OOM/20210226162933.png"></p><p>于是，最终决定了针对这个问题的优化方案是，对缓存进行两方面的优化处理：</p><blockquote><ol><li>改用LRUCache指定表达式缓存，指定源表达式的key的上限，代替框架默认的ConcurrentHashMap</li><li>设立定时任务，对表达式缓存进行定时清理，从而避免源表达式缓存（第一层）、带实参的表达式缓存（第二层，主要目的就是为了清理这一层）的膨胀问题</li></ol></blockquote><figure class="highlight java"><figcaption><span>AviatorManageService</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.googlecode.aviator.AviatorEvaluator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AviatorManageService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AviatorManageService.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DynamicTimedTask dynamicTimedTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheClearHandler cacheClearHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">private</span> DynamicTimedTask <span class="title function_">initDynamicTimedTask</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicTimedTask</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">private</span> CacheClearHandler <span class="title function_">initCacheClearHandler</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheClearHandler</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheClearHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时清理表达式缓存，除了清除表达式缓存，最主要目的是为了清除表达式缓存中引用的执行任务（FutureTask）的缓存stringSegs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">AviatorEvaluator.getInstance().clearExpressionCache();</span><br><span class="line">logger.info(<span class="string">&quot;clear_aviator_expression_cache, future=&#123;&#125;&quot;</span>, <span class="built_in">this</span>.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initAviatorInstance</span><span class="params">()</span> &#123;</span><br><span class="line">setInstanceLRUCache();</span><br><span class="line">scheduleResetAviatorCache();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定缓存模式为LRUCache</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">setInstanceLRUCache</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> ConfigManager.getInteger(ConfigConstants.AVIATOR_EXPRESSION_CACHE_LRU_CAPACITY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( capacity &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">AviatorEvaluator.getInstance().useLRUExpressionCache(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleResetAviatorCache</span><span class="params">(String cron)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> != cron &amp;&amp; <span class="string">&quot;&quot;</span>.equals(cron) ) &#123;</span><br><span class="line">dynamicTimedTask.startTask(cron, cacheClearHandler);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dynamicTimedTask.stopTask();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleResetAviatorCache</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">cron</span> <span class="operator">=</span> ConfigManager.getString(ConfigConstants.AVIATOR_EXPRESSION_CACHE_CLEAR_CRON);</span><br><span class="line">scheduleResetAviatorCache(cron);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><a href="https://www.yuque.com/boyan-avfmj/aviatorscript/ou23gy">Aviator框架使用最佳实践</a></li><li><a href="https://www.yuque.com/boyan-avfmj/aviatorscript/fycwgt">Aviator脚本编译和执行</a></li><li><a href="https://github.com/killme2008/aviatorscript/issues/63">循环调用AviatorEvaluator.execute的时候会出现问题</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> Google </tag>
            
            <tag> Aviator </tag>
            
            <tag> Expression </tag>
            
            <tag> 表达式 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 内存膨胀 </tag>
            
            <tag> GC Overhead limit exceeded </tag>
            
            <tag> OutOfMemoryError </tag>
            
            <tag> OOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-高可用</title>
      <link href="/2019/06/22/RocketMQ-High-Available/"/>
      <url>/2019/06/22/RocketMQ-High-Available/</url>
      
        <content type="html"><![CDATA[<h1 id="主从同步（HA）机制"><a href="#主从同步（HA）机制" class="headerlink" title="主从同步（HA）机制"></a>主从同步（HA）机制</h1><h2 id="RocketMQ高可用方案"><a href="#RocketMQ高可用方案" class="headerlink" title="RocketMQ高可用方案"></a>RocketMQ高可用方案</h2><p>RocketMQ的Broker分为Master与Slave两个角色，一般高可用方案，采取主从架构，具体也有一主一丛、多主多从（多对主从对）等部署方式，如图<br><img src="/images/post-RocketMQ-Summary/20160629175853107.jpg"></p><p>主从架构的工作流程，就是在每台Broker配置他们的主从角色，同一个BrokerName的主从Broker集群中，以BrokerId作为主从角色的奠定，BrokerId为0代表Master，大于0则表示Slave。主从之间会维持一个连接，HAConnection，在Master Broker接收到Producer发过来的消息后，会把消息同步到Slave Broker上，这样一旦Master宕机，Slave依然可以提供服务。这就是RocketMQ保障服务高可用的原理。</p><h2 id="主从同步模式"><a href="#主从同步模式" class="headerlink" title="主从同步模式"></a>主从同步模式</h2><p>主从Broker之间的数据同步包括以下两种：</p><h3 id="同步双写"><a href="#同步双写" class="headerlink" title="同步双写"></a>同步双写</h3><p>写入消息时，master先写入，之后复制到slave，确认slave也存储了消息后才向producer答复返回成功。</p><blockquote><ul><li>优点：数据与服务都无单点，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</li><li>缺点：性能比异步复制模式略低，大约低10%左右，发送单个消息的 RT 会略高。目前主宕机后，备机不能自动切换为主机，后续会支持自动切换功能。</li></ul></blockquote><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>先答复producer，再去向salve复制。</p><blockquote><ul><li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，因为 Master 宕机后，消费者仍然可以从 Slave消费，此过程对应用透明。不需要人工干预。性能同多 Master 模式几乎一样。</li><li>缺点：Master宕机，磁盘损坏情况，会丢失少量消息。</li></ul></blockquote><p>基于不同的同步模式，Broker的角色类型如下：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.config.BrokerRole</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BrokerRole</span> &#123;</span><br><span class="line">ASYNC_MASTER,</span><br><span class="line">SYNC_MASTER,</span><br><span class="line">SLAVE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主从同步实现"><a href="#主从同步实现" class="headerlink" title="主从同步实现"></a>主从同步实现</h2><h3 id="同步元数据"><a href="#同步元数据" class="headerlink" title="同步元数据"></a>同步元数据</h3><p>Slave需要和Master同步的不仅是消息内容，还有一些元数据也需要同步，譬如：<br>Topic配置信息（ syncTopicConfig）、Consumer偏移量信息（syncConsumerOffset）、延迟队列偏移量（syncDelayOffset） 和 订阅组配置信息（syncSubscriptionGroupConfig）。<br>Broker启动时，会判断自己是否Slave角色，如果是就会启动定时同步任务，从Master复制元数据过来。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.BrokerController.initialize()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (BrokerRole.SLAVE == <span class="built_in">this</span>.messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.messageStoreConfig.getHaMasterAddress() != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.messageStoreConfig.getHaMasterAddress().length() &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.messageStore.updateHaMasterAddress(<span class="built_in">this</span>.messageStoreConfig.getHaMasterAddress());</span><br><span class="line">                <span class="built_in">this</span>.updateMasterHAServerAddrPeriodically = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.updateMasterHAServerAddrPeriodically = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//slave 定期同步</span></span><br><span class="line">                        BrokerController.<span class="built_in">this</span>.slaveSynchronize.syncAll();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;ScheduledTask syncAll slave exception&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="number">1000</span> * <span class="number">60</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里的 BrokerController.this.slaveSynchronize.syncAll()方法里边，就调用了syncTopicConfig()，syncConsumerOffset()，syncDelayOffset()，syncSubscriptionGroupConfig()</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.slave.SlaveSynchronize.syncAll()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.syncTopicConfig();</span><br><span class="line"><span class="built_in">this</span>.syncConsumerOffset();</span><br><span class="line"><span class="built_in">this</span>.syncDelayOffset();</span><br><span class="line"><span class="built_in">this</span>.syncSubscriptionGroupConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的各种元数据的复制，最终都是通过Netty走网络请求去Master broker获取到元数据到本地，然后走本地文件写入做的持久化操作。<br>以其中一个为例子，syncConsumerOffset走一遍同步过程：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.slave.SlaveSynchronize.syncConsumerOffset()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">syncConsumerOffset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">masterAddrBak</span> <span class="operator">=</span> <span class="built_in">this</span>.masterAddr;</span><br><span class="line">    <span class="keyword">if</span> (masterAddrBak != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConsumerOffsetSerializeWrapper</span> <span class="variable">offsetWrapper</span> <span class="operator">=</span></span><br><span class="line">                <span class="built_in">this</span>.brokerController.getBrokerOuterAPI().getAllConsumerOffset(masterAddrBak);</span><br><span class="line">            <span class="built_in">this</span>.brokerController.getConsumerOffsetManager().getOffsetTable()</span><br><span class="line">                .putAll(offsetWrapper.getOffsetTable());</span><br><span class="line">            <span class="built_in">this</span>.brokerController.getConsumerOffsetManager().persist();</span><br><span class="line">            log.info(<span class="string">&quot;Update slave consumer offset from master, &#123;&#125;&quot;</span>, masterAddrBak);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;SyncConsumerOffset Exception, &#123;&#125;&quot;</span>, masterAddrBak, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本逻辑就是 getAllConsumerOffset 方法里边组装一个RemotingCommand，底层通过Netty将请求发送到Master角色的Broker，表示请求获取offset，然后Master那端响应请求，返回Offset给Slave这端，Slave这端本地拿到offset后，接下来就是用一个map存本地内存，以及调persist方法持久化到文件里。</p><p>同步元数据的方法基本与上面差不多，相对比较简单，这里省略。</p><h3 id="同步消息体"><a href="#同步消息体" class="headerlink" title="同步消息体"></a>同步消息体</h3><p>同步消息体是主从同步的核心，也就是同步commitLog内容。CommitLog和元数据的同步不一样：首先，CommitLog的数据量比元数据要大；其次，对实时性和可靠性的要求，CommitLog同步的要求要高一些。元数据的同步是定时任务进行的，在两次同步的时间查里，如果出现异常可能会造成Master上的元数据内容和Slave上的元数据内容不一样，不过这种情况还可以补救（手动调整offset，重启consumer等措施）。但是CommitLog在高可靠性场景下如果没有及时同步，一旦Master机器出现故障，消息就彻底丢失了。<br><br></p><p>HAService 是实现commitLog 同步的主体，它在Master 机器和Slave 机器上执行的逻辑不同， 默认是在Master 机器上执行。<br>RocketMQ的消息主从同步的实现主要在 store 工程下的 org.apache.rocketmq.store.ha包，包含三个类：HAService、HAConnection、WaitNotifyObject。<br><br></p><p>HAService是主从同步的核心实现类，其内部类包括：</p><blockquote><ul><li>AcceptSocketService： HA Master端监听HA Client端（Slave端）连接的实现类</li><li>GroupTransferService： 主从同步通知实现类</li><li>HAClient： HA Client端（Slave端）实现类</li></ul></blockquote><p>HAConnection是HA Master服务端HA连接对象的封装，与Broker Slave服务器之间的读写实现类，内部类包括：</p><blockquote><ul><li>ReadSocketService： 网络读实现类</li><li>WriteSocketService： 网络写实现类<br></li></ul></blockquote><p>HAService的start入口</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ha.HAService.start()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="built_in">this</span>.acceptSocketService.beginAccept();</span><br><span class="line"><span class="built_in">this</span>.acceptSocketService.start();</span><br><span class="line"><span class="built_in">this</span>.groupTransferService.start();</span><br><span class="line"><span class="built_in">this</span>.haClient.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致过程包括：</p><ol><li>主服务器启动，建立在特定端口上监听从服务器的socket连接</li><li>启动监听socket连接线程</li><li>启动主从同步通知线程，等待同步数据的传输</li><li>启动HA Client端线程（针对Slave端）<br>消息体的主从复制方式分为两种：同步双写、异步复制。</li></ol><h3 id="同步双写-1"><a href="#同步双写-1" class="headerlink" title="同步双写"></a>同步双写</h3><p>同步双写方式，就是在Master Broker处理Producer发送消息的时候，会同时写入到Slave Broker，待Slave写入成功并返回，Producer才算完成本次消息发送。在消息存储方法org.apache.rocketmq.store.CommitLog.putMessage(MessageExtBrokerInner)中会调handleHA(…)方法来进行同步双写。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.CommitLog.handleHA(AppendMessageResult, PutMessageResult,MessageExt)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleHA</span><span class="params">(AppendMessageResult result, PutMessageResult putMessageResult, MessageExt messageExt)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (BrokerRole.SYNC_MASTER == <span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getBrokerRole()) &#123;</span><br><span class="line">        <span class="type">HAService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultMessageStore.getHaService();</span><br><span class="line">        <span class="keyword">if</span> (messageExt.isWaitStoreMsgOK()) &#123;</span><br><span class="line">            <span class="comment">// Determine whether to wait</span></span><br><span class="line">            <span class="keyword">if</span> (service.isSlaveOK(result.getWroteOffset() + result.getWroteBytes())) &#123;</span><br><span class="line">                <span class="type">GroupCommitRequest</span>  <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupCommitRequest</span>(result.getWroteOffset() + result.getWroteBytes());</span><br><span class="line">                service.putRequest(request);</span><br><span class="line">                service.getWaitNotifyObject().wakeupAll();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flushOK</span> <span class="operator">=</span></span><br><span class="line">                    request.waitForFlush(<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout());</span><br><span class="line">                <span class="keyword">if</span> (!flushOK) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;do sync transfer other node, wait return, but failed, topic: &quot;</span> + messageExt.getTopic() + <span class="string">&quot; tags: &quot;</span></span><br><span class="line">                        + messageExt.getTags() + <span class="string">&quot; client address: &quot;</span> + messageExt.getBornHostNameString());</span><br><span class="line">                    putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_SLAVE_TIMEOUT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Slave problem</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Tell the producer, slave not available</span></span><br><span class="line">                putMessageResult.setPutMessageStatus(PutMessageStatus.SLAVE_NOT_AVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HAService会向其groupTransferService添加一个GroupCommitRequest任务，然后唤醒WriteSocketService通知master进行commitLog同步，然后<br>master收到通知开始把commitLog发送到slave，request.waitForFlush等待slave获取master的commitLog同步，在slave broker获取到master<br>broker的通知后，其HAService的GroupTransferService中的requestsRead列表中就有数据，就可以在GroupTransferService中进行处理。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ha.HAService.GroupTransferService.doWaitTransfer()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWaitTransfer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.requestsRead) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.requestsRead.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (CommitLog.GroupCommitRequest req : <span class="built_in">this</span>.requestsRead) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">transferOK</span> <span class="operator">=</span> HAService.<span class="built_in">this</span>.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; !transferOK &amp;&amp; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.notifyTransferObject.waitForRunning(<span class="number">1000</span>);</span><br><span class="line">                    transferOK = HAService.<span class="built_in">this</span>.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!transferOK) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;transfer messsage to slave timeout, &quot;</span> + req.getNextOffset());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                req.wakeupCustomer(transferOK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.requestsRead.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上文HAService的start()方法代码，HAService在启动的时候，也会启动HAService中的GroupTransferService，它会启动线程去循环执行doWaitTransfer()方法，处理GroupTransferService中的master已同步的GroupCommitRequest，req.wakeupCustomer(transferOK)唤醒前面等待的request.waitForFlush线程，让其handleHA得以返回。</p><h3 id="异步复制-1"><a href="#异步复制-1" class="headerlink" title="异步复制"></a>异步复制</h3><p>同步双写是Master主动往Slave去写入消息，而异步复制则是Slave端对Master的主动复制，我们直接看haClient：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ha.HAService.HAClient.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service started&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.connectMaster()) &#123;</span><br><span class="line">                <span class="comment">// 先汇报最大物理Offset || 定时心跳方式汇报</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.isTimeToReportOffset()) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.reportSlaveMaxOffset(<span class="built_in">this</span>.currentReportedOffset);<span class="comment">//上报master</span></span><br><span class="line">                    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.closeMaster();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 等待应答</span></span><br><span class="line">                <span class="built_in">this</span>.selector.select(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收数据</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="built_in">this</span>.processReadEvent();</span><br><span class="line">                <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.closeMaster();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 只要本地有更新，就汇报最大物理Offset</span></span><br><span class="line">                <span class="keyword">if</span> (!reportSlaveMaxOffsetPlus()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查Master的反向心跳</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span></span><br><span class="line">                    HAService.<span class="built_in">this</span>.getDefaultMessageStore().getSystemClock().now()</span><br><span class="line">                        - <span class="built_in">this</span>.lastWriteTimestamp;</span><br><span class="line">                <span class="keyword">if</span> (interval &gt; HAService.<span class="built_in">this</span>.getDefaultMessageStore().getMessageStoreConfig()</span><br><span class="line">                    .getHaHousekeepingInterval()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;HAClient, housekeeping, found this connection[&quot;</span> + <span class="built_in">this</span>.masterAddress</span><br><span class="line">                        + <span class="string">&quot;] expired, &quot;</span> + interval);</span><br><span class="line">                    <span class="built_in">this</span>.closeMaster();</span><br><span class="line">                    log.warn(<span class="string">&quot;HAClient, master not response some time, so close connection&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.waitForRunning(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service has exception. &quot;</span>, e);</span><br><span class="line">            <span class="built_in">this</span>.waitForRunning(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上文中的HAService的start()方法所示，在HAService启动时，会去创建一个HAClient实例，它是一个后台线程（ServiceThread），异步复制master消息体就是在slave第一次启动的时候会上报自己的maxOffset，后续默认每隔5秒向master上报自己的maxOffset，上报失败会关闭连接。也就是说，slave和master之间的互相传输，是slave采取的主动迈出第一步，因为 broker 并不知道slave broker的maxOffset，不知道从哪里同步起。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ha.HAService.AcceptSocketService.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service started&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.selector.select(<span class="number">1000</span>);</span><br><span class="line">            Set&lt;SelectionKey&gt; selected = <span class="built_in">this</span>.selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selected != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey k : selected) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((k.readyOps() &amp; SelectionKey.OP_ACCEPT) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> ((ServerSocketChannel) k.channel()).accept();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (sc != <span class="literal">null</span>) &#123;</span><br><span class="line">                            HAService.log.info(<span class="string">&quot;HAService receive new connection, &quot;</span></span><br><span class="line">                                + sc.socket().getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="type">HAConnection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HAConnection</span>(HAService.<span class="built_in">this</span>, sc);</span><br><span class="line">                                conn.start();</span><br><span class="line">                                HAService.<span class="built_in">this</span>.addConnection(conn);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                log.error(<span class="string">&quot;new HAConnection exception&quot;</span>, e);</span><br><span class="line">                                sc.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;Unexpected ops in select &quot;</span> + k.readyOps());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                selected.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service has exception.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HAService在创建的时候也会创建AcceptSocketService对象，也是一个后台线程，用来接收处理socket请求的，然后创建一个HAConnection封装对应的socket连接进行请求处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-事务消息</title>
      <link href="/2019/06/15/RocketMQ-Transaction-Message/"/>
      <url>/2019/06/15/RocketMQ-Transaction-Message/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ-4-3-新版事务消息"><a href="#RocketMQ-4-3-新版事务消息" class="headerlink" title="RocketMQ 4.3 新版事务消息"></a>RocketMQ 4.3 新版事务消息</h1><p>关于RocketMQ事务消息，之前有过一篇总结，此处再从编码实现上详细捋一捋。<br>总体流程如下：<br><img src="/images/post-RocketMQ-Summary/20181118221948.jpg"></p><p><br>实现思路上就是两阶段提交（2PC）的思想，第一阶段是发送HalfMessage（或者说PreparedMessage），这种消息的特性是虽存储到Broker但未经二次确定前会被标记为“暂时无法投递消费”的状态，主要是Producer在本地事务中完成业务数据落库的操作同时同步调用RocketMQ消息发送接口，使用消息的一个属性(PROPERTY_TRANSACTION_PREPARED)标记该消息先提交到Broker但暂时不能对Consumer可见，从而达到二次最终确认提交、消费生效，消息发送成功后，Producer会回调事件监听器（TransactionListener）记录消息的本地事务状态，从而确保消息发送与本地事务的原子性。</p><p><br>实现先提交Broker落地存储，又暂时不可见，关键在于不创建消息对应的索引信息。因为Consumer是通过索引来读取消息从而进行消费的。也就是说，第一阶段仅写入文件存储而不在IndexFile上写入该消息即可。</p><p><br>除此之外，具体实现还有一些策略，譬如Broker在对事务消息的发送请求响应处理接收消息时，会先备份消息的原Topic和原ConsumeQueue，继而替换Topic为指定专门的Topic（RMQ_SYS_TRANS_HALF_TOPIC），然后将消息像普通消息一样地存储在RMQ_SYS_TRANS_HALF_TOPIC这个Topic下的CommitLog及其对应的ConsumeQueue，从而与普通消息进行区分隔离。而上文所述的不构建IndexFile，正是因为没有提交到原Topic（普通消息Topic），而Consumer端的正常消费只对普通Topic有效，那么事务消息就不会被消费。</p><p><br>第二阶段，根据本地事务状态，决定提交或回滚消息。既然替换了Topic来达到两阶段提交，自然要有一个操作去处理该Topic的消息，然后将该消息在满足可以提交的条件下恢复到普通消息Topic，进而被consumer正常消费。而RocketMQ的实现就是Broker端开启一个定时任务，消费RMQ_SYS_TRANS_HALF_TOPIC这个Topic下的消息，向Producer发起消息事务状态回查，事务状态目前有commit、rollback、unknown，如果是commit或rollback，则broker对消息进行提交或回滚，并使用将消息写入到另一个Topic（RMQ_SYS_TRANS_OP_HALF_TOPIC）的方式来记录HalfMessage消费操作已进行，如果是unknown，则等待下一次回查，RocketMQ支持设置消息的回查间隔与回查次数。这种使用定时任务预处理特殊Topic消息再决定替换回普通Topic的实现，其实类似于RocketMQ定时消息的处理过程。</p><br>大致流程如上，接下来，就是源码分析为主了。<h2 id="TransactionProducer官方Demo"><a href="#TransactionProducer官方Demo" class="headerlink" title="TransactionProducer官方Demo"></a>TransactionProducer官方Demo</h2><p>在example模块里，transaction包里有官方的事务消息生产者TransactionProducer的Demo</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.example.transaction.TransactionProducer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException &#123;</span><br><span class="line">        <span class="type">TransactionListener</span> <span class="variable">transactionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionListenerImpl</span>();</span><br><span class="line">        <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">2000</span>), <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                thread.setName(<span class="string">&quot;client-transaction-msg-check-thread&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        producer.setExecutorService(executorService);</span><br><span class="line">        producer.setTransactionListener(transactionListener);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        String[] tags = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;TagB&quot;</span>, <span class="string">&quot;TagC&quot;</span>, <span class="string">&quot;TagD&quot;</span>, <span class="string">&quot;TagE&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TopicTest1234&quot;</span>, tags[i % tags.length], <span class="string">&quot;KEY&quot;</span> + i,</span><br><span class="line">                        (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">                <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.sendMessageInTransaction(msg, <span class="literal">null</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line"></span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以对以上代码做一些精简，提取出最核心的部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException &#123;</span><br><span class="line">       <span class="comment">// 创建一个本地事务回调器</span></span><br><span class="line">       <span class="type">TransactionListener</span> <span class="variable">transactionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionListenerImpl</span>();</span><br><span class="line">       <span class="comment">// 事务消息生产者初始化</span></span><br><span class="line">       <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line">       <span class="comment">// 设置生产者的本地事务回调器</span></span><br><span class="line">       producer.setTransactionListener(transactionListener);</span><br><span class="line">       producer.start();</span><br><span class="line">       <span class="comment">// 使用事务方式发送消息</span></span><br><span class="line">       <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.sendMessageInTransaction(msg, <span class="literal">null</span>);</span><br><span class="line">       producer.shutdown();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对比普通消息的Producer，关键在于多了本地事务回调实现，并且需要注册到TransactionProducer中。</p><p>事务回调接口及其实现TransactionListenerImpl，代码如下：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.producer.TransactionListener</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">    LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(<span class="keyword">final</span> Message msg, <span class="keyword">final</span> Object arg)</span>;</span><br><span class="line"></span><br><span class="line">    LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(<span class="keyword">final</span> MessageExt msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.example.transaction.TransactionListenerImpl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">transactionIndex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> transactionIndex.getAndIncrement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> value % <span class="number">3</span>;</span><br><span class="line">        localTrans.put(msg.getTransactionId(), status);</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> localTrans.get(msg.getTransactionId());</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != status) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务消息发送"><a href="#事务消息发送" class="headerlink" title="事务消息发送"></a>事务消息发送</h2><p>从 producer.sendMessageInTransaction(msg, null) 消息发送入口，走起，最终会调到 org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendMessageInTransaction(Message, LocalTransactionExecuter, Object)，这个方法实现了事务消息发送的关键逻辑：发送消息 → 回调执行本地事务 → commit&#x2F;rollback消息</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendMessageInTransaction(Message, LocalTransactionExecuter, Object)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TransactionSendResult <span class="title function_">sendMessageInTransaction</span><span class="params">(<span class="keyword">final</span> Message msg,</span></span><br><span class="line"><span class="params">                                                      <span class="keyword">final</span> LocalTransactionExecuter localTransactionExecuter, <span class="keyword">final</span> Object arg)</span></span><br><span class="line">    <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">    <span class="type">TransactionListener</span> <span class="variable">transactionListener</span> <span class="operator">=</span> getCheckListener(); <span class="comment">//获取之前注册的transactionListener本地事务回调器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == localTransactionExecuter &amp;&amp; <span class="literal">null</span> == transactionListener) &#123; <span class="comment">// 本地事务执行器是旧的实现方式，下面的executeLocalTransactionBranch可以看到是注册了@Deprecated的方法，预期即将在新版中废除，这里4.5.1版本暂时还有保留，估计是为了兼容旧版。</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;tranExecutor is null&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Validators.checkMessage(msg, <span class="built_in">this</span>.defaultMQProducer);</span><br><span class="line"></span><br><span class="line">    <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    MessageAccessor.putProperty(msg, MessageConst.PROPERTY_PRODUCER_GROUP, <span class="built_in">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sendResult = <span class="built_in">this</span>.send(msg); <span class="comment">//发送half消息（prepare）</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;send message Exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocalTransactionState</span> <span class="variable">localTransactionState</span> <span class="operator">=</span> LocalTransactionState.UNKNOW;</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">localException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">switch</span> (sendResult.getSendStatus()) &#123;</span><br><span class="line">        <span class="keyword">case</span> SEND_OK: &#123; <span class="comment">// 消息发送成功</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sendResult.getTransactionId() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    msg.putUserProperty(<span class="string">&quot;__transactionId__&quot;</span>, sendResult.getTransactionId());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != transactionId &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(transactionId)) &#123;</span><br><span class="line">                    msg.setTransactionId(transactionId);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != localTransactionExecuter) &#123; <span class="comment">// 实际上我们localTransactionExecuter传进来为null，不走这个分支，这里估计是为兼容旧版而保留</span></span><br><span class="line">                    localTransactionState = localTransactionExecuter.executeLocalTransactionBranch(msg, arg);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (transactionListener != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;Used new transaction API&quot;</span>);</span><br><span class="line">                    localTransactionState = transactionListener.executeLocalTransaction(msg, arg); <span class="comment">// 回调执行本地事务</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == localTransactionState) &#123;</span><br><span class="line">                    localTransactionState = LocalTransactionState.UNKNOW;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (localTransactionState != LocalTransactionState.COMMIT_MESSAGE) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;executeLocalTransactionBranch return &#123;&#125;&quot;</span>, localTransactionState);</span><br><span class="line">                    log.info(msg.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;executeLocalTransactionBranch exception&quot;</span>, e);</span><br><span class="line">                log.info(msg.toString());</span><br><span class="line">                localException = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLUSH_DISK_TIMEOUT:</span><br><span class="line">        <span class="keyword">case</span> FLUSH_SLAVE_TIMEOUT:</span><br><span class="line">        <span class="keyword">case</span> SLAVE_NOT_AVAILABLE:</span><br><span class="line">            localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">//根据本地事务执行的结果来决定commit消息或者rollback消息，最终结束事务消息</span></span><br><span class="line">        <span class="built_in">this</span>.endTransaction(sendResult, localTransactionState, localException);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;local transaction execute &quot;</span> + localTransactionState + <span class="string">&quot;, but end broker transaction failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransactionSendResult</span> <span class="variable">transactionSendResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionSendResult</span>();</span><br><span class="line">    transactionSendResult.setSendStatus(sendResult.getSendStatus());</span><br><span class="line">    transactionSendResult.setMessageQueue(sendResult.getMessageQueue());</span><br><span class="line">    transactionSendResult.setMsgId(sendResult.getMsgId());</span><br><span class="line">    transactionSendResult.setQueueOffset(sendResult.getQueueOffset());</span><br><span class="line">    transactionSendResult.setTransactionId(sendResult.getTransactionId());</span><br><span class="line">    transactionSendResult.setLocalTransactionState(localTransactionState);</span><br><span class="line">    <span class="keyword">return</span> transactionSendResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 this.send(msg) 是按<b>同步发送消息方式</b>来走的，逻辑大致就是从DefaultMQProducerImpl .send()方法最终会调MQClientAPIImpl的sendMessage()，底层网络通信就是封装的Netty组件NettyRemotingClient，调它的invokeSync()方法进行处理，通过NIO方式走网络把消息发送到MQ服务器Broker。<br>Broker端同步地响应请求，接收消息，然后返回Producer。<br>Producer拿到SendResult后，根据这个发送结果，往下走到 switch (sendResult.getSendStatus()) 这一行，对发送状态（成功与否）来执行不同的处理过程。<br>如果是发送成功(SEND_OK)，那么会<b>执行本地事务（回调TransactionListenerImpl的executeLocalTransaction()方法）</b>，本地事务的返回值则是一个枚举 LocalTransactionState（COMMIT_MESSAGE,ROLLBACK_MESSAGE,UNKNOW）<br>如果halfMessage发送失败，则直接设置本地事务状态为回滚（localTransactionState &#x3D; LocalTransactionState.ROLLBACK_MESSAGE），最终执行endTransaction()方法时，会二次确认。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.endTransaction(SendResult, LocalTransactionState, Throwable)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> SendResult sendResult,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> LocalTransactionState localTransactionState,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> Throwable localException)</span> <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException, UnknownHostException &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">String</span> <span class="variable">traFlag</span> <span class="operator">=</span> oriProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class="line">    <span class="keyword">if</span> (traFlag != <span class="literal">null</span> &amp;&amp; Boolean.parseBoolean(traFlag)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.brokerController.getBrokerConfig().isRejectTransactionMessage()) &#123;</span><br><span class="line">            response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">            response.setRemark(</span><br><span class="line">                <span class="string">&quot;the broker[&quot;</span> + <span class="built_in">this</span>.brokerController.getBrokerConfig().getBrokerIP1()</span><br><span class="line">                    + <span class="string">&quot;] sending transaction message is forbidden&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        putMessageResult = <span class="built_in">this</span>.brokerController.getTransactionalMessageService().prepareMessage(msgInner);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        putMessageResult = <span class="built_in">this</span>.brokerController.getMessageStore().putMessage(msgInner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handlePutMessageResult(putMessageResult, response, request, msgInner, responseHeader, sendMessageContext, ctx, queueIdInt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>this.brokerController.getTransactionalMessageService().prepareMessage(msgInner)</b>里边，最终会调到 org.apache.rocketmq.broker.transaction.queue.TransactionalMessageBridge.putHalfMessage(MessageExtBrokerInner)</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.transaction.queue.TransactionalMessageBridge.putHalfMessage(MessageExtBrokerInner)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PutMessageResult <span class="title function_">putHalfMessage</span><span class="params">(MessageExtBrokerInner messageInner)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> store.putMessage(parseHalfMessageInner(messageInner));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一目了然，里边就是调store（MessageStore）来存储消息（putMessage）了，但在这之前，先要做一层转换，先调parseHalfMessageInner方法。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.transaction.queue.TransactionalMessageBridge.parseHalfMessageInner(MessageExtBrokerInner)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MessageExtBrokerInner <span class="title function_">parseHalfMessageInner</span><span class="params">(MessageExtBrokerInner msgInner)</span> &#123;</span><br><span class="line">    MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC, msgInner.getTopic());</span><br><span class="line">    MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_QUEUE_ID,</span><br><span class="line">        String.valueOf(msgInner.getQueueId()));</span><br><span class="line">    msgInner.setSysFlag(</span><br><span class="line">        MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), MessageSysFlag.TRANSACTION_NOT_TYPE));</span><br><span class="line">    msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic());</span><br><span class="line">    msgInner.setQueueId(<span class="number">0</span>);</span><br><span class="line">    msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class="line">    <span class="keyword">return</span> msgInner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里边就有设置事务消息的真实Topic，<b>MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC, msgInner.getTopic())</b> 以及即将被替换的Topic，<b>msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic())，buildHalfTopic()里边就是返回事务消息的Topic名称RMQ_SYS_TRANS_HALF_TOPIC</b>。</p><h2 id="事务消息的二次确认"><a href="#事务消息的二次确认" class="headerlink" title="事务消息的二次确认"></a>事务消息的二次确认</h2><p>这个阶段其实就是对应2PC分布式事务的第二个阶段：提交或回滚事务。Producer端对应的处理主要是DefaultMQProducerImpl.endTransaction方法</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.endTransaction(SendResult, LocalTransactionState, Throwable)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> SendResult sendResult,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> LocalTransactionState localTransactionState,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> Throwable localException)</span> <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException, UnknownHostException &#123;</span><br><span class="line">    <span class="keyword">final</span> MessageId id;</span><br><span class="line">    <span class="keyword">if</span> (sendResult.getOffsetMsgId() != <span class="literal">null</span>) &#123;</span><br><span class="line">        id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        id = MessageDecoder.decodeMessageId(sendResult.getMsgId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> sendResult.getTransactionId();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">brokerAddr</span> <span class="operator">=</span> <span class="built_in">this</span>.mQClientFactory.findBrokerAddressInPublish(sendResult.getMessageQueue().getBrokerName());</span><br><span class="line">    <span class="type">EndTransactionRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EndTransactionRequestHeader</span>();</span><br><span class="line">    requestHeader.setTransactionId(transactionId);</span><br><span class="line">    requestHeader.setCommitLogOffset(id.getOffset());</span><br><span class="line">    <span class="keyword">switch</span> (localTransactionState) &#123;</span><br><span class="line">        <span class="keyword">case</span> COMMIT_MESSAGE:</span><br><span class="line">            requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ROLLBACK_MESSAGE:</span><br><span class="line">            requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> UNKNOW:</span><br><span class="line">            requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestHeader.setProducerGroup(<span class="built_in">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">    requestHeader.setTranStateTableOffset(sendResult.getQueueOffset());</span><br><span class="line">    requestHeader.setMsgId(sendResult.getMsgId());</span><br><span class="line">    <span class="type">String</span> <span class="variable">remark</span> <span class="operator">=</span> localException != <span class="literal">null</span> ? (<span class="string">&quot;executeLocalTransactionBranch exception: &quot;</span> + localException.toString()) : <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, requestHeader, remark,</span><br><span class="line">        <span class="built_in">this</span>.defaultMQProducer.getSendMsgTimeout());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是根据本地事务状态通过网络告知Broker端执行不同的操作：<b>COMMIT_MESSAGE–投递消息消费，ROLLBACK_MESSAGE–回滚消息，UNKNOWN–不作为（继续下一次回查事务状态）</b>。</p><p>至于Broker端，则是“事务终结处理器”–EndTransactionProcessor。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.processor.EndTransactionProcessor.processRequest(ChannelHandlerContext, RemotingCommand)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RemotingCommand <span class="title function_">processRequest</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand request)</span> <span class="keyword">throws</span></span><br><span class="line">    RemotingCommandException &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">OperationResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationResult</span>();</span><br><span class="line">    <span class="keyword">if</span> (MessageSysFlag.TRANSACTION_COMMIT_TYPE == requestHeader.getCommitOrRollback()) &#123;</span><br><span class="line">        result = <span class="built_in">this</span>.brokerController.getTransactionalMessageService().commitMessage(requestHeader);</span><br><span class="line">        <span class="keyword">if</span> (result.getResponseCode() == ResponseCode.SUCCESS) &#123;</span><br><span class="line">            <span class="type">RemotingCommand</span> <span class="variable">res</span> <span class="operator">=</span> checkPrepareMessage(result.getPrepareMessage(), requestHeader);</span><br><span class="line">            <span class="keyword">if</span> (res.getCode() == ResponseCode.SUCCESS) &#123;</span><br><span class="line">                <span class="type">MessageExtBrokerInner</span> <span class="variable">msgInner</span> <span class="operator">=</span> endMessageTransaction(result.getPrepareMessage());</span><br><span class="line">                msgInner.setSysFlag(MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), requestHeader.getCommitOrRollback()));</span><br><span class="line">                msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());</span><br><span class="line">                msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());</span><br><span class="line">                msgInner.setStoreTimestamp(result.getPrepareMessage().getStoreTimestamp());</span><br><span class="line">                <span class="type">RemotingCommand</span> <span class="variable">sendResult</span> <span class="operator">=</span> sendFinalMessage(msgInner);</span><br><span class="line">                <span class="keyword">if</span> (sendResult.getCode() == ResponseCode.SUCCESS) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sendResult;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE == requestHeader.getCommitOrRollback()) &#123;</span><br><span class="line">        result = <span class="built_in">this</span>.brokerController.getTransactionalMessageService().rollbackMessage(requestHeader);</span><br><span class="line">        <span class="keyword">if</span> (result.getResponseCode() == ResponseCode.SUCCESS) &#123;</span><br><span class="line">            <span class="type">RemotingCommand</span> <span class="variable">res</span> <span class="operator">=</span> checkPrepareMessage(result.getPrepareMessage(), requestHeader);</span><br><span class="line">            <span class="keyword">if</span> (res.getCode() == ResponseCode.SUCCESS) &#123;</span><br><span class="line">                <span class="built_in">this</span>.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    response.setCode(result.getResponseCode());</span><br><span class="line">    response.setRemark(result.getResponseRemark());</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>无论回滚抑或提交事务消息，都要做事务消息的“删除”，所以在两条逻辑分支里，都会看到deletePrepareMessage方法的调用，而这个所谓删除处理，在RocketMQ里边并非真实删除，而是将 prepare 消息存储到另一个名为 RMQ_SYS_TRANS_OP_HALF_TOPIC 的 Topic 中，表示该事务消息（prepare状态的消息）已经处理过（提交或回滚），这么做估计一来是在commitLog文件上面进行操作删除一行数据也不现实，二来保留事务消息的存根，方便消息查找，譬如方便为未处理的事务进行事务回查提供查找依据。</li><li>事务的回滚与提交的唯一差别是无需将消息恢复到普通Topic，而是直接“删除”即可。</li><li>提交的处理主要是多出来以下几个流程：<br>3.1 从请求头部获取到物理偏移量（commitLogOffset），之后根据偏移量获取消息实体，这部分逻辑由TransactionalMessageServiceImpl.commitMessage(EndTransactionRequestHeader)实现。<br>3.2 恢复消息到普通的Topic、ConsumeQueue，构建新的消息对象，由EndTransactionProcessor.endMessageTransaction(MessageExt)实现。<br>3.3 恢复为普通消息后，再次存储到普通Topic的commitLog文件中，之后就能被consumer端正常消费了。这部分由EndTransactionProcessor.sendFinalMessage(MessageExtBrokerInner)实现。</li></ol><h2 id="事务状态回查"><a href="#事务状态回查" class="headerlink" title="事务状态回查"></a>事务状态回查</h2><p>Broker在启动时会启动线程回查的服务，在TransactionMessageCheckService的run方法中，该方法会执行到onWaitEnd方法：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Start transaction check service thread!&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">checkInterval</span> <span class="operator">=</span> brokerController.getBrokerConfig().getTransactionCheckInterval();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.waitForRunning(checkInterval);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;End transaction check service thread!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService.onWaitEnd()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onWaitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> brokerController.getBrokerConfig().getTransactionTimeOut(); <span class="comment">//获取配置的事务执行超时时间（6s），也就是说，broker端存储消息时间+此值 大于当前时间，才会触发起回查</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">checkMax</span> <span class="operator">=</span> brokerController.getBrokerConfig().getTransactionCheckMax(); <span class="comment">//获取配置的最大检测次数（15次），如超出这个次数，默认丢弃消息（回滚消息）</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.info(<span class="string">&quot;Begin to check prepare message, begin time:&#123;&#125;&quot;</span>, begin);</span><br><span class="line">    <span class="built_in">this</span>.brokerController.getTransactionalMessageService().check(timeout, checkMax, <span class="built_in">this</span>.brokerController.getTransactionalMessageCheckListener()); <span class="comment">//开始检测</span></span><br><span class="line">    log.info(<span class="string">&quot;End to check prepare message, consumed time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - begin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的check(…)方法里边逻辑还是比较多的，包括偏移量的获取及下次处理的起始偏移量、避免重复处理的控制、判断是否needDiscard&#x2F;needSkip、各种操作时间的对比等等，然而，这些不是主流程要了解的重点，此处略过。<br>最终会通过netty传递消息给Producer端，让Producer调用到TransactionListenerImpl的checkLocalTransaction()方法来检查本地事务的状态。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.example.transaction.TransactionListenerImpl.checkLocalTransaction(MessageExt)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt msg)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> localTrans.get(msg.getTransactionId());</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != status) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于对事务消息不创建索引"><a href="#关于对事务消息不创建索引" class="headerlink" title="关于对事务消息不创建索引"></a>关于对事务消息不创建索引</h2><p>上文中提到，如果是事务消息，在还没投递到普通Topic之前，是不会创建索引的，这一点，我们其实可以直接到创建索引的方法里边去看</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexService.buildIndex(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildIndex</span><span class="params">(DispatchRequest req)</span> &#123;</span><br><span class="line">       <span class="type">IndexFile</span> <span class="variable">indexFile</span> <span class="operator">=</span> retryGetAndCreateIndexFile();</span><br><span class="line">       <span class="keyword">if</span> (indexFile != <span class="literal">null</span>) &#123;</span><br><span class="line">           ...</span><br><span class="line"></span><br><span class="line">           <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tranType</span> <span class="operator">=</span> MessageSysFlag.getTransactionValue(msg.getSysFlag());</span><br><span class="line">           <span class="keyword">switch</span> (tranType) &#123;</span><br><span class="line">               <span class="keyword">case</span> MessageSysFlag.TRANSACTION_NOT_TYPE:</span><br><span class="line">               <span class="keyword">case</span> MessageSysFlag.TRANSACTION_PREPARED_TYPE:</span><br><span class="line">               <span class="keyword">case</span> MessageSysFlag.TRANSACTION_COMMIT_TYPE:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总而言之，RocketMQ的事务消息就是基于两阶段提交（2PC）和事务状态回查机制来实现的，也是最终一致的解决方案。所谓两阶段提交，就是先发Half(Prepare)消息，后回调本地事务，保证俩操作原子性，及后待事务提交或回滚时发送commit&#x2F;rollback命令给Broker，同时提供补偿机制，就是结合定时任务，以专门的线程以特定的频率对Broker上的half消息进行处理，回查Producer端的事务状态从而决定提交或回滚消息。<br>另外，RocketMQ这样的分布式事务，依然存在因为网络问题或者消费端本身异常导致消费一直失败，最终不能完成整个事务的情况，针对这种情况，目前RocketMQ提供的方案是人工解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-Consumer消息消费</title>
      <link href="/2019/06/08/RocketMQ-Message-Consumer/"/>
      <url>/2019/06/08/RocketMQ-Message-Consumer/</url>
      
        <content type="html"><![CDATA[<p>消息被Producer发送到Broker后，消息消费端consumer既可请求broker拉取消息并开展消费处理。消息消费以组（Consumer Group）的模式开展，一个消费组内可以包含多个消费者，每一个Consumer Group可订阅多个Topic，Consumer Group之间有两种消费模式：广播模式（BROADCASTING）、集群模式（CLUSTERING）。</p><ul><li>集群模式：主题下的同一条消息只允许被其中一个消费者消费。</li><li>广播模式：主题下的同一条消息将被集群内的所有消费者消费一次。</li></ul><p>Broker与Consumer之间的消息传送方式也有两种：</p><ul><li>拉模式：Consumer主动向Broker请求拉取消息</li><li>推模式：Broker将消息推送给Consumer，事实上推模式的实现基于拉模式，在拉模式上包装一层而已，详细实现下文展示。<br>先来看一下，Consumer的启动过程。</li></ul><h1 id="Consumer启动"><a href="#Consumer启动" class="headerlink" title="Consumer启动"></a>Consumer启动</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">        <span class="keyword">case</span> CREATE_JUST:</span><br><span class="line">            log.info(<span class="string">&quot;the consumer [&#123;&#125;] start beginning. messageModel=&#123;&#125;, isUnitMode=&#123;&#125;&quot;</span>, <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup(),</span><br><span class="line">                <span class="built_in">this</span>.defaultMQPushConsumer.getMessageModel(), <span class="built_in">this</span>.defaultMQPushConsumer.isUnitMode());</span><br><span class="line">            <span class="built_in">this</span>.serviceState = ServiceState.START_FAILED;</span><br><span class="line">            <span class="comment">// 1. 检验consumer配置</span></span><br><span class="line">            <span class="built_in">this</span>.checkConfig();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.copySubscription();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.defaultMQPushConsumer.changeInstanceNameToPID();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 实例化mqClientFactory</span></span><br><span class="line">            <span class="built_in">this</span>.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(<span class="built_in">this</span>.defaultMQPushConsumer, <span class="built_in">this</span>.rpcHook);</span><br><span class="line">            <span class="comment">// 3. 设置rebalance相关属性</span></span><br><span class="line">            <span class="built_in">this</span>.rebalanceImpl.setConsumerGroup(<span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">            <span class="built_in">this</span>.rebalanceImpl.setMessageModel(<span class="built_in">this</span>.defaultMQPushConsumer.getMessageModel());</span><br><span class="line">            <span class="built_in">this</span>.rebalanceImpl.setAllocateMessageQueueStrategy(<span class="built_in">this</span>.defaultMQPushConsumer.getAllocateMessageQueueStrategy());</span><br><span class="line">            <span class="built_in">this</span>.rebalanceImpl.setmQClientFactory(<span class="built_in">this</span>.mQClientFactory);</span><br><span class="line">            <span class="comment">// 4. 设置pullAPIWrapper的消息过滤钩子</span></span><br><span class="line">            <span class="built_in">this</span>.pullAPIWrapper = <span class="keyword">new</span> <span class="title class_">PullAPIWrapper</span>(</span><br><span class="line">                mQClientFactory,</span><br><span class="line">                <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup(), isUnitMode());</span><br><span class="line">            <span class="built_in">this</span>.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);</span><br><span class="line">            <span class="comment">// 5. 设置consumer的offsetStore参数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.defaultMQPushConsumer.getOffsetStore() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.offsetStore = <span class="built_in">this</span>.defaultMQPushConsumer.getOffsetStore();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (<span class="built_in">this</span>.defaultMQPushConsumer.getMessageModel()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> BROADCASTING:</span><br><span class="line">                        <span class="built_in">this</span>.offsetStore = <span class="keyword">new</span> <span class="title class_">LocalFileOffsetStore</span>(<span class="built_in">this</span>.mQClientFactory, <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CLUSTERING:</span><br><span class="line">                        <span class="built_in">this</span>.offsetStore = <span class="keyword">new</span> <span class="title class_">RemoteBrokerOffsetStore</span>(<span class="built_in">this</span>.mQClientFactory, <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.defaultMQPushConsumer.setOffsetStore(<span class="built_in">this</span>.offsetStore);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.offsetStore.load();</span><br><span class="line">            <span class="comment">// 6. 根据consumer设置的messageListner不同子类实例化不同的consumeMessageService,然后启动该类代表的线程</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getMessageListenerInner() <span class="keyword">instanceof</span> MessageListenerOrderly) &#123;</span><br><span class="line">                <span class="built_in">this</span>.consumeOrderly = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">this</span>.consumeMessageService =</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConsumeMessageOrderlyService</span>(<span class="built_in">this</span>, (MessageListenerOrderly) <span class="built_in">this</span>.getMessageListenerInner());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getMessageListenerInner() <span class="keyword">instanceof</span> MessageListenerConcurrently) &#123;</span><br><span class="line">                <span class="built_in">this</span>.consumeOrderly = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">this</span>.consumeMessageService =</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConsumeMessageConcurrentlyService</span>(<span class="built_in">this</span>, (MessageListenerConcurrently) <span class="built_in">this</span>.getMessageListenerInner());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.consumeMessageService.start();</span><br><span class="line">            <span class="comment">// 7. 注册当前的consumer</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">registerOK</span> <span class="operator">=</span> mQClientFactory.registerConsumer(<span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup(), <span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (!registerOK) &#123;</span><br><span class="line">                <span class="built_in">this</span>.serviceState = ServiceState.CREATE_JUST;</span><br><span class="line">                <span class="built_in">this</span>.consumeMessageService.shutdown();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The consumer group[&quot;</span> + <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup()</span><br><span class="line">                    + <span class="string">&quot;] has been created before, specify another name please.&quot;</span> + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span><br><span class="line">                    <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 8. 启动各种线程任务（这里还启动了netty客户端）</span></span><br><span class="line">            mQClientFactory.start();</span><br><span class="line">            log.info(<span class="string">&quot;the consumer [&#123;&#125;] start OK.&quot;</span>, <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">            <span class="built_in">this</span>.serviceState = ServiceState.RUNNING;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RUNNING:</span><br><span class="line">        <span class="keyword">case</span> START_FAILED:</span><br><span class="line">        <span class="keyword">case</span> SHUTDOWN_ALREADY:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The PushConsumer service state not OK, maybe started once, &quot;</span></span><br><span class="line">                + <span class="built_in">this</span>.serviceState</span><br><span class="line">                + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),</span><br><span class="line">                <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.updateTopicSubscribeInfoWhenSubscriptionChanged();</span><br><span class="line">    <span class="built_in">this</span>.mQClientFactory.checkClientInBroker();</span><br><span class="line">    <span class="built_in">this</span>.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">    <span class="built_in">this</span>.mQClientFactory.rebalanceImmediately();  <span class="comment">//9、直接执行reblance逻辑(也就是决定consumer的负载均衡)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体步骤如下：</p><h2 id="1-校验consumer的配置"><a href="#1-校验consumer的配置" class="headerlink" title="1.校验consumer的配置"></a>1.校验consumer的配置</h2><p>其实就是校验consumer设置的值是否正确，consumer重要参数如下：</p><ul><li>messageModel:消费消息的模式(广播模式和集群模式）</li><li>consumeFromWhere:选择起始消费位置的方式</li><li>allocateMessageQueueStrategy:分配具体messageQuene的策略子类。（负载均衡逻辑实现的关键类）</li><li>consumeThreadMin：消费消息线程池的最小核心线程数(默认20)</li><li>consumeThreadMax：最大线程数（默认64）</li><li>pullInterval：拉取消息的间隔，默认是0</li><li>consumeMessageBatchMaxSize：每批次消费消息的条数，默认为1</li><li>pullBatchSize：每批次拉取消息的条数，默认32</li></ul><h2 id="2-例化mQClientFactory"><a href="#2-例化mQClientFactory" class="headerlink" title="2.例化mQClientFactory"></a>2.例化mQClientFactory</h2><p>我们从实例化mQClientFactory代码可以看出：一个consumer客户端只会对应一个mQClientFactory（因为factoryTable存放的mQClientFactory是以客户端作为key存放的），也就是说一个应用节点只会有一个mQClientFactory实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MQClientInstance <span class="title function_">getAndCreateMQClientInstance</span><span class="params">(<span class="keyword">final</span> ClientConfig clientConfig, RPCHook rpcHook)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> clientConfig.buildMQClientId();</span><br><span class="line">    <span class="comment">//factoryTable存放的就是client的实例，key为clientid。</span></span><br><span class="line">    <span class="type">MQClientInstance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryTable.get(clientId);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">        instance =<span class="keyword">new</span> <span class="title class_">MQClientInstance</span>(clientConfig.cloneClientConfig(),<span class="built_in">this</span>.factoryIndexGenerator.getAndIncrement(), clientId, rpcHook);</span><br><span class="line">        <span class="type">MQClientInstance</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryTable.putIfAbsent(clientId, instance);</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-设置reblance相关属性"><a href="#3-设置reblance相关属性" class="headerlink" title="3.设置reblance相关属性"></a>3.设置reblance相关属性</h2><p>也就是设置该consumer对应的负载均衡策略需要的相关参数，例如messageModel、allocateMessageQueueStrategy、实例化mQClientFactory等。</p><h2 id="4-设置pullAPIWrapper的消息过滤钩子"><a href="#4-设置pullAPIWrapper的消息过滤钩子" class="headerlink" title="4.设置pullAPIWrapper的消息过滤钩子"></a>4.设置pullAPIWrapper的消息过滤钩子</h2><p>此步作用在于可以由用户自己指定consumer过滤消息的策略，只需要调用consumer的registerFilterMessageHook，将自己实现的过滤消息的FilterMessageHook设置给consumer即可。</p><h2 id="5-设置consumer的offsetStore"><a href="#5-设置consumer的offsetStore" class="headerlink" title="5.设置consumer的offsetStore"></a>5.设置consumer的offsetStore</h2><p>也就是设置consumer使用哪种处理消息消费位置offset的类。<br>如果是广播消费模式，则选择LocalFileOffsetStore；<br>如果是集群消费模式，则选择RemoteBrokerOffsetStore；</p><h2 id="6-设置consumer的consumeMessageService"><a href="#6-设置consumer的consumeMessageService" class="headerlink" title="6.设置consumer的consumeMessageService"></a>6.设置consumer的consumeMessageService</h2><p>根据consumer设置的MessageListener来决定使用具体ConsumeMessageService。<br>如果是MessageListenerOrderly，则使用代表顺序消息消费的service：ConsumeMessageOrderlyService；<br>如果是MessageListenerConcurrently，则使用非顺序消息service：ConsumeMessageConcurrentlyService。</p><p>PS：此步还调用了consumeMessageService的start方法，这里只是启动了一个定时线程去做cleanExpireMsg的操作，并没有启动消费消息的线程。</p><h2 id="7-注册当前的consumer"><a href="#7-注册当前的consumer" class="headerlink" title="7.注册当前的consumer"></a>7.注册当前的consumer</h2><p>这里只是将当前consumer放到了一个缓存map中，key为consumerGroup的名称。</p><h2 id="8-mQClientFactory-start"><a href="#8-mQClientFactory-start" class="headerlink" title="8.mQClientFactory.start"></a>8.mQClientFactory.start</h2><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.factory.MQClientInstance.start()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">            <span class="keyword">case</span> CREATE_JUST:</span><br><span class="line">                <span class="built_in">this</span>.serviceState = ServiceState.START_FAILED;</span><br><span class="line">                <span class="comment">// If not specified,looking address from name server</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == <span class="built_in">this</span>.clientConfig.getNamesrvAddr()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.mQClientAPIImpl.fetchNameServerAddr();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Start request-response channel</span></span><br><span class="line">                <span class="built_in">this</span>.mQClientAPIImpl.start();</span><br><span class="line">                <span class="comment">// Start various schedule tasks</span></span><br><span class="line">                <span class="built_in">this</span>.startScheduledTask();</span><br><span class="line">                <span class="comment">// Start pull service</span></span><br><span class="line">                <span class="built_in">this</span>.pullMessageService.start();</span><br><span class="line">                <span class="comment">// Start rebalance service</span></span><br><span class="line">                <span class="built_in">this</span>.rebalanceService.start();</span><br><span class="line">                <span class="comment">// Start push service</span></span><br><span class="line">                <span class="built_in">this</span>.defaultMQProducer.getDefaultMQProducerImpl().start(<span class="literal">false</span>);</span><br><span class="line">                log.info(<span class="string">&quot;the client factory [&#123;&#125;] start OK&quot;</span>, <span class="built_in">this</span>.clientId);</span><br><span class="line">                <span class="built_in">this</span>.serviceState = ServiceState.RUNNING;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SHUTDOWN_ALREADY:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> START_FAILED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The Factory object[&quot;</span> + <span class="built_in">this</span>.getClientId() + <span class="string">&quot;] has been created before, and failed.&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.mQClientAPIImpl.start()启动了netty客户端，用于处理Consumer的网络请求。<br>this.startScheduledTask()启动了一个线程池来安排执行各种定时任务，包括以下：</p><ul><li>MQClientInstance.this.mQClientAPIImpl.fetchNameServerAddr();</li><li>MQClientInstance.this.updateTopicRouteInfoFromNameServer();</li><li>MQClientInstance.this.cleanOfflineBroker();</li><li>MQClientInstance.this.sendHeartbeatToAllBrokerWithLock();</li><li>MQClientInstance.this.persistAllConsumerOffset();</li><li>MQClientInstance.this.adjustThreadPool();<br>至于，this.pullMessageService.start() 与 this.rebalanceService.start() 则启动了另一类独立的线程任务，分别是拉取消息及重新负载均衡。</li></ul><h2 id="9-触发重新负载均衡"><a href="#9-触发重新负载均衡" class="headerlink" title="9.触发重新负载均衡"></a>9.触发重新负载均衡</h2><p>mQClientFactory.rebalanceImmediately()，点进去看，实际上是调了rebalanceService.wakeup()，唤醒第8步起的重新负载均衡线程。this.rebalanceService.start()点进去看，有一个volatile变量stopped控制rebalanceService是否进入doRebalance()操作。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.common.ServiceThread.start()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Try to start service thread:&#123;&#125; started:&#123;&#125; lastThread:&#123;&#125;&quot;</span>, getServiceName(), started.get(), thread);</span><br><span class="line">    <span class="keyword">if</span> (!started.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stopped = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>, getServiceName());</span><br><span class="line">    <span class="built_in">this</span>.thread.setDaemon(isDaemon);</span><br><span class="line">    <span class="built_in">this</span>.thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.RebalanceService.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service started&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">           <span class="built_in">this</span>.waitForRunning(waitInterval);</span><br><span class="line">           <span class="built_in">this</span>.mqClientFactory.doRebalance();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service end&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="消息拉取过程"><a href="#消息拉取过程" class="headerlink" title="消息拉取过程"></a>消息拉取过程</h1><p>PullMessageService负责从Broker拉取消息，run()的逻辑看起来很简单：一个while循环不停地从阻塞队列中获取pullRequest，然后执行pullMessage()，这里再次出现了volatile布尔变量stopped，这是一种通用的设计技巧，将stopped声明为volatile，每执行一次业务逻辑检查一下其运行状态是否为停止，可以通过其他线程将stopped设置为true从而停止该线程。this.pullRequestQueue是一个存放消息拉取请求的阻塞队列，如果PullRequestQueue为空，则线程将被阻塞，直到队列里有拉取请求可以take出来。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.PullMessageService.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service started&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PullRequest</span> <span class="variable">pullRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.pullRequestQueue.take();</span><br><span class="line">            <span class="built_in">this</span>.pullMessage(pullRequest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Pull Message Service Run Method exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么问题来了，PullRequest是什么时候被放进去PullRequestQueue里边的呢？接下来详细分析过程。</p><h2 id="PullRequestQueue"><a href="#PullRequestQueue" class="headerlink" title="PullRequestQueue"></a>PullRequestQueue</h2><p>这个pullRequestQueue是PullMessageService的私有属性，它存放的PullRequest又是什么结构呢？</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.PullRequest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PullRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String consumerGroup;</span><br><span class="line">    <span class="keyword">private</span> MessageQueue messageQueue;</span><br><span class="line">    <span class="keyword">private</span> ProcessQueue processQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> nextOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">lockedFirst</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从PullRequest类结构看出，pullRequestQueue存放的pullRequest封装的是每一个消费者群组consumerGroup以及对应的消费队列messageQuene，还有消费队列的快照processQueue。</p><p>接着，我们跟踪一下其put方法在哪里调用。可以看到，只在PullMessageService.executePullRequestImmediately(PullRequest)方法里边有直接调用</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.PullMessageService.executePullRequestImmediately(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executePullRequestImmediately</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pullRequestQueue.put(pullRequest);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;executePullRequestImmediately pullRequestQueue.put&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，我们继续跟踪这个executePullRequestImmediately方法的调用链，就会发现，主要有两类调用入口：Rebalance.run()、DefaultMQPushConsumerImpl.pullMessage的结果回调PullCallback。<br><img src="/images/post-RocketMQ-Message-Consumer/20190608062135.png"></p><h3 id="1-Rebalance-run"><a href="#1-Rebalance-run" class="headerlink" title="1. Rebalance.run()"></a>1. Rebalance.run()</h3><p>RebalanceService顾名思义，就是针对consumer端要消费哪些messageQuene来做重新负载均衡的策略。当consumer集群某个节点挂了，则要考虑重新负载均衡rebalance，将messageQuene重新按照存活的consumer节点进行分配。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.RebalanceImpl.updateProcessQueueTableInRebalance(String, Set<MessageQueue>, boolean)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">updateProcessQueueTableInRebalance</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> Set&lt;MessageQueue&gt; mqSet,</span></span><br><span class="line"><span class="params"><span class="keyword">final</span> <span class="type">boolean</span> isOrder)</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">List&lt;PullRequest&gt; pullRequestList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PullRequest&gt;();</span><br><span class="line"><span class="keyword">for</span> (MessageQueue mq : mqSet) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.processQueueTable.containsKey(mq)) &#123;</span><br><span class="line"><span class="keyword">if</span> (isOrder &amp;&amp; !<span class="built_in">this</span>.lock(mq)) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, add a new mq failed, &#123;&#125;, because lock failed&quot;</span>, consumerGroup, mq);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.removeDirtyOffset(mq);</span><br><span class="line"><span class="type">ProcessQueue</span> <span class="variable">pq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessQueue</span>();</span><br><span class="line"><span class="type">long</span> <span class="variable">nextOffset</span> <span class="operator">=</span> <span class="built_in">this</span>.computePullFromWhere(mq);</span><br><span class="line"><span class="keyword">if</span> (nextOffset &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">ProcessQueue</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.processQueueTable.putIfAbsent(mq, pq);</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">null</span>) &#123;</span><br><span class="line">log.info(<span class="string">&quot;doRebalance, &#123;&#125;, mq already exists, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;doRebalance, &#123;&#125;, add a new mq, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line"><span class="type">PullRequest</span> <span class="variable">pullRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PullRequest</span>();</span><br><span class="line">pullRequest.setConsumerGroup(consumerGroup);</span><br><span class="line">pullRequest.setNextOffset(nextOffset);</span><br><span class="line">pullRequest.setMessageQueue(mq);</span><br><span class="line">pullRequest.setProcessQueue(pq);</span><br><span class="line">pullRequestList.add(pullRequest); <span class="comment">// 先把需要重新分配的pullRequest放进一个List</span></span><br><span class="line">changed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">&quot;doRebalance, &#123;&#125;, add new mq failed, &#123;&#125;&quot;</span>, consumerGroup, mq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.dispatchPullRequest(pullRequestList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchPullRequest</span><span class="params">(List&lt;PullRequest&gt; pullRequestList)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (PullRequest pullRequest : pullRequestList) &#123;</span><br><span class="line"><span class="built_in">this</span>.defaultMQPushConsumerImpl.executePullRequestImmediately(pullRequest); <span class="comment">// 这里遍历pullRequest，逐个把pullRequest加入到pullRequestQueue</span></span><br><span class="line">log.info(<span class="string">&quot;doRebalance, &#123;&#125;, add a new pull request &#123;&#125;&quot;</span>, consumerGroup, pullRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面consumer.start过程中，RebalanceService线程会随之启动执行，那么可以理解，当consumer一启动，相应的pullRequestQueue就会存放有pullRequest对象了。</p><h3 id="2-PullCallback"><a href="#2-PullCallback" class="headerlink" title="2. PullCallback"></a>2. PullCallback</h3><p>DefaultMQPushConsumerImpl.pullMessage方法里面定义了拉取结果的回调PullCallback，我们得知在PullCallback的onSuccess和onException中调用了pullRequestQueue的put方法。也就是说，RocketMQ保证了每次拉完消息之后都会调用pullRequestQueue的put逻辑。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">PullCallback</span> <span class="variable">pullCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PullCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(PullResult pullResult)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pullResult != <span class="literal">null</span>) &#123;</span><br><span class="line">                pullResult = DefaultMQPushConsumerImpl.<span class="built_in">this</span>.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</span><br><span class="line">                    subscriptionData);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> FOUND:</span><br><span class="line">                        <span class="type">long</span> <span class="variable">prevRequestOffset</span> <span class="operator">=</span> pullRequest.getNextOffset();</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line">                        <span class="type">long</span> <span class="variable">pullRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</span><br><span class="line">                            pullRequest.getMessageQueue().getTopic(), pullRT);</span><br><span class="line"></span><br><span class="line">                        <span class="type">long</span> <span class="variable">firstMsgOffset</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">                        <span class="keyword">if</span> (pullResult.getMsgFoundList() == <span class="literal">null</span> || pullResult.getMsgFoundList().isEmpty()) &#123;</span><br><span class="line">                            DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest); <span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            firstMsgOffset = pullResult.getMsgFoundList().get(<span class="number">0</span>).getQueueOffset();</span><br><span class="line"></span><br><span class="line">                            DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),</span><br><span class="line">                                pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());</span><br><span class="line"></span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">dispatchToConsume</span> <span class="operator">=</span> processQueue.putMessage(pullResult.getMsgFoundList());</span><br><span class="line">                            DefaultMQPushConsumerImpl.<span class="built_in">this</span>.consumeMessageService.submitConsumeRequest(</span><br><span class="line">                                pullResult.getMsgFoundList(),</span><br><span class="line">                                processQueue,</span><br><span class="line">                                pullRequest.getMessageQueue(),</span><br><span class="line">                                dispatchToConsume);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestLater(pullRequest,</span><br><span class="line">                                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval()); <span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest); <span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pullResult.getNextBeginOffset() &lt; prevRequestOffset</span><br><span class="line">                            || firstMsgOffset &lt; prevRequestOffset) &#123;</span><br><span class="line">                            log.warn(</span><br><span class="line">                                <span class="string">&quot;[BUG] pull message result maybe data wrong, nextBeginOffset: &#123;&#125; firstMsgOffset: &#123;&#125; prevRequestOffset: &#123;&#125;&quot;</span>,</span><br><span class="line">                                pullResult.getNextBeginOffset(),</span><br><span class="line">                                firstMsgOffset,</span><br><span class="line">                                prevRequestOffset);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> NO_NEW_MSG:</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line"></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.correctTagsOffset(pullRequest);</span><br><span class="line"></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest); <span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> NO_MATCHED_MSG:</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line"></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.correctTagsOffset(pullRequest);</span><br><span class="line"></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest); <span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> OFFSET_ILLEGAL:</span><br><span class="line">                        log.warn(<span class="string">&quot;the pull request offset illegal, &#123;&#125; &#123;&#125;&quot;</span>,</span><br><span class="line">                            pullRequest.toString(), pullResult.toString());</span><br><span class="line">                        pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line"></span><br><span class="line">                        pullRequest.getProcessQueue().setDropped(<span class="literal">true</span>);</span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executeTaskLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.offsetStore.updateOffset(pullRequest.getMessageQueue(),</span><br><span class="line">                                        pullRequest.getNextOffset(), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.offsetStore.persist(pullRequest.getMessageQueue());</span><br><span class="line"></span><br><span class="line">                                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());</span><br><span class="line"></span><br><span class="line">                                    log.warn(<span class="string">&quot;fix the pull request offset, &#123;&#125;&quot;</span>, pullRequest);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;executeTaskLater Exception&quot;</span>, e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, <span class="number">10000</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;execute the pull request exception&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 触发调用pullRequestQueue的put逻辑</span></span><br><span class="line">            DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据以上两个入口我们可以得出结论：<br>当consumer启动时，RebalanceService使得pullRequestQueue有值，PullMessageService的线程不停地从pullRequestQueue中take messageQuene拉取消息处理，处理完之后继续往pullRequestQueue存放messageQuene，从而使得pullRequestQueue不会因为没有值而阻塞。<br>换句话说，<b>pullRequestQueue每次take完一次，都会再继续put messageQuene，将下一次要拉取的pullRequest再次放到pullRequestQueue中，而拉取消息实际又是一个while循环不停去拉取，这样就保证了消费消息的及时性，使得每个Consumer节点仅有一个消息拉取线程负责所有消费者的消息拉取的情况下，不会产生性能瓶颈。</b></p><p>OK，到此，总算完成了<b>从阻塞队列pullRequestQueue中拿pullRequest</b>的过程了，接下来，就是根据拿到的pullRequest来进行拉取消息pullMessage了。</p><h2 id="this-pullMessage-pullRequest"><a href="#this-pullMessage-pullRequest" class="headerlink" title="this.pullMessage(pullRequest)"></a>this.pullMessage(pullRequest)</h2><p>点进去一直找到实现类的方法org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)，这个方法篇幅比较长，下面逐一拆解<br>此处以获取订阅信息作为拉取消息的正式开始点，那么，在此之前，其实还有两类的关于当前处理队列（processQueue）的状态校验及相关操作首先执行：1.校验并保证处理队列当前执行状态正常，2. 流控。</p><h3 id="processQueue执行状态校验"><a href="#processQueue执行状态校验" class="headerlink" title="processQueue执行状态校验"></a>processQueue执行状态校验</h3><p>关于为什么会有ProcessQueue这个数据结构，个人理解，是因为MessageQueue的消费处理其实是并发进行的，那么我们并不能同步获取消息的处理进度，但是本次拉取消息的推进需要根据上一次消费进度来进行，于是就有了ProcessQueue作为MessageQueue的消费处理进度快照。这个类的结构，主要是<b>一个TreeMap及一个读写锁</b>，TreeMap里<b>以MessageQueue的Offset作为Key，以消息内容的引用为Value（所谓快照）</b>，保存所有从MessageQueue获取到，但是还未被处理的消息；读写锁的作用是控制<b>多线程下对TreeMap对象的并发访问</b>。<br>从pullRequest中获取ProcessQueue，如果processQueue当前状态未被丢弃，则更新ProcessQueue的lastPullTimestamp为当前时间戳；如果当前消费者被挂起，则将拉取任务延迟指定时间（PULL_TIME_DELAY_MILLS_WHEN_SUSPEND，1s）后再次放入到PullMessageService的拉取任务队列中，结束本次消息拉取。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ProcessQueue</span> <span class="variable">processQueue</span> <span class="operator">=</span> pullRequest.getProcessQueue();</span><br><span class="line"><span class="keyword">if</span> (processQueue.isDropped()) &#123;</span><br><span class="line">          log.info(<span class="string">&quot;the pull request[&#123;&#125;] is dropped.&quot;</span>, pullRequest.toString());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.makeSureStateOK();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">          log.warn(<span class="string">&quot;pullMessage exception, consumer state not ok&quot;</span>, e);</span><br><span class="line">          <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isPause()) &#123;</span><br><span class="line">          log.warn(<span class="string">&quot;consumer was paused, execute pull request later. instanceName=&#123;&#125;, group=&#123;&#125;&quot;</span>, <span class="built_in">this</span>.defaultMQPushConsumer.getInstanceName(), <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">          <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h3><p>RocketMQ的消息拉取过程的流量控制，是让consumer根据自身的消息处理速度调整获取消息的操作速度，采取的流控处理做法是作延迟一段时间(默认50ms)后消费处理，流控主要从3种维度进行：消息消费数量、消息大小、偏移量间隔。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">cachedMessageCount</span> <span class="operator">=</span> processQueue.getMsgCount().get();</span><br><span class="line">      <span class="type">long</span> <span class="variable">cachedMessageSizeInMiB</span> <span class="operator">=</span> processQueue.getMsgSize().get() / (<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cachedMessageCount &gt; <span class="built_in">this</span>.defaultMQPushConsumer.getPullThresholdForQueue()) &#123;</span><br><span class="line">          <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">          <span class="keyword">if</span> ((queueFlowControlTimes++ % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">              log.warn(</span><br><span class="line">                  <span class="string">&quot;the cached message count exceeds the threshold &#123;&#125;, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, count=&#123;&#125;, size=&#123;&#125; MiB, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;</span>,</span><br><span class="line">                  <span class="built_in">this</span>.defaultMQPushConsumer.getPullThresholdForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cachedMessageSizeInMiB &gt; <span class="built_in">this</span>.defaultMQPushConsumer.getPullThresholdSizeForQueue()) &#123;</span><br><span class="line">          <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">          <span class="keyword">if</span> ((queueFlowControlTimes++ % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">              log.warn(</span><br><span class="line">                  <span class="string">&quot;the cached message size exceeds the threshold &#123;&#125; MiB, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, count=&#123;&#125;, size=&#123;&#125; MiB, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;</span>,</span><br><span class="line">                  <span class="built_in">this</span>.defaultMQPushConsumer.getPullThresholdSizeForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.consumeOrderly) &#123;</span><br><span class="line">          <span class="keyword">if</span> (processQueue.getMaxSpan() &gt; <span class="built_in">this</span>.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) &#123;</span><br><span class="line">              <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);</span><br><span class="line">              <span class="keyword">if</span> ((queueMaxSpanFlowControlTimes++ % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                  log.warn(</span><br><span class="line">                      <span class="string">&quot;the queue&#x27;s messages, span too long, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, maxSpan=&#123;&#125;, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;&quot;</span>,</span><br><span class="line">                      processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),</span><br><span class="line">                      pullRequest, queueMaxSpanFlowControlTimes);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (processQueue.isLocked()) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!pullRequest.isLockedFirst()) &#123;</span><br><span class="line">                  <span class="keyword">final</span> <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="built_in">this</span>.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());</span><br><span class="line">                  <span class="type">boolean</span> <span class="variable">brokerBusy</span> <span class="operator">=</span> offset &lt; pullRequest.getNextOffset();</span><br><span class="line">                  log.info(<span class="string">&quot;the first time to pull message, so fix offset from broker. pullRequest: &#123;&#125; NewOffset: &#123;&#125; brokerBusy: &#123;&#125;&quot;</span>,</span><br><span class="line">                      pullRequest, offset, brokerBusy);</span><br><span class="line">                  <span class="keyword">if</span> (brokerBusy) &#123;</span><br><span class="line">                      log.info(<span class="string">&quot;[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: &#123;&#125; NewOffset: &#123;&#125;&quot;</span>,</span><br><span class="line">                          pullRequest, offset);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  pullRequest.setLockedFirst(<span class="literal">true</span>);</span><br><span class="line">                  pullRequest.setNextOffset(offset);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">              log.info(<span class="string">&quot;pull message later because not locked in broker, &#123;&#125;&quot;</span>, pullRequest);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>消息消费数量：当前消息处理总数如果超出了指定阈值（1000条）：<b style="color:orange">cachedMessageCount &gt; this.defaultMQPushConsumer.getPullThresholdForQueue()</b>， 将触发流控，放弃本次拉取任务，并且指定该队列的下一次拉取任务时间间隔为<b>PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL</b>（50ms），每触发1000次流控后输出流控日志。</li><li>消息大小：当前消息处理的大小如果超出了指定大小阈值（100MB）：<b style="color:orange">cachedMessageSizeInMiB &gt; this.defaultMQPushConsumer.getPullThresholdSizeForQueue()</b>，将触发流控，流控处理与上述的消息消费数量维度的流控处理一致。</li><li>偏移量间隔：就是ProcessQueue中最大偏移量与最小偏移量的间距（processQueue.getMaxSpan()，等于<b>maxOffset - minOffset</b>，如下图），当这个间距超过指定阈值（2000）：<b style="color:orange">processQueue.getMaxSpan() &gt; this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()</b>，就会触发流控，流控处理与上述两种维度的流控处理一致。这个维度的流控设置目的，是为了避免因为一条消息堵塞导致重复消费（下面会细述），不同的是，这里有个前置条件，就是这里只针对非顺序消费模式进行此维度的流控(!this.consumeOrderly)。</li></ul><p><img src="/images/post-RocketMQ-Message-Consumer/20190608071413.png"></p><p>如图，假如3109为本批次消息消费后的最大偏移量（maxOffset），1093为最小偏移量（minOffset），那么maxSpan&#x3D;maxOffset-minOffset&#x3D;3109-1093&#x3D;2016，大于阈值（2000），则会触发流控，但可能出现上述的这种情况，就是在minOffset后面的很大部分消息实际上已被消费成功，因为下一次的消费偏移量（nextOffset）即为本次minOffset，所以，如果多次消费都是被同一minOffset位置的这个消息阻塞，那么就会引发大量消息重复被消费。而consumeConcurrentlyMaxSpan在这里只是为达到流控目的而把这个间距值限定在一个合适范围而已，但对于解决重复消费的问题，这个作用其实很有限。</p><blockquote><p>考虑到要是碰上这种极端的情况，一批消息超2K条，实际绝大部分消息都被消费成功，而堵塞前进消费的minOffset那条消息，假设它的消费本身是存在问题的，可能是死循环之类的，那么一直没法成功消费，这就会导致进度一直卡在这条消息这里。其实RocketMQ有现成提供这类问题的解决方案，就是把因为消费超时卡住批量消费进度的消息定义为ExpireMsg，起一个计划线程池，定时执行清掉这些ExpireMsg，清除的具体操作就是把消息重发回去broker，作为延时消息（delayLevel&#x3D;3，10s）再次存储并后续下发consumer消费。（下文会提到延时消息）</p></blockquote><h3 id="1-获取订阅信息"><a href="#1-获取订阅信息" class="headerlink" title="1.获取订阅信息"></a>1.获取订阅信息</h3><p>拉取该主题的订阅信息，如果为空，则结束本次消息拉取，同时设置下一次拉取任务的延时为PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION（3s）。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">final</span> <span class="type">SubscriptionData</span> <span class="variable">subscriptionData</span> <span class="operator">=</span> <span class="built_in">this</span>.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == subscriptionData) &#123;</span><br><span class="line"><span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">log.warn(<span class="string">&quot;find the consumer&#x27;s subscription failed, &#123;&#125;&quot;</span>, pullRequest);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2-构建PullCallback"><a href="#2-构建PullCallback" class="headerlink" title="2.构建PullCallback"></a>2.构建PullCallback</h3><p>构建PullCallback是为了后面请求拉取消息的结果响应处理，其中上一步获取到的订阅信息就是在成功拉取消息后用于处理拉取请求。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">PullCallback</span> <span class="variable">pullCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PullCallback</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(PullResult pullResult)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pullResult != <span class="literal">null</span>) &#123;</span><br><span class="line">pullResult = DefaultMQPushConsumerImpl.<span class="built_in">this</span>.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</span><br><span class="line">subscriptionData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line"><span class="keyword">case</span> FOUND:</span><br><span class="line"><span class="type">long</span> <span class="variable">prevRequestOffset</span> <span class="operator">=</span> pullRequest.getNextOffset();</span><br><span class="line">pullRequest.setNextOffset(pullResult.getNextBeginOffset());</span><br><span class="line"><span class="type">long</span> <span class="variable">pullRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</span><br><span class="line">pullRequest.getMessageQueue().getTopic(), pullRT);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-取得要从哪台broker拉取消息的broker地址"><a href="#3-取得要从哪台broker拉取消息的broker地址" class="headerlink" title="3.取得要从哪台broker拉取消息的broker地址"></a>3.取得要从哪台broker拉取消息的broker地址</h3><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(PullRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pullAPIWrapper.pullKernelImpl(</span><br><span class="line">pullRequest.getMessageQueue(),</span><br><span class="line">subExpression,</span><br><span class="line">subscriptionData.getExpressionType(),</span><br><span class="line">subscriptionData.getSubVersion(),</span><br><span class="line">pullRequest.getNextOffset(),</span><br><span class="line"><span class="built_in">this</span>.defaultMQPushConsumer.getPullBatchSize(),</span><br><span class="line">sysFlag,</span><br><span class="line">commitOffsetValue,</span><br><span class="line">BROKER_SUSPEND_MAX_TIME_MILLIS,</span><br><span class="line">CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,</span><br><span class="line">CommunicationMode.ASYNC,</span><br><span class="line">pullCallback</span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;pullKernelImpl exception&quot;</span>, e);</span><br><span class="line"><span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">``` JAVA org.apache.rocketmq.client.impl.consumer.PullAPIWrapper.pullKernelImpl(MessageQueue, String, String, <span class="type">long</span>, <span class="type">long</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">long</span>, <span class="type">long</span>, <span class="type">long</span>, CommunicationMode, PullCallback)</span><br><span class="line"><span class="type">FindBrokerResult</span> <span class="variable">findBrokerResult</span> <span class="operator">=</span></span><br><span class="line"><span class="built_in">this</span>.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</span><br><span class="line"><span class="built_in">this</span>.recalculatePullFromWhichNode(mq), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == findBrokerResult) &#123;</span><br><span class="line"><span class="built_in">this</span>.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());</span><br><span class="line">findBrokerResult =</span><br><span class="line"><span class="built_in">this</span>.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</span><br><span class="line"><span class="built_in">this</span>.recalculatePullFromWhichNode(mq), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-构建要拉取消息的网络请求头"><a href="#4-构建要拉取消息的网络请求头" class="headerlink" title="4.构建要拉取消息的网络请求头"></a>4.构建要拉取消息的网络请求头</h3><p>PullAPIWrapper.pullKernelImpl(…)里边调用MQClientAPIImpl.pullMessage(…)，为拉取消息的实际网络请求作准备</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.MQClientAPIImpl.pullMessage(String, PullMessageRequestHeader, long, CommunicationMode, PullCallback)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PullResult <span class="title function_">pullMessage</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> String addr,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> PullMessageRequestHeader requestHeader,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">long</span> timeoutMillis,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> CommunicationMode communicationMode,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> PullCallback pullCallback</span></span><br><span class="line"><span class="params">)</span> <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    <span class="type">RemotingCommand</span> <span class="variable">request</span> <span class="operator">=</span> RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (communicationMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> ONEWAY:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            <span class="built_in">this</span>.pullMessageAsync(addr, request, timeoutMillis, pullCallback);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">case</span> SYNC:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.pullMessageSync(addr, request, timeoutMillis);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-执行网络层请求broker的代码，根据结果执行对应的回调处理"><a href="#5-执行网络层请求broker的代码，根据结果执行对应的回调处理" class="headerlink" title="5.执行网络层请求broker的代码，根据结果执行对应的回调处理"></a>5.执行网络层请求broker的代码，根据结果执行对应的回调处理</h3><p>深入到网络的调用过程，可以发现本质是交给了netty的work线程去向broker请求拉取消息，拉取到消息之后异步回调拉取的结果。入口代码如下：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.MQClientAPIImpl.pullMessageAsync(String, RemotingCommand, long, PullCallback)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pullMessageAsync</span><span class="params">(</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String addr,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> RemotingCommand request,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">long</span> timeoutMillis,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> PullCallback pullCallback</span></span><br><span class="line"><span class="params">   )</span> <span class="keyword">throws</span> RemotingException, InterruptedException &#123;</span><br><span class="line">       <span class="built_in">this</span>.remotingClient.invokeAsync(addr, request, timeoutMillis, <span class="keyword">new</span> <span class="title class_">InvokeCallback</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ResponseFuture responseFuture)</span> &#123;</span><br><span class="line">               <span class="type">RemotingCommand</span> <span class="variable">response</span> <span class="operator">=</span> responseFuture.getResponseCommand();</span><br><span class="line">               <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="type">PullResult</span> <span class="variable">pullResult</span> <span class="operator">=</span> MQClientAPIImpl.<span class="built_in">this</span>.processPullResponse(response);</span><br><span class="line">                       <span class="keyword">assert</span> pullResult != <span class="literal">null</span>;</span><br><span class="line">                       pullCallback.onSuccess(pullResult);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       pullCallback.onException(e);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (!responseFuture.isSendRequestOK()) &#123;</span><br><span class="line">                       pullCallback.onException(<span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;send request failed to &quot;</span> + addr + <span class="string">&quot;. Request: &quot;</span> + request, responseFuture.getCause()));</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (responseFuture.isTimeout()) &#123;</span><br><span class="line">                       pullCallback.onException(<span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;wait response from &quot;</span> + addr + <span class="string">&quot; timeout :&quot;</span> + responseFuture.getTimeoutMillis() + <span class="string">&quot;ms&quot;</span> + <span class="string">&quot;. Request: &quot;</span> + request,</span><br><span class="line">                           responseFuture.getCause()));</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       pullCallback.onException(<span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;unknown reason. addr: &quot;</span> + addr + <span class="string">&quot;, timeoutMillis: &quot;</span> + timeoutMillis + <span class="string">&quot;. Request: &quot;</span> + request, responseFuture.getCause()));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.MQClientAPIImpl.pullMessageSync(String, RemotingCommand, long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PullResult <span class="title function_">pullMessageSync</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> String addr,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> RemotingCommand request,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">long</span> timeoutMillis</span></span><br><span class="line"><span class="params">)</span> <span class="keyword">throws</span> RemotingException, InterruptedException, MQBrokerException &#123;</span><br><span class="line">    <span class="type">RemotingCommand</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.remotingClient.invokeSync(addr, request, timeoutMillis);</span><br><span class="line">    <span class="keyword">assert</span> response != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.processPullResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-执行第一步构建的PullCallback的onSuccess-onException逻辑"><a href="#6-执行第一步构建的PullCallback的onSuccess-onException逻辑" class="headerlink" title="6.执行第一步构建的PullCallback的onSuccess&#x2F;onException逻辑"></a>6.执行第一步构建的PullCallback的onSuccess&#x2F;onException逻辑</h3><p>其中onSuccess中，有根据broker响应的不同结果做不同的逻辑处理：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(...).new PullCallback() &#123;...&#125;.onSuccess(PullResult)、org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl.pullMessage(...).new PullCallback() &#123;...&#125;.onException(Throwable)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(PullResult pullResult)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pullResult != <span class="literal">null</span>) &#123;</span><br><span class="line">        pullResult = DefaultMQPushConsumerImpl.<span class="built_in">this</span>.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</span><br><span class="line">            subscriptionData);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> FOUND:</span><br><span class="line">                <span class="type">long</span> <span class="variable">prevRequestOffset</span> <span class="operator">=</span> pullRequest.getNextOffset(); <span class="comment">// 本次拉取消息的offset</span></span><br><span class="line">                pullRequest.setNextOffset(pullResult.getNextBeginOffset()); <span class="comment">// 设置下一次拉取消息的offset</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">pullRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp;</span><br><span class="line">                DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</span><br><span class="line">                    pullRequest.getMessageQueue().getTopic(), pullRT);</span><br><span class="line"></span><br><span class="line">                <span class="type">long</span> <span class="variable">firstMsgOffset</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">                <span class="keyword">if</span> (pullResult.getMsgFoundList() == <span class="literal">null</span> || pullResult.getMsgFoundList().isEmpty()) &#123;</span><br><span class="line">                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest); <span class="comment">// 如果没有发现新拉到的消息，将pullRequest放到pullRequestQueue中</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    firstMsgOffset = pullResult.getMsgFoundList().get(<span class="number">0</span>).getQueueOffset();</span><br><span class="line"></span><br><span class="line">                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),</span><br><span class="line">                        pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());</span><br><span class="line"></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">dispatchToConsume</span> <span class="operator">=</span> processQueue.putMessage(t.getMsgFoundList(),processQueue,pullRequest</span><br><span class="line">                <span class="title function_">getMessageQueue</span><span class="params">()</span>,dispatchToConsume);</span><br><span class="line">                <span class="comment">// 把拉取到的消息丢给 processQueue</span></span><br><span class="line">                    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.consumeMessageService.submitConsumeRequest(</span><br><span class="line">                        pullResult.getMsgFoundList(),</span><br><span class="line">                        processQueue,</span><br><span class="line">                        pullRequest.getMessageQueue(),</span><br><span class="line">                        dispatchToConsume); <span class="comment">// 把processQueue丢给ConsumeMessageService，提交消费任务从而让拉取到的消息进行消费</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval() &gt; <span class="number">0</span>) &#123; <span class="comment">//判断是否有设置拉取消息的时间间隔，有则走间隔拉取消息的逻辑</span></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestLater(pullRequest,</span><br><span class="line">                            DefaultMQPushConsumerImpl.<span class="built_in">this</span>.defaultMQPushConsumer.getPullInterval());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则将pullRequest放到pullRequestQueue中</span></span><br><span class="line">                        DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestImmediately(pullRequest);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pullResult.getNextBeginOffset() &lt; prevRequestOffset</span><br><span class="line">                    || firstMsgOffset &lt; prevRequestOffset) &#123;</span><br><span class="line">                    log.warn(</span><br><span class="line">                        <span class="string">&quot;[BUG] pull message result maybe data wrong, nextBeginOffset: &#123;&#125; firstMsgOffset: &#123;&#125; prevRequestOffset: &#123;&#125;&quot;</span>,</span><br><span class="line">                        pullResult.getNextBeginOffset(),</span><br><span class="line">                        firstMsgOffset,</span><br><span class="line">                        prevRequestOffset);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NO_NEW_MSG:</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">case</span> NO_MATCHED_MSG:</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">case</span> OFFSET_ILLEGAL:</span><br><span class="line">                ...</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;execute the pull request exception&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DefaultMQPushConsumerImpl.<span class="built_in">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-将拉取到的消息交给consumeMessageService"><a href="#7-将拉取到的消息交给consumeMessageService" class="headerlink" title="7.将拉取到的消息交给consumeMessageService"></a>7.将拉取到的消息交给consumeMessageService</h3><p>如上一步的部分代码所示，就是交给consumeMessageService代表的消费消息线程池处理，由于消费消息的方式有两种，提交线程池的入口也有两个：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.submitConsumeRequest(List<MessageExt>, ProcessQueue, MessageQueue, boolean)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submitConsumeRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> ProcessQueue processQueue,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> MessageQueue messageQueue,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">boolean</span> dispatchToConsume)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">consumeBatchSize</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</span><br><span class="line">    <span class="keyword">if</span> (msgs.size() &lt;= consumeBatchSize) &#123;</span><br><span class="line">        <span class="type">ConsumeRequest</span> <span class="variable">consumeRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeRequest</span>(msgs, processQueue, messageQueue);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.consumeExecutor.submit(consumeRequest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">            <span class="built_in">this</span>.submitConsumeRequestLater(consumeRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>; total &lt; msgs.size(); ) &#123;</span><br><span class="line">            List&lt;MessageExt&gt; msgThis = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MessageExt&gt;(consumeBatchSize);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; consumeBatchSize; i++, total++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (total &lt; msgs.size()) &#123;</span><br><span class="line">                    msgThis.add(msgs.get(total));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">ConsumeRequest</span> <span class="variable">consumeRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeRequest</span>(msgThis, processQueue, messageQueue);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.consumeExecutor.submit(consumeRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; total &lt; msgs.size(); total++) &#123;</span><br><span class="line">                    msgThis.add(msgs.get(total));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.submitConsumeRequestLater(consumeRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService.submitConsumeRequest(List<MessageExt>, ProcessQueue, MessageQueue, boolean)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submitConsumeRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> ProcessQueue processQueue,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> MessageQueue messageQueue,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">boolean</span> dispathToConsume)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dispathToConsume) &#123;</span><br><span class="line">        <span class="type">ConsumeRequest</span> <span class="variable">consumeRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeRequest</span>(processQueue, messageQueue);</span><br><span class="line">        <span class="built_in">this</span>.consumeExecutor.submit(consumeRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，拉到消息后接下来便是消费消息的过程了。当然，在这之前，还有一个指定动作就是将下一次需要拉取的pullRequest再次放到pullRequestQueue中，其用意在上文已有提及。</p><h2 id="消息拉取过程小结"><a href="#消息拉取过程小结" class="headerlink" title="消息拉取过程小结"></a>消息拉取过程小结</h2><p>一个consumer客户端会分配一个拉取消息线程（PullMessageService），不停地从存放了messageQuene的阻塞队列中take需要拉取消息的messagequene，最后通过调用通知网络层发起拉取消息拉取的网络请求（实际就是交给netty的worker线程拉消息），netty的worker线程拉取到消息后调用处理PullCallback处理拉取的结果。</p><p>由于从broker拉取消息的网络请求交给了netty的worker线程处理，并且work线程处理完之后再异步通知拉取结果处理，我们可以知道pullmessage本身并没有太重的操作，同时每次请求broker拉取消息是批量拉取（默认值是每批32条），因此即使一个consuemr客户端只会有一个线程负责所有consumerGroup，也不会有太慢以及太大的性能瓶颈。</p><h1 id="消息消费过程"><a href="#消息消费过程" class="headerlink" title="消息消费过程"></a>消息消费过程</h1><p>ConsumeMessageService是消息消费接口，有两个实现类，分别是顺序消费（ConsumeMessageOrderlyService）及普通消费（ConsumeMessageConcurrentlyService）。无论ConsumeMessageOrderlyService还是ConsumeMessageConcurrentlyService，在核心方法ConsumeMessageService.submitConsumeRequest(…)的实现里都有一个核心逻辑，就是将代表消息实际消费的任务ConsumeRequest，提交给了一个名为ConsumeMessageThread的线程池去异步执行。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.ConsumeMessageConcurrentlyService(DefaultMQPushConsumerImpl, MessageListenerConcurrently)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConsumeMessageConcurrentlyService</span><span class="params">(DefaultMQPushConsumerImpl defaultMQPushConsumerImpl,</span></span><br><span class="line"><span class="params">    MessageListenerConcurrently messageListener)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaultMQPushConsumerImpl = defaultMQPushConsumerImpl;</span><br><span class="line">    <span class="built_in">this</span>.messageListener = messageListener;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.defaultMQPushConsumer = <span class="built_in">this</span>.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();</span><br><span class="line">    <span class="built_in">this</span>.consumerGroup = <span class="built_in">this</span>.defaultMQPushConsumer.getConsumerGroup();</span><br><span class="line">    <span class="built_in">this</span>.consumeRequestQueue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.consumeExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="built_in">this</span>.defaultMQPushConsumer.getConsumeThreadMin(),</span><br><span class="line">        <span class="built_in">this</span>.defaultMQPushConsumer.getConsumeThreadMax(),</span><br><span class="line">        <span class="number">1000</span> * <span class="number">60</span>,</span><br><span class="line">        TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="built_in">this</span>.consumeRequestQueue,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadFactoryImpl</span>(<span class="string">&quot;ConsumeMessageThread_&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(<span class="keyword">new</span> <span class="title class_">ThreadFactoryImpl</span>(<span class="string">&quot;ConsumeMessageScheduledThread_&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.cleanExpireMsgExecutors = Executors.newSingleThreadScheduledExecutor(<span class="keyword">new</span> <span class="title class_">ThreadFactoryImpl</span>(<span class="string">&quot;CleanExpireMsgScheduledThread_&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，重点就在于ConsumeRequest线程任务的run方法了，而无论ConsumeMessageOrderlyService还是ConsumeMessageConcurrentlyService，核心的消费逻辑基本一致：取得业务方法实现的messageListener，调用其consumeMessage方法，得到处理结果。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.ConsumeRequest.run()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断消息是否已被删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.processQueue.isDropped()) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;the message queue not be able to consume, because it&#x27;s dropped. group=&#123;&#125; &#123;&#125;&quot;</span>, ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.consumerGroup, <span class="built_in">this</span>.messageQueue);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到messageListener，也就是实际的消息消费业务实现类</span></span><br><span class="line"><span class="type">MessageListenerConcurrently</span> <span class="variable">listener</span> <span class="operator">=</span> ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.messageListener;</span><br><span class="line"><span class="type">ConsumeConcurrentlyContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeConcurrentlyContext</span>(messageQueue);</span><br><span class="line"><span class="type">ConsumeConcurrentlyStatus</span> <span class="variable">status</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">defaultMQPushConsumerImpl.resetRetryAndNamespace(msgs, defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line"><span class="comment">// 准备消息消费的上下文</span></span><br><span class="line"><span class="type">ConsumeMessageContext</span> <span class="variable">consumeMessageContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">    consumeMessageContext = <span class="keyword">new</span> <span class="title class_">ConsumeMessageContext</span>();</span><br><span class="line">    consumeMessageContext.setNamespace(defaultMQPushConsumer.getNamespace());</span><br><span class="line">    consumeMessageContext.setConsumerGroup(defaultMQPushConsumer.getConsumerGroup());</span><br><span class="line">    consumeMessageContext.setProps(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;());</span><br><span class="line">    consumeMessageContext.setMq(messageQueue);</span><br><span class="line">    consumeMessageContext.setMsgList(msgs);</span><br><span class="line">    consumeMessageContext.setSuccess(<span class="literal">false</span>);</span><br><span class="line">    ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.executeHookBefore(consumeMessageContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">beginTimestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasException</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">ConsumeReturnType</span> <span class="variable">returnType</span> <span class="operator">=</span> ConsumeReturnType.SUCCESS;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msgs != <span class="literal">null</span> &amp;&amp; !msgs.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">            MessageAccessor.setConsumeStartTimeStamp(msg, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    status = listener.consumeMessage(Collections.unmodifiableList(msgs), context); <span class="comment">// 调用消息消费的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;</span>,</span><br><span class="line">        RemotingHelper.exceptionSimpleDesc(e),</span><br><span class="line">        ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.consumerGroup,</span><br><span class="line">        msgs,</span><br><span class="line">        messageQueue);</span><br><span class="line">    hasException = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">consumeRT</span> <span class="operator">=</span> System.currentTimeMillis() - beginTimestamp; <span class="comment">// 业务消费代码处理时长</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == status) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasException) &#123;</span><br><span class="line">        returnType = ConsumeReturnType.EXCEPTION;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        returnType = ConsumeReturnType.RETURNNULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (consumeRT &gt;= defaultMQPushConsumer.getConsumeTimeout() * <span class="number">60</span> * <span class="number">1000</span>) &#123; <span class="comment">// 如果消费超时，则有相应处理</span></span><br><span class="line">    returnType = ConsumeReturnType.TIME_OUT;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeConcurrentlyStatus.RECONSUME_LATER == status) &#123;</span><br><span class="line">    returnType = ConsumeReturnType.FAILED;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status) &#123;</span><br><span class="line">    returnType = ConsumeReturnType.SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">    consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == status) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;consumeMessage return null, Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;&quot;</span>,</span><br><span class="line">        ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.consumerGroup,</span><br><span class="line">        msgs,</span><br><span class="line">        messageQueue);</span><br><span class="line">    status = ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</span><br><span class="line">    consumeMessageContext.setStatus(status.toString());</span><br><span class="line">    consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);</span><br><span class="line">    ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.getConsumerStatsManager()</span><br><span class="line">    .incConsumeRT(ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.consumerGroup, messageQueue.getTopic(), consumeRT);</span><br><span class="line"><span class="comment">// 处理消费消息的结果</span></span><br><span class="line"><span class="keyword">if</span> (!processQueue.isDropped()) &#123;</span><br><span class="line">    ConsumeMessageConcurrentlyService.<span class="built_in">this</span>.processConsumeResult(status, context, <span class="built_in">this</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;processQueue is dropped without process consume result. messageQueue=&#123;&#125;, msgs=&#123;&#125;&quot;</span>, messageQueue, msgs);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>接下来就看下，messageListener得到消费结果后做的处理：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService.processConsumeResult(ConsumeConcurrentlyStatus, ConsumeConcurrentlyContext, ConsumeRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processConsumeResult</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> ConsumeConcurrentlyStatus status,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> ConsumeConcurrentlyContext context,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> ConsumeRequest consumeRequest</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ackIndex</span> <span class="operator">=</span> context.getAckIndex();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (consumeRequest.getMsgs().isEmpty())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 以下为统计数据记录的操作</span></span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> CONSUME_SUCCESS:</span><br><span class="line">            <span class="keyword">if</span> (ackIndex &gt;= consumeRequest.getMsgs().size()) &#123;</span><br><span class="line">                ackIndex = consumeRequest.getMsgs().size() - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ok</span> <span class="operator">=</span> ackIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">failed</span> <span class="operator">=</span> consumeRequest.getMsgs().size() - ok;</span><br><span class="line">            <span class="built_in">this</span>.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), ok);</span><br><span class="line">            <span class="built_in">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), failed);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RECONSUME_LATER:</span><br><span class="line">            ackIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(),</span><br><span class="line">                consumeRequest.getMsgs().size());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下为针对不同消费模式对消费失败的消息做不同的处理</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.defaultMQPushConsumer.getMessageModel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> BROADCASTING: <span class="comment">// 广播模式下的消费失败消息处理比较简单，就是遍历失败消息，拿出来之后打个log，默认直接丢弃失败消息就完了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ackIndex + <span class="number">1</span>; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</span><br><span class="line">                <span class="type">MessageExt</span> <span class="variable">msg</span> <span class="operator">=</span> consumeRequest.getMsgs().get(i);</span><br><span class="line">                log.warn(<span class="string">&quot;BROADCASTING, the message consume failed, drop it, &#123;&#125;&quot;</span>, msg.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CLUSTERING: <span class="comment">// 集群模式下的失败消息处理</span></span><br><span class="line">            List&lt;MessageExt&gt; msgBackFailed = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MessageExt&gt;(consumeRequest.getMsgs().size());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ackIndex + <span class="number">1</span>; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</span><br><span class="line">                <span class="type">MessageExt</span> <span class="variable">msg</span> <span class="operator">=</span> consumeRequest.getMsgs().get(i);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.sendMessageBack(msg, context); <span class="comment">// 失败的消息，直接重新发回broker</span></span><br><span class="line">                <span class="keyword">if</span> (!result) &#123; <span class="comment">// 如果发回broker的操作结果还是失败，则放到msgBackFailed列表，下一步继续作处理</span></span><br><span class="line">                    msg.setReconsumeTimes(msg.getReconsumeTimes() + <span class="number">1</span>);</span><br><span class="line">                    msgBackFailed.add(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果msgBackFailed列表不为空，说明上一步有消息在发回broker时发送失败，则走另外的方式处理消费失败的消息：也就是晚一些再重试消费</span></span><br><span class="line">            <span class="keyword">if</span> (!msgBackFailed.isEmpty()) &#123;</span><br><span class="line">                consumeRequest.getMsgs().removeAll(msgBackFailed);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.submitConsumeRequestLater(msgBackFailed, consumeRequest.getProcessQueue(), consumeRequest.getMessageQueue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下为更新offset操作，可以看到，不管消息消费成功与否，都会更新consumerGroup消费到的offset</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> consumeRequest.getProcessQueue().removeMessage(consumeRequest.getMsgs());</span><br><span class="line">    <span class="keyword">if</span> (offset &gt;= <span class="number">0</span> &amp;&amp; !consumeRequest.getProcessQueue().isDropped()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(), offset, <span class="literal">true</span>); <span class="comment">// 这里实际上只是更新RemoteBrokerOffsetStore.offsetTable里所存储的offset值，在实现上是通过定时线程发网络请求提交到broker，详见org.apache.rocketmq.client.impl.factory.MQClientInstance.persistAllConsumerOffset()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上的消费结果处理基本可以得知：</p><ul><li>调用业务实现的消费消息逻辑后，得到消费结果，即使消费超时，也最终会根据messageListener执行返回的结果来决定是否重新消费消息。</li><li>根据不同的消费模式会对消费失败的结果做不同的处理（实际上按是否顺序消费来划分的两种消息消费模型来看，两者都有不同的消费结果状态定义ConsumeOrderlyStatus、ConsumeConcurrentlyStatus）。对于广播模式，失败消息的处理是直接丢弃；集群模式则会重新消费消息，相应的处理为 1.把消息重新发回Broker，后续作重试处理 2.若发回broker失败，后续作重试消费</li><li>关于offset的更新，其实是不管消息消费成功与否，都会有更新consumerGroup所消费到的offset，因为消费失败的消息会作重试处理，其实并不影响offset的更新</li></ul><p>接下来，便是更新offset及重试消费消息的过程分析了。</p><h2 id="offset更新"><a href="#offset更新" class="headerlink" title="offset更新"></a>offset更新</h2><p>无论是LocalFileOffsetStore还是RemoteBrokerOffsetStore，offset更新的逻辑都是一致的：实际上就是每个messageQueue消费到的offset，存放到一个名为offsetTable的内存缓存map里。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore.updateOffset(MessageQueue, long, boolean)/org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore.updateOffset(MessageQueue, long, boolean)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOffset</span><span class="params">(MessageQueue mq, <span class="type">long</span> offset, <span class="type">boolean</span> increaseOnly)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mq != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">AtomicLong</span> <span class="variable">offsetOld</span> <span class="operator">=</span> <span class="built_in">this</span>.offsetTable.get(mq);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == offsetOld) &#123;</span><br><span class="line">            offsetOld = <span class="built_in">this</span>.offsetTable.putIfAbsent(mq, <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(offset));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != offsetOld) &#123;</span><br><span class="line">            <span class="keyword">if</span> (increaseOnly) &#123;</span><br><span class="line">                MixAll.compareAndIncreaseOnly(offsetOld, offset);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                offsetOld.set(offset);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，之后是怎样把这offset更新提交给broker这边的呢？找回consumer启动过程可以定位到，offset的更新，其实是由一个定时线程提交给broker的。就在 org.apache.rocketmq.client.impl.factory.MQClientInstance.start()这个方法里，this.startScheduledTask()启动的若干个定时线程池里，其中有一个就是定时持久化所有consumer的offset变更</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.factory.MQClientInstance.startScheduledTask()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  MQClientInstance.<span class="built_in">this</span>.persistAllConsumerOffset();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  log.error(<span class="string">&quot;ScheduledTask persistAllConsumerOffset exception&quot;</span>, e);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="built_in">this</span>.clientConfig.getPersistConsumerOffsetInterval(), TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>这个定时任务，最终会调用到RemoteBrokerOffsetStore.persistAll(Set<MessageQueue>)方法，把offset变更发回Broker</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore.persistAll(Set<MessageQueue>)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persistAll</span><span class="params">(Set&lt;MessageQueue&gt; mqs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == mqs || mqs.isEmpty())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> HashSet&lt;MessageQueue&gt; unusedMQ = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;MessageQueue&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!mqs.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;MessageQueue, AtomicLong&gt; entry : <span class="built_in">this</span>.offsetTable.entrySet()) &#123;</span><br><span class="line">            <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">AtomicLong</span> <span class="variable">offset</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (offset != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mqs.contains(mq)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.updateConsumeOffsetToBroker(mq, offset.get()); <span class="comment">// 将offset的更新，发到broker</span></span><br><span class="line">                        log.info(<span class="string">&quot;[persistAll] Group: &#123;&#125; ClientId: &#123;&#125; updateConsumeOffsetToBroker &#123;&#125; &#123;&#125;&quot;</span>,</span><br><span class="line">                            <span class="built_in">this</span>.groupName,</span><br><span class="line">                            <span class="built_in">this</span>.mQClientFactory.getClientId(),</span><br><span class="line">                            mq,</span><br><span class="line">                            offset.get());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;updateConsumeOffsetToBroker exception, &quot;</span> + mq.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    unusedMQ.add(mq);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!unusedMQ.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MessageQueue mq : unusedMQ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.offsetTable.remove(mq);</span><br><span class="line">            log.info(<span class="string">&quot;remove unused mq, &#123;&#125;, &#123;&#125;&quot;</span>, mq, <span class="built_in">this</span>.groupName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是先消费消息，再提交offset更新，这里有可能存在消费完消息之后，提交offset失败的情况，尽管这种可能性极低，因为提交offset操作实际上只是做了内存的操作，并没有什么重的慢的操作。倒是另外一种情况导致offset更新的丢失的可能性会大很多，因为offset是先存在内存，再通过定时任务间隔数秒走网络请求提交给broker的，这里可能存在譬如这数秒内consumer突然宕机、网络请求失败等因素导致没有成功提交offset到broker，那么在consumer宕机后重启服务，就会出现重复消费消息。<br>综上，<b>在consumer的业务消费代码务必要保证幂等性。</b></p><p>而事实上，offset提交broker的操作不是仅仅依赖定时任务完成，在consumer关闭退出时，也会有一次主动触发持久化offset到broker的方法调用（DefaultMQPushConsumerImpl里的shutdown方法也是调的DefaultMQPullConsumerImpl.shutdown()方法）：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl.shutdown()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">        <span class="keyword">case</span> CREATE_JUST:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RUNNING:</span><br><span class="line">            <span class="built_in">this</span>.persistConsumerOffset(); <span class="comment">// 在consumer关闭时把offset持久化到broker</span></span><br><span class="line">            <span class="built_in">this</span>.mQClientFactory.unregisterConsumer(<span class="built_in">this</span>.defaultMQPullConsumer.getConsumerGroup());</span><br><span class="line">            <span class="built_in">this</span>.mQClientFactory.shutdown();  </span><br><span class="line">            log.info(<span class="string">&quot;the consumer [&#123;&#125;] shutdown OK&quot;</span>, <span class="built_in">this</span>.defaultMQPullConsumer.getConsumerGroup());</span><br><span class="line">            <span class="built_in">this</span>.serviceState = ServiceState.SHUTDOWN_ALREADY;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SHUTDOWN_ALREADY:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做，是为了让应用正常退出时，让consumer实例也正常关闭，保证此时也能触发offset更新正确提交到broker。</p><h2 id="消费消息重试"><a href="#消费消息重试" class="headerlink" title="消费消息重试"></a>消费消息重试</h2><p>在上文中提到，在消息消费失败后，失败消息会重新发回broker。若重新发送给broker也失败了，那么失败消息会被交给定时任务重新尝试消费。这里看一下broker到底是如何处理消费失败的消息的。<br>在consumerSendMessageBack方法里看到，失败消息重新发回broker使用到的远程请求类型是RequestCode.CONSUMER_SEND_MSG_BACK</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.client.impl.MQClientAPIImpl.consumerSendMessageBack(String, MessageExt, String, int, long, int)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerSendMessageBack</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> String addr,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> MessageExt msg,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> String consumerGroup,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">int</span> delayLevel,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">long</span> timeoutMillis,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">int</span> maxConsumeRetryTimes</span></span><br><span class="line"><span class="params">)</span> <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    <span class="type">ConsumerSendMsgBackRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumerSendMsgBackRequestHeader</span>();</span><br><span class="line">    <span class="type">RemotingCommand</span> <span class="variable">request</span> <span class="operator">=</span> RemotingCommand.createRequestCommand(RequestCode.CONSUMER_SEND_MSG_BACK, requestHeader);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据这个类型的请求，找到broker处理消费失败的消息的入口：SendMessageProcessor.processRequest(ChannelHandlerContext, RemotingCommand)</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.processor.SendMessageProcessor.processRequest(ChannelHandlerContext, RemotingCommand)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> RemotingCommand <span class="title function_">processRequest</span><span class="params">(ChannelHandlerContext ctx,</span></span><br><span class="line"><span class="params">                                        RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException &#123;</span><br><span class="line">      SendMessageContext mqtraceContext;</span><br><span class="line">      <span class="keyword">switch</span> (request.getCode()) &#123;</span><br><span class="line">          <span class="keyword">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.consumerSendMsgBack(ctx, request); <span class="comment">// 处理重新发回broker消息的请求</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>org.apache.rocketmq.broker.processor.SendMessageProcessor.consumerSendMsgBack(ChannelHandlerContext, RemotingCommand)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RemotingCommand <span class="title function_">consumerSendMsgBack</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand request)</span></span><br><span class="line">    <span class="keyword">throws</span> RemotingCommandException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RemotingCommand</span> <span class="variable">response</span> <span class="operator">=</span> RemotingCommand.createResponseCommand(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ConsumerSendMsgBackRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span></span><br><span class="line">        (ConsumerSendMsgBackRequestHeader)request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">namespace</span> <span class="operator">=</span> NamespaceUtil.getNamespaceFromResource(requestHeader.getGroup());</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.hasConsumeMessageHook() &amp;&amp; !UtilAll.isBlank(requestHeader.getOriginMsgId())) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConsumeMessageContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeMessageContext</span>();</span><br><span class="line">        context.setNamespace(namespace);</span><br><span class="line">        context.setConsumerGroup(requestHeader.getGroup());</span><br><span class="line">        context.setTopic(requestHeader.getOriginTopic());</span><br><span class="line">        context.setCommercialRcvStats(BrokerStatsManager.StatsType.SEND_BACK);</span><br><span class="line">        context.setCommercialRcvTimes(<span class="number">1</span>);</span><br><span class="line">        context.setCommercialOwner(request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.executeConsumeMessageHookAfter(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">SubscriptionGroupConfig</span> <span class="variable">subscriptionGroupConfig</span> <span class="operator">=</span></span><br><span class="line">        <span class="built_in">this</span>.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getGroup());</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == subscriptionGroupConfig) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);</span><br><span class="line">        response.setRemark(<span class="string">&quot;subscription group not exist, &quot;</span> + requestHeader.getGroup() + <span class="string">&quot; &quot;</span></span><br><span class="line">            + FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PermName.isWriteable(<span class="built_in">this</span>.brokerController.getBrokerConfig().getBrokerPermission())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(<span class="string">&quot;the broker[&quot;</span> + <span class="built_in">this</span>.brokerController.getBrokerConfig().getBrokerIP1() + <span class="string">&quot;] sending message is forbidden&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (subscriptionGroupConfig.getRetryQueueNums() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">        response.setRemark(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">newTopic</span> <span class="operator">=</span> MixAll.getRetryTopic(requestHeader.getGroup());</span><br><span class="line">    <span class="type">int</span> <span class="variable">queueIdInt</span> <span class="operator">=</span> Math.abs(<span class="built_in">this</span>.random.nextInt() % <span class="number">99999999</span>) % subscriptionGroupConfig.getRetryQueueNums();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">topicSysFlag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (requestHeader.isUnitMode()) &#123;</span><br><span class="line">        topicSysFlag = TopicSysFlag.buildSysFlag(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TopicConfig</span> <span class="variable">topicConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(</span><br><span class="line">        newTopic,</span><br><span class="line">        subscriptionGroupConfig.getRetryQueueNums(),</span><br><span class="line">        PermName.PERM_WRITE | PermName.PERM_READ, topicSysFlag);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == topicConfig) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(<span class="string">&quot;topic[&quot;</span> + newTopic + <span class="string">&quot;] not exist&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PermName.isWriteable(topicConfig.getPerm())) &#123;</span><br><span class="line">        response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class="line">        response.setRemark(String.format(<span class="string">&quot;the topic[%s] sending message is forbidden&quot;</span>, newTopic));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">MessageExt</span> <span class="variable">msgExt</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerController.getMessageStore().lookMessageByOffset(requestHeader.getOffset());</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == msgExt) &#123;</span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(<span class="string">&quot;look message by offset failed, &quot;</span> + requestHeader.getOffset());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">retryTopic</span> <span class="operator">=</span> msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == retryTopic) &#123;</span><br><span class="line">        MessageAccessor.putProperty(msgExt, MessageConst.PROPERTY_RETRY_TOPIC, msgExt.getTopic());</span><br><span class="line">    &#125;</span><br><span class="line">    msgExt.setWaitStoreMsgOK(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">delayLevel</span> <span class="operator">=</span> requestHeader.getDelayLevel();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxReconsumeTimes</span> <span class="operator">=</span> subscriptionGroupConfig.getRetryMaxTimes();</span><br><span class="line">    <span class="keyword">if</span> (request.getVersion() &gt;= MQVersion.Version.V3_4_9.ordinal()) &#123;</span><br><span class="line">        maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (msgExt.getReconsumeTimes() &gt;= maxReconsumeTimes</span><br><span class="line">        || delayLevel &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        newTopic = MixAll.getDLQTopic(requestHeader.getGroup());</span><br><span class="line">        queueIdInt = Math.abs(<span class="built_in">this</span>.random.nextInt() % <span class="number">99999999</span>) % DLQ_NUMS_PER_GROUP;</span><br><span class="line"></span><br><span class="line">        topicConfig = <span class="built_in">this</span>.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic,</span><br><span class="line">            DLQ_NUMS_PER_GROUP,</span><br><span class="line">            PermName.PERM_WRITE, <span class="number">0</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == topicConfig) &#123;</span><br><span class="line">            response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">            response.setRemark(<span class="string">&quot;topic[&quot;</span> + newTopic + <span class="string">&quot;] not exist&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == delayLevel) &#123;</span><br><span class="line">            delayLevel = <span class="number">3</span> + msgExt.getReconsumeTimes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msgExt.setDelayTimeLevel(delayLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">MessageExtBrokerInner</span> <span class="variable">msgInner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageExtBrokerInner</span>();</span><br><span class="line">    msgInner.setTopic(newTopic);</span><br><span class="line">    msgInner.setBody(msgExt.getBody());</span><br><span class="line">    msgInner.setFlag(msgExt.getFlag());</span><br><span class="line">    MessageAccessor.setProperties(msgInner, msgExt.getProperties());</span><br><span class="line">    msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));</span><br><span class="line">    msgInner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(<span class="literal">null</span>, msgExt.getTags()));</span><br><span class="line"></span><br><span class="line">    msgInner.setQueueId(queueIdInt);</span><br><span class="line">    msgInner.setSysFlag(msgExt.getSysFlag());</span><br><span class="line">    msgInner.setBornTimestamp(msgExt.getBornTimestamp());</span><br><span class="line">    msgInner.setBornHost(msgExt.getBornHost());</span><br><span class="line">    msgInner.setStoreHost(<span class="built_in">this</span>.getStoreHost());</span><br><span class="line">    msgInner.setReconsumeTimes(msgExt.getReconsumeTimes() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">originMsgId</span> <span class="operator">=</span> MessageAccessor.getOriginMessageId(msgExt);</span><br><span class="line">    MessageAccessor.setOriginMessageId(msgInner, UtilAll.isBlank(originMsgId) ? msgExt.getMsgId() : originMsgId);</span><br><span class="line"></span><br><span class="line">    <span class="type">PutMessageResult</span> <span class="variable">putMessageResult</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerController.getMessageStore().putMessage(msgInner);</span><br><span class="line">    <span class="keyword">if</span> (putMessageResult != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (putMessageResult.getPutMessageStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PUT_OK:</span><br><span class="line">                <span class="type">String</span> <span class="variable">backTopic</span> <span class="operator">=</span> msgExt.getTopic();</span><br><span class="line">                <span class="type">String</span> <span class="variable">correctTopic</span> <span class="operator">=</span> msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</span><br><span class="line">                <span class="keyword">if</span> (correctTopic != <span class="literal">null</span>) &#123;</span><br><span class="line">                    backTopic = correctTopic;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.brokerController.getBrokerStatsManager().incSendBackNums(requestHeader.getGroup(), backTopic);</span><br><span class="line"></span><br><span class="line">                response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">                response.setRemark(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">        response.setRemark(putMessageResult.getPutMessageStatus().name());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.setCode(ResponseCode.SYSTEM_ERROR);</span><br><span class="line">    response.setRemark(<span class="string">&quot;putMessageResult is null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到，broker在接收到消费端consumer发回来的失败消息后，会转为延时消息存放起来（因为重试消息是有时间间隔的），利用&#x2F;的功能，broker端到了延迟的时间点，再将该&#x2F;转换为重试消息（Topic名转为%RETRY%+consumerGroup），此时consumer端对这些消息重新可见，从而会拉取到该重试消息，达到延迟重复消费的目的。</p><h1 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h1><p>延时消息的使用只需要在发送前，指定message的DelayTimeLevel即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;topic&quot;</span>,<span class="string">&quot;msg content&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">msg.setDelayTimeLevel(<span class="number">3</span>); <span class="comment">// 延迟10s</span></span><br><span class="line"><span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br></pre></td></tr></table></figure><p>目前RocketMQ支持的延迟时间有：</p><blockquote><p>延时 1s5s10s30s1m2m3m4m5m6m7m8m9m10m20m30m1h2h，对应的延迟级别（delayTimeLevel）依次为1,2,3,4,5…</p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>延迟消息在Producer发送后，在Broker被存放在单独一个Topic：SCHEDULE_TOPIC_XXXX，每一个延迟级别对应该Topic下的一个消费队列，当延迟时间到之时，由定时调度任务（DeliverDelayedMessageTimerTask）读取消息并转换为普通的消息存取到真实指定的Topic下，此时对于consumer端此消息才可见，从而被consumer消费。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 根据支持的各种延迟级别，添加不同延迟时间的TimeTask</span></span><br><span class="line">    <span class="keyword">if</span> (started.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.timer = <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="string">&quot;ScheduleMessageTimerThread&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Long&gt; entry : <span class="built_in">this</span>.delayLevelTable.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">level</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">timeDelay</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="built_in">this</span>.offsetTable.get(level); <span class="comment">// 获取每个延迟级别在普通消费队列中的offset</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == offset) &#123;</span><br><span class="line">                offset = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (timeDelay != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.timer.schedule(<span class="keyword">new</span> <span class="title class_">DeliverDelayedMessageTimerTask</span>(level, offset), FIRST_DELAY_TIME);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加一个专门执行延迟消息持久化的定时任务</span></span><br><span class="line">        <span class="built_in">this</span>.timer.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (started.get()) ScheduleMessageService.<span class="built_in">this</span>.persist();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;scheduleAtFixedRate flush exception&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">10000</span>, <span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心实现在DeliverDelayedMessageTimerTask类，其主要逻辑在于扫描延迟消息SCHEDULE_TOPIC_XXXX的队列下的消息，将延迟消息转换成指定Topic的消息</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask.executeOnTimeup()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeOnTimeup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ConsumeQueue</span> <span class="variable">cq</span> <span class="operator">=</span></span><br><span class="line">        ScheduleMessageService.<span class="built_in">this</span>.defaultMessageStore.findConsumeQueue(SCHEDULE_TOPIC,</span><br><span class="line">            delayLevel2QueueId(delayLevel)); <span class="comment">//读取队列SCHEDULE_TOPIC_XXXX，其中不同的延迟级别对应不同的队列id（queueId=delayLevel-1）</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">failScheduleOffset</span> <span class="operator">=</span> offset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cq != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">SelectMappedBufferResult</span> <span class="variable">bufferCQ</span> <span class="operator">=</span> cq.getIndexBuffer(<span class="built_in">this</span>.offset);</span><br><span class="line">        <span class="keyword">if</span> (bufferCQ != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">nextOffset</span> <span class="operator">=</span> offset;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                ConsumeQueueExt.<span class="type">CqExtUnit</span> <span class="variable">cqExtUnit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumeQueueExt</span>.CqExtUnit();</span><br><span class="line">                <span class="keyword">for</span> (; i &lt; bufferCQ.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123; <span class="comment">// 循环读取延迟消息</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">offsetPy</span> <span class="operator">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sizePy</span> <span class="operator">=</span> bufferCQ.getByteBuffer().getInt();</span><br><span class="line">                    <span class="type">long</span> <span class="variable">tagsCode</span> <span class="operator">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (cq.isExtAddr(tagsCode)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cq.getExt(tagsCode, cqExtUnit)) &#123;</span><br><span class="line">                            tagsCode = cqExtUnit.getTagsCode();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//can&#x27;t find ext content.So re compute tags code.</span></span><br><span class="line">                            log.error(<span class="string">&quot;[BUG] can&#x27;t find consume queue extend file content!addr=&#123;&#125;, offsetPy=&#123;&#125;, sizePy=&#123;&#125;&quot;</span>,</span><br><span class="line">                                tagsCode, offsetPy, sizePy);</span><br><span class="line">                            <span class="type">long</span> <span class="variable">msgStoreTime</span> <span class="operator">=</span> defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);</span><br><span class="line">                            tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                    <span class="type">long</span> <span class="variable">deliverTimestamp</span> <span class="operator">=</span> <span class="built_in">this</span>.correctDeliverTimestamp(now, tagsCode);</span><br><span class="line"></span><br><span class="line">                    nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class="line"></span><br><span class="line">                    <span class="type">long</span> <span class="variable">countdown</span> <span class="operator">=</span> deliverTimestamp - now;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (countdown &lt;= <span class="number">0</span>) &#123; <span class="comment">// 只有当延迟消息发送的消息到达了才处理</span></span><br><span class="line">                        <span class="type">MessageExt</span> <span class="variable">msgExt</span> <span class="operator">=</span></span><br><span class="line">                            ScheduleMessageService.<span class="built_in">this</span>.defaultMessageStore.lookMessageByOffset(</span><br><span class="line">                                offsetPy, sizePy); <span class="comment">// 根据offset值读取SCHEDULE_TOPIC_XXXX队列的消息</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (msgExt != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="type">MessageExtBrokerInner</span> <span class="variable">msgInner</span> <span class="operator">=</span> <span class="built_in">this</span>.messageTimeup(msgExt); <span class="comment">// 将读取的消息转换为真实topic的消息（也就是普通消息）</span></span><br><span class="line">                                <span class="type">PutMessageResult</span> <span class="variable">putMessageResult</span> <span class="operator">=</span></span><br><span class="line">                                    ScheduleMessageService.<span class="built_in">this</span>.writeMessageStore</span><br><span class="line">                                        .putMessage(msgInner); <span class="comment">// 存放该消息</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (putMessageResult != <span class="literal">null</span></span><br><span class="line">                                    &amp;&amp; putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) &#123;</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></span><br><span class="line">                                    log.error(</span><br><span class="line">                                        <span class="string">&quot;ScheduleMessageService, a message time up, but reput it failed, topic: &#123;&#125; msgId &#123;&#125;&quot;</span>,</span><br><span class="line">                                        msgExt.getTopic(), msgExt.getMsgId());</span><br><span class="line">                                    ScheduleMessageService.<span class="built_in">this</span>.timer.schedule(</span><br><span class="line">                                        <span class="keyword">new</span> <span class="title class_">DeliverDelayedMessageTimerTask</span>(<span class="built_in">this</span>.delayLevel,</span><br><span class="line">                                            nextOffset), DELAY_FOR_A_PERIOD);</span><br><span class="line">                                    ScheduleMessageService.<span class="built_in">this</span>.updateOffset(<span class="built_in">this</span>.delayLevel,</span><br><span class="line">                                        nextOffset);</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                 * <span class="doctag">XXX:</span> warn and notify me</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                                 */</span></span><br><span class="line">                                log.error(</span><br><span class="line">                                    <span class="string">&quot;ScheduleMessageService, messageTimeup execute error, drop it. msgExt=&quot;</span></span><br><span class="line">                                        + msgExt + <span class="string">&quot;, nextOffset=&quot;</span> + nextOffset + <span class="string">&quot;,offsetPy=&quot;</span></span><br><span class="line">                                        + offsetPy + <span class="string">&quot;,sizePy=&quot;</span> + sizePy, e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ScheduleMessageService.<span class="built_in">this</span>.timer.schedule(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">DeliverDelayedMessageTimerTask</span>(<span class="built_in">this</span>.delayLevel, nextOffset),</span><br><span class="line">                            countdown);</span><br><span class="line">                        ScheduleMessageService.<span class="built_in">this</span>.updateOffset(<span class="built_in">this</span>.delayLevel, nextOffset);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="comment">// end of for</span></span><br><span class="line">                <span class="comment">// 计算下一次读取延迟队列的offset，是定时任务下一次从该位置读取延时消息</span></span><br><span class="line">                nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class="line">                ScheduleMessageService.<span class="built_in">this</span>.timer.schedule(<span class="keyword">new</span> <span class="title class_">DeliverDelayedMessageTimerTask</span>(</span><br><span class="line">                    <span class="built_in">this</span>.delayLevel, nextOffset), DELAY_FOR_A_WHILE); <span class="comment">// 将下一次读取延迟队列的offset存放到一个缓存map中 </span></span><br><span class="line">                ScheduleMessageService.<span class="built_in">this</span>.updateOffset(<span class="built_in">this</span>.delayLevel, nextOffset);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">                bufferCQ.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end of if (bufferCQ != null)</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">cqMinOffset</span> <span class="operator">=</span> cq.getMinOffsetInQueue();</span><br><span class="line">            <span class="keyword">if</span> (offset &lt; cqMinOffset) &#123;</span><br><span class="line">                failScheduleOffset = cqMinOffset;</span><br><span class="line">                log.error(<span class="string">&quot;schedule CQ offset invalid. offset=&quot;</span> + offset + <span class="string">&quot;, cqMinOffset=&quot;</span></span><br><span class="line">                    + cqMinOffset + <span class="string">&quot;, queueId=&quot;</span> + cq.getQueueId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end of if (cq != null)</span></span><br><span class="line"></span><br><span class="line">    ScheduleMessageService.<span class="built_in">this</span>.timer.schedule(<span class="keyword">new</span> <span class="title class_">DeliverDelayedMessageTimerTask</span>(<span class="built_in">this</span>.delayLevel,</span><br><span class="line">        failScheduleOffset), DELAY_FOR_A_WHILE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的流程，大致为读取延迟队列的消息，取得消息的开始位置offset，将延迟消息转换为指定topic的普通消息并存起来，修改下一次读取的offset，改的是在内存中的offset而非文件中的，并指定下一次转换延迟消息的TimeTask。</p><p>至于持久化offset，在另一个定时任务ScheduleMessageService的persist()方法中实现</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.common.ConfigManager.persist()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="built_in">this</span>.encode(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (jsonString != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="built_in">this</span>.configFilePath();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MixAll.string2File(jsonString, fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;persist file &quot;</span> + fileName + <span class="string">&quot; exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，延迟消息的核心实现比之普通消息，只是多了一道将从延迟消息Topic的队列中取出延迟消息以转储到普通消息Topic下的处理，其余逻辑与普通消息无异。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>消息消费部分是实现过程细节众多的一个模块，当中包括消息消费方式、队列重新负载、消息拉取、消费处理、进度存储及同步、定时消息（延迟消息）、保证顺序消费等等。<br>RocketMQ的消息消费方式包括集群模式与广播模式，不同模式有不同的处理逻辑。在拉取消息时会因应不同的消息处理情况作出不同的处理，譬如引发队列的重新负载，根据当前消费组内消费者个数与主题队列数量按照某一种负载算法进行队列分配，分配原则为同一个消费者可以分配多个消息消费队列，同一个消息消费队列同一时间只会分配给一个消费者。<br>消息拉取由 PullMessageService 线程根据 RebalanceService线程创建的拉取任务进行拉取，默认一批拉取32条消息，提交给消费者消费线程池后继续下一次的消息拉取。<br>如果消息消费过慢产生消息堆积会触发消息消费拉取流控，流控针对的维度目前分别有：消息消费数量、消息大小、偏移量间隔。<br>消息消费是在消费线程池中并发地对同一消息消费队列的消息进行消费，消费成功后，取出消息处理队列中最小的消息偏移量作为消息消费进度偏移量存在于消息消费进度存储文件中，集群模式消息进度存储在 Broker，广播模式消息进度存储在Consumer端。<br>如果业务方返回 RECONSUME_LATER ，则 RocketMQ 启用消息消费重试机制，将原消息的主题与队列存储在消息属性中，将消息存储在主题名为SCHEDULE_TOPIC_XXXX的消息消费队列中，等待指定时间后，RocketMQ自动将该消息重新拉取并再次将消息存储在commitlog进而转发到普通消息消费队列供消费者消费，消息消费重试主题为%RETRY%消费者组名。延迟消息并不支持任意精度的延迟时间调度，只支持定义好的延迟级别，可通过在broker配置文件中设置messageDelayLevel。延迟消息更多地使用在辅助消费的场景下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ消息存储</title>
      <link href="/2019/06/02/RocketMQ-Message-Storage/"/>
      <url>/2019/06/02/RocketMQ-Message-Storage/</url>
      
        <content type="html"><![CDATA[<h1 id="存储概要设计"><a href="#存储概要设计" class="headerlink" title="存储概要设计"></a>存储概要设计</h1><p>每个Broker都对应有一个MessageStore，专门用来存储发送到它的消息，不过MessageStore本身不是文件，只是存储的一个抽象，MessageStore 中保存着一个 CommitLog，CommitLog 维护了一个 MappedFileQueue，而MappedFileQueue 中又维护了多个 MappedFile，每个MappedFile都会映射到文件系统中一个文件，这些文件才是真正的存储消息的地方，MappedFile的文件名为它记录的第一条消息的全局物理偏移量。</p><p><img src="/images/post-RocketMQ-Message-Storage/20190602114015.png"></p><h1 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h1><p>Broker对于每个请求 Code，都注册了对应的处理类，其中用于接收消息的处理类为：org.apache.rocketmq.broker.processor.SendMessageProcessor。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, <span class="built_in">this</span>.sendMessageExecutor);</span><br><span class="line"><span class="built_in">this</span>.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor, <span class="built_in">this</span>.sendMessageExecutor);</span><br><span class="line"><span class="built_in">this</span>.remotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendProcessor, <span class="built_in">this</span>.sendMessageExecutor);</span><br></pre></td></tr></table></figure><p>SendMessageProcessor实现了 org.apache.rocketmq.remoting.netty.NettyRequestProcessor 接口，并在接口方法processRequest()中处理接收到的请求，SendMessageProcessor在processRequest()中调用了sendMessage()方法来进行消息处理。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.broker.processor.SendMessageProcessor.processRequest(ChannelHandlerContext, RemotingCommand)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RemotingCommand <span class="title function_">processRequest</span><span class="params">(ChannelHandlerContext ctx,</span></span><br><span class="line"><span class="params">                                      RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException &#123;</span><br><span class="line">    SendMessageContext mqtraceContext;</span><br><span class="line">    <span class="keyword">switch</span> (request.getCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.consumerSendMsgBack(ctx, request);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">SendMessageRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span> parseRequestHeader(request);</span><br><span class="line">            <span class="keyword">if</span> (requestHeader == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class="line">            <span class="built_in">this</span>.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class="line"></span><br><span class="line">            RemotingCommand response;</span><br><span class="line">            <span class="keyword">if</span> (requestHeader.isBatch()) &#123;</span><br><span class="line">                response = <span class="built_in">this</span>.sendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response = <span class="built_in">this</span>.sendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.executeSendMessageHookAfter(response, mqtraceContext);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h1><h2 id="SendMessageProcessor-sendMessage"><a href="#SendMessageProcessor-sendMessage" class="headerlink" title="SendMessageProcessor-sendMessage()"></a>SendMessageProcessor-sendMessage()</h2><p>接收到消息请求后，就要处理请求了，上面调用了sendMessage()来处理消息<br><b>SendMessageProcessor 中 sendMessage() 中主要分为下面几步：</b></p><ol><li><p>根据收到请求，封装成内部消息结构：MessageExtBrokerInner。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.broker.processor.SendMessageProcessor.sendMessage(ChannelHandlerContext, RemotingCommand, SendMessageContext, SendMessageRequestHeader)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">byte</span>[] body = request.getBody();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">MessageExtBrokerInner</span> <span class="variable">msgInner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageExtBrokerInner</span>();</span><br><span class="line">msgInner.setTopic(requestHeader.getTopic());</span><br><span class="line">msgInner.setQueueId(queueIdInt);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">msgInner.setBody(body);</span><br><span class="line">msgInner.setFlag(requestHeader.getFlag());</span><br><span class="line">MessageAccessor.setProperties(msgInner, MessageDecoder.string2messageProperties(requestHeader.getProperties()));</span><br><span class="line">msgInner.setPropertiesString(requestHeader.getProperties());</span><br><span class="line">msgInner.setBornTimestamp(requestHeader.getBornTimestamp());</span><br><span class="line">msgInner.setBornHost(ctx.channel().remoteAddress());</span><br><span class="line">msgInner.setStoreHost(<span class="built_in">this</span>.getStoreHost());</span><br><span class="line">msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == <span class="literal">null</span> ? <span class="number">0</span> : requestHeader.getReconsumeTimes());</span><br></pre></td></tr></table></figure></li><li><p>调用 Broker 中 的MessageStore的putMessage() 方法，将消息放入MessageStore中。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.broker.processor.SendMessageProcessor.sendMessage(ChannelHandlerContext, RemotingCommand, SendMessageContext, SendMessageRequestHeader)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putMessageResult = <span class="built_in">this</span>.brokerController.getMessageStore().putMessage(msgInner);</span><br></pre></td></tr></table></figure></li></ol><p>正如前面所述，每个Broker都有一个MessageStore实例，MessageStore本身是一个接口，定义了一些用来存储消息的接口协议，RocketMQ中MessageStore默认的实现类为DefaultMessageStore，Broker在其初始化方法initialize()中便会初始化好DefaultMessageStore。</p><h2 id="DefaultMessageStore-putMessage"><a href="#DefaultMessageStore-putMessage" class="headerlink" title="DefaultMessageStore-putMessage()"></a>DefaultMessageStore-putMessage()</h2><p>DefaultMessageStore 中 putMessage() 逻辑又分为下面几步：<br>1). 检查当前Broker是否可以存储消息，比如 MessageStore 被关闭、Broker 状态为 Slave 都会拒绝存储。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.store.DefaultMessageStore.putMessage(MessageExtBrokerInner)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.shutdown) &#123;</span><br><span class="line">          log.warn(<span class="string">&quot;message store has shutdown, so putMessage is forbidden&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PutMessageResult</span>(PutMessageStatus.SERVICE_NOT_AVAILABLE, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (BrokerRole.SLAVE == <span class="built_in">this</span>.messageStoreConfig.getBrokerRole()) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.printTimes.getAndIncrement();</span><br><span class="line">          <span class="keyword">if</span> ((value % <span class="number">50000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">              log.warn(<span class="string">&quot;message store is slave mode, so putMessage is forbidden &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PutMessageResult</span>(PutMessageStatus.SERVICE_NOT_AVAILABLE, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2). 检查消息合法性，比如消息的Topic长度和内容长度是否超出限制。这种情况下也会拒绝存储。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.store.DefaultMessageStore.putMessage(MessageExtBrokerInner)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (msg.getTopic().length() &gt; Byte.MAX_VALUE) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;putMessage message topic length too long &quot;</span> + msg.getTopic().length());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PutMessageResult</span>(PutMessageStatus.MESSAGE_ILLEGAL, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (msg.getPropertiesString() != <span class="literal">null</span> &amp;&amp; msg.getPropertiesString().length() &gt; Short.MAX_VALUE) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;putMessage message properties length too long &quot;</span> + msg.getPropertiesString().length());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PutMessageResult</span>(PutMessageStatus.PROPERTIES_SIZE_EXCEEDED, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3). 如果消息通过了上面的重重考验，便会被提交给 MessageStore 中的 CommitLog，进行下一步处理。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.store.DefaultMessageStore.putMessage(MessageExtBrokerInner)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PutMessageResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.commitLog.putMessage(msg);</span><br></pre></td></tr></table></figure><p>消息到了CommitLog后，便要开始进入存储逻辑了。我们来看看CommitLog中是如何处理消息的。</p><h2 id="CommitLog-PutMessage"><a href="#CommitLog-PutMessage" class="headerlink" title="CommitLog-PutMessage()"></a>CommitLog-PutMessage()</h2><ol><li><p>获取写锁，保证同一时刻只处理一条消息的存储操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putMessageLock.lock();</span><br></pre></td></tr></table></figure></li><li><p>从CommitLog的Message 中获取最新的MappedFile，追加消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MappedFile</span> <span class="variable">mappedFile</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedFileQueue.getLastMappedFile();</span><br><span class="line">result = mappedFile.appendMessage(msg, <span class="built_in">this</span>.appendMessageCallback);</span><br></pre></td></tr></table></figure></li></ol><p>前面介绍到，CommitLog 中保存了一个MappedFileQueue，MappedFileQueue 初始化的时候配置了消息文件MappedFile的存储路径以及单个MappedFile文件的大小，当某个消息文件写满后，便会生成一个新的MappedFile继续写入消息，所以MappedFileQueue中会按照消息写入时间顺序，维护多个MappedFile。</p><ol start="3"><li>消息追加结束后，释放写锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putMessageLock.unlock();</span><br></pre></td></tr></table></figure></li></ol><p><b>上面这几步中，重点关注的是第2步，即将消息追加到当前最新的MappedFile中。</b></p><p>上面追加消息调用的是MappedFile.appendMessage()方法，此方法最终调用到MappedFile.appendMessagesInner() 中：</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.MappedFile.appendMessagesInner(MessageExt, AppendMessageCallback)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> messageExt != <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">assert</span> cb != <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">currentPos</span> <span class="operator">=</span> <span class="built_in">this</span>.wrotePosition.get();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (currentPos &lt; <span class="built_in">this</span>.fileSize) &#123;</span><br><span class="line">          <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> writeBuffer != <span class="literal">null</span> ? writeBuffer.slice() : <span class="built_in">this</span>.mappedByteBuffer.slice();</span><br><span class="line">          byteBuffer.position(currentPos);</span><br><span class="line">          <span class="type">AppendMessageResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (messageExt <span class="keyword">instanceof</span> MessageExtBrokerInner) &#123;</span><br><span class="line">              result = cb.doAppend(<span class="built_in">this</span>.getFileFromOffset(), byteBuffer, <span class="built_in">this</span>.fileSize - currentPos, (MessageExtBrokerInner) messageExt);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (messageExt <span class="keyword">instanceof</span> MessageExtBatch) &#123;</span><br><span class="line">              result = cb.doAppend(<span class="built_in">this</span>.getFileFromOffset(), byteBuffer, <span class="built_in">this</span>.fileSize - currentPos, (MessageExtBatch) messageExt);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppendMessageResult</span>(AppendMessageStatus.UNKNOWN_ERROR);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">this</span>.wrotePosition.addAndGet(result.getWroteBytes());</span><br><span class="line">          <span class="built_in">this</span>.storeTimestamp = result.getStoreTimestamp();</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      log.error(<span class="string">&quot;MappedFile.appendMessage return null, wrotePosition: &#123;&#125; fileSize: &#123;&#125;&quot;</span>, currentPos, <span class="built_in">this</span>.fileSize);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppendMessageResult</span>(AppendMessageStatus.UNKNOWN_ERROR);</span><br></pre></td></tr></table></figure><ol><li><p>获取MappedFile中的 writeBuffer，如果 writeBuffer 为空，则获取mappedByteBuffer。</p><blockquote><p>在MessageStore初始化的时候，会初始化一个Buffer缓存池：TransientStorePool，TransientStorePool在初始化时会初始化若干DirectBuffer，放入一个Deque中，默认池子容量为5。MappedFile的writeBuffer就是从这个池子中获取的。<br>而 mappedByteBuffer 类型为MappedByteBuffer，前面说到每个MappedFile都会映射到文件系统中的一个文件，mappedByteBuffer 即为该文件在内存中的映射。<br>当追加消息到MappedFile中，会优先追加到 writeBuffer中。</p></blockquote></li><li><p>调用 cb.doAppend()追加消息，调用该方法时，传入了下面几个参数</p><blockquote><p>this.getFileFromOffset()：MappedFile的全局消息物理偏移量（即MappedFile中第一个消息全局物理偏移量，也是MappedFile的文件名）。<br>byteBuffer：即MappedFile的内存缓冲区，也即是 1 中的writeBuffer或mappedByteBuffer。<br>this.fileSize - currentPos：fileSize为单个文件的额定大小，默认为1GB，currentPos为当前文件中已经写到什么位置，两个相减即为当前文件剩余容量。<br>(MessageExtBrokerInner) messageExt：这个没什么好说的，就是内部封装好的消息</p></blockquote></li></ol><p>cb 从哪来的呢？前面CommitLog在调用appendMessagesInner()时，传入的 cb 为：this.appendMessageCallback，它的类型为 DefaultAppendMessageCallback，实现了AppendMessageCallback接口。所以我们接下来就要看看DefaultAppendMessageCallback中对于doAppend()的实现即可。</p><p>doAppend() 主要逻辑如下：</p><ol><li><p>计算消息存储的各个属性，如消息长度，消息在消息队列中的长度等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> MessageDecoder.createMessageId(<span class="built_in">this</span>.msgIdMemory, msgInner.getStoreHostBytes(hostHolder), wroteOffset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record ConsumeQueue information</span></span><br><span class="line">keyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">keyBuilder.append(msgInner.getTopic());</span><br><span class="line">keyBuilder.append(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">keyBuilder.append(msgInner.getQueueId());</span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyBuilder.toString();</span><br><span class="line"><span class="type">Long</span> <span class="variable">queueOffset</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.topicQueueTable.get(key);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">final</span> <span class="type">byte</span>[] topicData = msgInner.getTopic().getBytes(MessageDecoder.CHARSET_UTF8);</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">topicLength</span> <span class="operator">=</span> topicData.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">bodyLength</span> <span class="operator">=</span> msgInner.getBody() == <span class="literal">null</span> ? <span class="number">0</span> : msgInner.getBody().length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">msgLen</span> <span class="operator">=</span> calMsgLength(bodyLength, topicLength, propertiesLength);</span><br></pre></td></tr></table></figure></li><li><p>判断消息追加后是否超过单个MappedFile大小，如果超出，则返回状态码：AppendMessageStatus.END_OF_FILE</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determines whether there is sufficient free space</span></span><br><span class="line"><span class="keyword">if</span> ((msgLen + END_FILE_MIN_BLANK_LENGTH) &gt; maxBlank) &#123;</span><br><span class="line">    <span class="built_in">this</span>.resetByteBuffer(<span class="built_in">this</span>.msgStoreItemMemory, maxBlank);</span><br><span class="line">    <span class="comment">// 1 TOTALSIZE</span></span><br><span class="line">    <span class="built_in">this</span>.msgStoreItemMemory.putInt(maxBlank);</span><br><span class="line">    <span class="comment">// 2 MAGICCODE</span></span><br><span class="line">    <span class="built_in">this</span>.msgStoreItemMemory.putInt(CommitLog.BLANK_MAGIC_CODE);</span><br><span class="line">    <span class="comment">// 3 The remaining space may be any value</span></span><br><span class="line">    <span class="comment">// Here the length of the specially set maxBlank</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">beginTimeMills</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.defaultMessageStore.now();</span><br><span class="line">    byteBuffer.put(<span class="built_in">this</span>.msgStoreItemMemory.array(), <span class="number">0</span>, maxBlank);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppendMessageResult</span>(AppendMessageStatus.END_OF_FILE, wroteOffset, maxBlank, msgId, msgInner.getStoreTimestamp(),</span><br><span class="line">        queueOffset, CommitLog.<span class="built_in">this</span>.defaultMessageStore.now() - beginTimeMills);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 CommitLog 会新创建一个MappedFile，重新追加消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (result.getStatus()) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> END_OF_FILE:</span><br><span class="line">        unlockMappedFile = mappedFile;</span><br><span class="line">        <span class="comment">// Create a new file, re-write the message</span></span><br><span class="line">        mappedFile = <span class="built_in">this</span>.mappedFileQueue.getLastMappedFile(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == mappedFile) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></span><br><span class="line">            log.error(<span class="string">&quot;create mapped file2 error, topic: &quot;</span> + msg.getTopic() + <span class="string">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class="line">            beginTimeInLock = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PutMessageResult</span>(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result);</span><br><span class="line">        &#125;</span><br><span class="line">        result = mappedFile.appendMessage(msg, <span class="built_in">this</span>.appendMessageCallback);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>序列化消息内容，存储到内存缓存区中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialization of storage space</span></span><br><span class="line"><span class="built_in">this</span>.resetByteBuffer(msgStoreItemMemory, msgLen);</span><br><span class="line"><span class="comment">// 1 TOTALSIZE</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgLen);</span><br><span class="line"><span class="comment">// 2 MAGICCODE</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(CommitLog.MESSAGE_MAGIC_CODE);</span><br><span class="line"><span class="comment">// 3 BODYCRC</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgInner.getBodyCRC());</span><br><span class="line"><span class="comment">// 4 QUEUEID</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgInner.getQueueId());</span><br><span class="line"><span class="comment">// 5 FLAG</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgInner.getFlag());</span><br><span class="line"><span class="comment">// 6 QUEUEOFFSET</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putLong(queueOffset);</span><br><span class="line"><span class="comment">// 7 PHYSICALOFFSET</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putLong(fileFromOffset + byteBuffer.position());</span><br><span class="line"><span class="comment">// 8 SYSFLAG</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgInner.getSysFlag());</span><br><span class="line"><span class="comment">// 9 BORNTIMESTAMP</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putLong(msgInner.getBornTimestamp());</span><br><span class="line"><span class="comment">// 10 BORNHOST</span></span><br><span class="line"><span class="built_in">this</span>.resetByteBuffer(hostHolder, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.put(msgInner.getBornHostBytes(hostHolder));</span><br><span class="line"><span class="comment">// 11 STORETIMESTAMP</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putLong(msgInner.getStoreTimestamp());</span><br><span class="line"><span class="comment">// 12 STOREHOSTADDRESS</span></span><br><span class="line"><span class="built_in">this</span>.resetByteBuffer(hostHolder, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.put(msgInner.getStoreHostBytes(hostHolder));</span><br><span class="line"><span class="comment">//this.msgBatchMemory.put(msgInner.getStoreHostBytes());</span></span><br><span class="line"><span class="comment">// 13 RECONSUMETIMES</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(msgInner.getReconsumeTimes());</span><br><span class="line"><span class="comment">// 14 Prepared Transaction Offset</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putLong(msgInner.getPreparedTransactionOffset());</span><br><span class="line"><span class="comment">// 15 BODY</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putInt(bodyLength);</span><br><span class="line"><span class="keyword">if</span> (bodyLength &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.msgStoreItemMemory.put(msgInner.getBody());</span><br><span class="line"><span class="comment">// 16 TOPIC</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.put((<span class="type">byte</span>) topicLength);</span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.put(topicData);</span><br><span class="line"><span class="comment">// 17 PROPERTIES</span></span><br><span class="line"><span class="built_in">this</span>.msgStoreItemMemory.putShort((<span class="type">short</span>) propertiesLength);</span><br><span class="line"><span class="keyword">if</span> (propertiesLength &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.msgStoreItemMemory.put(propertiesData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">beginTimeMills</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.defaultMessageStore.now();</span><br><span class="line"><span class="comment">// Write messages to the queue buffer</span></span><br><span class="line">byteBuffer.put(<span class="built_in">this</span>.msgStoreItemMemory.array(), <span class="number">0</span>, msgLen);</span><br></pre></td></tr></table></figure></li><li><p>返回追加成功的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AppendMessageResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppendMessageResult</span>(AppendMessageStatus.PUT_OK, wroteOffset, msgLen, msgId,</span><br><span class="line">msgInner.getStoreTimestamp(), queueOffset, CommitLog.<span class="built_in">this</span>.defaultMessageStore.now() - beginTimeMills);</span><br></pre></td></tr></table></figure></li></ol><h1 id="文件存储及刷盘策略"><a href="#文件存储及刷盘策略" class="headerlink" title="文件存储及刷盘策略"></a>文件存储及刷盘策略</h1><p>RocketMQ支持的刷盘策略有两种：</p><ol><li><p>同步刷盘<br>同步的意思就是说当消息追加到内存后，就立即刷到文件中存储。</p></li><li><p>异步刷盘<br>当消息追加到内存中，并不是理解刷到文件中，而是在后台任务中进行异步操作。</p></li></ol><p>RocketMQ默认采用异步刷盘策略。</p><p>当CommitLog在putMessage()中收到MappedFile成功追加消息到内存的结果后，便会调用handleDiskFlush()方法进行刷盘，将消息存储到文件中。handleDiskFlush() 便会根据两种刷盘策略，调用不同的刷盘服务。</p><figure class="highlight java"><figcaption><span><b>org.apache.rocketmq.store.CommitLog.CommitLog(DefaultMessageStore)</b></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (FlushDiskType.SYNC_FLUSH == defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) &#123;</span><br><span class="line">  <span class="built_in">this</span>.flushCommitLogService = <span class="keyword">new</span> <span class="title class_">GroupCommitService</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.flushCommitLogService = <span class="keyword">new</span> <span class="title class_">FlushRealTimeService</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步刷盘"><a href="#同步刷盘" class="headerlink" title="同步刷盘"></a>同步刷盘</h2><p>同步刷盘的服务为GroupCommitService，主要逻辑如下：</p><ol><li><p>handleDiskFlush()中提交刷盘请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">GroupCommitService</span> <span class="variable">service</span> <span class="operator">=</span> (GroupCommitService) <span class="built_in">this</span>.flushCommitLogService;</span><br><span class="line"></span><br><span class="line"><span class="type">GroupCommitRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupCommitRequest</span>(result.getWroteOffset() + result.getWroteBytes());</span><br><span class="line">service.putRequest(request);</span><br></pre></td></tr></table></figure></li><li><p>同步等待刷盘结果，刷盘失败也会标志消息存储失败，返回 FLUSH_DISK_TIMEOUT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">flushOK</span> <span class="operator">=</span> request.waitForFlush(<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout());</span><br><span class="line"><span class="keyword">if</span> (!flushOK) &#123;</span><br><span class="line">  log.error(<span class="string">&quot;do groupcommit, wait for flush failed, topic: &quot;</span> + messageExt.getTopic() + <span class="string">&quot; tags: &quot;</span> + messageExt.getTags()</span><br><span class="line">      + <span class="string">&quot; client address: &quot;</span> + messageExt.getBornHostString());</span><br><span class="line">  putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_DISK_TIMEOUT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>进行同步刷盘的服务为 GroupCommitService，当请求被提交给GroupCommitService后，GroupCommitService并不是立即处理，而是先放到内部的一个请求队列中，并利用waitPoint通知新请求到来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">putRequest</span><span class="params">(<span class="keyword">final</span> GroupCommitRequest request)</span> &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="built_in">this</span>.requestsWrite) &#123;</span><br><span class="line">          <span class="built_in">this</span>.requestsWrite.add(request);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (hasNotified.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">          waitPoint.countDown(); <span class="comment">// notify</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 GroupCommitService 被唤醒后，便会将 requestsWrite 中的请求交换到 requestsRead中，避免产生锁竞争。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swapRequests</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;GroupCommitRequest&gt; tmp = <span class="built_in">this</span>.requestsWrite;</span><br><span class="line">    <span class="built_in">this</span>.requestsWrite = <span class="built_in">this</span>.requestsRead;</span><br><span class="line">    <span class="built_in">this</span>.requestsRead = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GroupCommitService 在启动后会在死循环中调用doCommit()方法，而doCommit()则不断遍历requestsRead中的请求，进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doCommit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.requestsRead) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.requestsRead.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (GroupCommitRequest req : <span class="built_in">this</span>.requestsRead) &#123;</span><br><span class="line">                <span class="comment">// There may be a message in the next file, so a maximum of</span></span><br><span class="line">                <span class="comment">// two times the flush</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flushOK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span> &amp;&amp; !flushOK; i++) &#123;</span><br><span class="line">                    flushOK = CommitLog.<span class="built_in">this</span>.mappedFileQueue.getFlushedWhere() &gt;= req.getNextOffset();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!flushOK) &#123;</span><br><span class="line">                        CommitLog.<span class="built_in">this</span>.mappedFileQueue.flush(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                req.wakeupCustomer(flushOK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">storeTimestamp</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.mappedFileQueue.getStoreTimestamp();</span><br><span class="line">            <span class="keyword">if</span> (storeTimestamp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                CommitLog.<span class="built_in">this</span>.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(storeTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.requestsRead.clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Because of individual messages is set to not sync flush, it</span></span><br><span class="line">            <span class="comment">// will come to this process</span></span><br><span class="line">            CommitLog.<span class="built_in">this</span>.mappedFileQueue.flush(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这里最终调用了CommitLog.this.mappedFileQueue.flush(0) 来进行刷盘。</p><p>同步刷盘的任务虽然也是在异步线程中执行，但是消息存储的主流程中会同步等待刷盘结果，所以本质上还是同步操作。</p><h2 id="异步刷盘"><a href="#异步刷盘" class="headerlink" title="异步刷盘"></a>异步刷盘</h2><p>同步刷盘的服务为FlushRealTimeService，不过当内存缓存池TransientStorePool 可用时，消息会先提交到TransientStorePool 中的WriteBuffer内部，再提交到MappedFile的FileChannle中，此时异步刷盘服务就是 CommitRealTimeService，它继承自 FlushRealTimeService。</p><p>我们别管那么多，先看看FlushRealTimeService中的主要逻辑吧：</p><ol><li><p>handleDiskFlush()中直接唤醒异步刷盘服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushCommitLogService.wakeup();</span><br></pre></td></tr></table></figure></li><li><p>FlushRealTimeService 在启动后，会在死循环中周期性的进行刷盘操作，主要逻辑如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!<span class="built_in">this</span>.isStopped()) &#123;</span><br><span class="line">    <span class="comment">// 休眠策略，为 true 时，调用 Thread.sleep()休眠，为false时，调用wait()休眠，默认 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flushCommitLogTimed</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().isFlushCommitLogTimed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取刷盘周期，默认为 500 ms</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">interval</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushIntervalCommitLog();</span><br><span class="line">    <span class="comment">// 每次刷盘至少要刷多少页内容，每页大小为 4 k，默认每次要刷 4 页</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">flushPhysicQueueLeastPages</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushCommitLogLeastPages();</span><br><span class="line">    <span class="comment">// 两次刷写之间的最大时间间隔，默认 10 s</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">flushPhysicQueueThoroughInterval</span> <span class="operator">=</span></span><br><span class="line">        CommitLog.<span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushCommitLogThoroughInterval();</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">printFlushProgress</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print flush progress</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 判断当前时间距离上次刷盘时间是否已经超出设置的两次刷盘最大间隔</span></span><br><span class="line">    <span class="keyword">if</span> (currentTimeMillis &gt;= (<span class="built_in">this</span>.lastFlushTimestamp + flushPhysicQueueThoroughInterval)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastFlushTimestamp = currentTimeMillis;</span><br><span class="line">        <span class="comment">// 如果已经超时，则将flushPhysicQueueLeastPages设置为0，表明将所有内存缓存全部刷到文件中</span></span><br><span class="line">        flushPhysicQueueLeastPages = <span class="number">0</span>;</span><br><span class="line">        printFlushProgress = (printTimes++ % <span class="number">10</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据不同休眠策略，进行休眠等待</span></span><br><span class="line">        <span class="keyword">if</span> (flushCommitLogTimed) &#123;</span><br><span class="line">            Thread.sleep(interval);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.waitForRunning(interval);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (printFlushProgress) &#123;</span><br><span class="line">            <span class="built_in">this</span>.printFlushProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 休眠结束，开始执行刷盘操作</span></span><br><span class="line">        CommitLog.<span class="built_in">this</span>.mappedFileQueue.flush(flushPhysicQueueLeastPages);</span><br><span class="line">        <span class="type">long</span> <span class="variable">storeTimestamp</span> <span class="operator">=</span> CommitLog.<span class="built_in">this</span>.mappedFileQueue.getStoreTimestamp();</span><br><span class="line">        <span class="keyword">if</span> (storeTimestamp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            CommitLog.<span class="built_in">this</span>.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(storeTimestamp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">past</span> <span class="operator">=</span> System.currentTimeMillis() - begin;</span><br><span class="line">        <span class="keyword">if</span> (past &gt; <span class="number">500</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Flush data to disk costs &#123;&#125; ms&quot;</span>, past);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        CommitLog.log.warn(<span class="built_in">this</span>.getServiceName() + <span class="string">&quot; service has exception. &quot;</span>, e);</span><br><span class="line">        <span class="built_in">this</span>.printFlushProgress();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过上面这段逻辑可知，异步刷盘就在异步线程中，周期性的将内存缓冲区的内容刷到文件中，在消息主流程中，只会唤醒异步刷盘线程，而不会同步等待刷盘结果，所以称为异步刷盘。</p><h2 id="MappedFile的刷盘"><a href="#MappedFile的刷盘" class="headerlink" title="MappedFile的刷盘"></a>MappedFile的刷盘</h2><p>两种刷盘策略，最终都调用了下面这个方法进行刷盘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CommitLog.<span class="built_in">this</span>.mappedFileQueue.flush(flushPhysicQueueLeastPages);</span><br></pre></td></tr></table></figure><p>是时候看看mappedFileQueue.flush()中做了什么了。</p><ol><li>从mappedFileQueue保存的所有MappedFile中，找出所要刷盘的MappedFile</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MappedFile</span> <span class="variable">mappedFile</span> <span class="operator">=</span> <span class="built_in">this</span>.findMappedFileByOffset(<span class="built_in">this</span>.flushedWhere, <span class="built_in">this</span>.flushedWhere == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>flushedWhere 记录了最后一条被刷到文件的内容的全局物理偏移量。所以此次刷盘就要根据偏移量，找到本次要刷盘的起始点位于哪个MappedFile。</p><ol start="2"><li>如果找到了对应的MappedFile，则对该MappedFile中的内容执行刷盘操作，并更新flushedWhere。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mappedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">tmpTimeStamp</span> <span class="operator">=</span> mappedFile.getStoreTimestamp();</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> mappedFile.flush(flushLeastPages);</span><br><span class="line">    <span class="type">long</span> <span class="variable">where</span> <span class="operator">=</span> mappedFile.getFileFromOffset() + offset;</span><br><span class="line">    result = where == <span class="built_in">this</span>.flushedWhere;</span><br><span class="line">    <span class="built_in">this</span>.flushedWhere = where;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == flushLeastPages) &#123;</span><br><span class="line">        <span class="built_in">this</span>.storeTimestamp = tmpTimeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷盘的终极目的地就在MappedFile的flush()方法中，具体也分为下面几步：</p><ol><li>判断是否满足刷盘条件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.isAbleToFlush(flushLeastPages)) </span><br></pre></td></tr></table></figure>isAbleToFlush()其实就是判断当前剩余未刷盘内容长度，是否超过最小刷盘长度：flushLeastPages，避免不必要的刷盘操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAbleToFlush</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> flushLeastPages)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">flush</span> <span class="operator">=</span> <span class="built_in">this</span>.flushedPosition.get();</span><br><span class="line">    <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> getReadPosition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isFull()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flushLeastPages &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((write / OS_PAGE_SIZE) - (flush / OS_PAGE_SIZE)) &gt;= flushLeastPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> write &gt; flush;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果满足刷盘条件，则将内存中的内容刷到文件中。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果writeBuffer不为空，则表明消息是先提交到writeBuffer中，已经从writeBuffer提交到fileChannel，直接调用fileChannel.force()</span></span><br><span class="line"><span class="keyword">if</span> (writeBuffer != <span class="literal">null</span> || <span class="built_in">this</span>.fileChannel.position() != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.fileChannel.force(<span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="comment">// 反之，消息是直接存储在文件内存映射缓冲区mappedByteBuffer中，直接调用它的force()即可</span></span><br><span class="line">    <span class="built_in">this</span>.mappedByteBuffer.force();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到这儿，消息就成功的从内存中存储到文件内部了。</p><h1 id="消息索引"><a href="#消息索引" class="headerlink" title="消息索引"></a>消息索引</h1><h2 id="ConsumerQueue"><a href="#ConsumerQueue" class="headerlink" title="ConsumerQueue"></a>ConsumerQueue</h2><p>RocketMQ为了保证消息发送的高吞吐量，采用单一文件存储（CommitLog）所有Topic的消息，从而保证消息存储是完全的顺序写，这是写消息的高性能所在，但是这样给文件读取带来了不便，试想一下如果消费者直接从CommitLog中去遍历查找所订阅的Topic下的消息，效率将极其低下。为了适应消息消费的检索需求，RocketMQ设计了消息消费队列文件（ConsumeQueue），ConsumeQueue可以看成是CommitLog关于消息消费的“索引”文件，ConsumeQueue的第一级目录为Topic，第二级目录为Topic底下的消息队列（MessageQueue）。</p><p>为了加速 ConsumeQueue 消息条目的检索速度与节省磁盘空间，每一个 ConsumeQueue 条目不会存储消息的全量信息，它存储自己所属Topic的消息在CommitLog中的偏移量，这样当消费者从Broker拉取消息的时候，就可以快速根据偏移量定位到消息，其存储格式如图所示<br><img src="/images/post-RocketMQ-Message-Storage/20190602121037.png"></p><p>单个 ConsumeQueue 文件默认包含30万个条目，也就是说单个文件的长度为30W x 20 字节。单个ConsumeQueue文件可以看作是一个 ConsumeQueue 条目的数组，数组下标为 ConsumeQueue 的逻辑偏移量，消息消费进度存储的偏移量即逻辑偏移量。</p><p>ConsumeQueue 构建机制是当消息到达 Commitlog 文件后 由专门的线程产生消息转发任务，从而构建消息消费队列文件与下文提到的索引文件。</p><p>ConsumeQueue本身同样是利用MappedFileQueue进行记录偏移量信息的，可见MappedFileQueue的设计多么美妙，它没有与消息进行耦合，而是设计成一个通用的存储功能。</p><p>先来看一下ConsumeQueue根据消息逻辑偏移量、时间戳查找消息的实现。</p><h3 id="根据消息逻辑偏移量查找消息"><a href="#根据消息逻辑偏移量查找消息" class="headerlink" title="根据消息逻辑偏移量查找消息"></a>根据消息逻辑偏移量查找消息</h3><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ConsumeQueue.getIndexBuffer(long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SelectMappedBufferResult <span class="title function_">getIndexBuffer</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> startIndex)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">mappedFileSize</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedFileSize;</span><br><span class="line">       <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> startIndex * CQ_STORE_UNIT_SIZE;</span><br><span class="line">       <span class="keyword">if</span> (offset &gt;= <span class="built_in">this</span>.getMinLogicOffset()) &#123;</span><br><span class="line">           <span class="type">MappedFile</span> <span class="variable">mappedFile</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedFileQueue.findMappedFileByOffset(offset);</span><br><span class="line">           <span class="keyword">if</span> (mappedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">SelectMappedBufferResult</span> <span class="variable">result</span> <span class="operator">=</span> mappedFile.selectMappedBuffer((<span class="type">int</span>) (offset % mappedFileSize));</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>根据 startIndex 获取消息消费队列条目。首先 startIndex * 20 算得在 consumeQueue 中的物理偏移 ，如果该 offset 小于 minLogicOffset，则返回 null，说明该消息已被删除；如果大于 minLogicOffset，则根据偏移量定位到具体的物理文件，然后通过 offset 与物理文大小取模获取在该文件的偏移，从而从偏移量开始连续读取 20个字节即可。</p><h3 id="根据时间戳查找消息"><a href="#根据时间戳查找消息" class="headerlink" title="根据时间戳查找消息"></a>根据时间戳查找消息</h3><p>由于方法代码篇幅较长，以下分段进行解析</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ConsumeQueue.getOffsetInQueueByTime(long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getOffsetInQueueByTime</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> timestamp)</span> &#123;</span><br><span class="line">    <span class="type">MappedFile</span> <span class="variable">mappedFile</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedFileQueue.getMappedFileByTime(timestamp);</span><br><span class="line">    <span class="keyword">if</span> (mappedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> minLogicOffset &gt; mappedFile.getFileFromOffset() ? (<span class="type">int</span>) (minLogicOffset - mappedFile.getFileFromOffset()) : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midOffset</span> <span class="operator">=</span> -<span class="number">1</span>, targetOffset = -<span class="number">1</span>, leftOffset = -<span class="number">1</span>, rightOffset = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">leftIndexValue</span> <span class="operator">=</span> -<span class="number">1L</span>, rightIndexValue = -<span class="number">1L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">minPhysicOffset</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultMessageStore.getMinPhyOffset();</span><br><span class="line">        <span class="type">SelectMappedBufferResult</span> <span class="variable">sbr</span> <span class="operator">=</span> mappedFile.selectMappedBuffer(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != sbr) &#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> sbr.getByteBuffer();</span><br><span class="line">            high = byteBuffer.limit() - CQ_STORE_UNIT_SIZE;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>首先根据时间戳定位到物理文件，其具体实现就是从首个文件开始找，直到找到首次出现更新时间大于该时间戳的文件。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ConsumeQueue.getOffsetInQueueByTime(long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (high &gt;= low) &#123;</span><br><span class="line">                    midOffset = (low + high) / (<span class="number">2</span> * CQ_STORE_UNIT_SIZE) * CQ_STORE_UNIT_SIZE;</span><br><span class="line">                    byteBuffer.position(midOffset);</span><br><span class="line">                    <span class="type">long</span> <span class="variable">phyOffset</span> <span class="operator">=</span> byteBuffer.getLong();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> byteBuffer.getInt();</span><br><span class="line">                    <span class="keyword">if</span> (phyOffset &lt; minPhysicOffset) &#123;</span><br><span class="line">                        low = midOffset + CQ_STORE_UNIT_SIZE;</span><br><span class="line">                        leftOffset = midOffset;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">long</span> <span class="variable">storeTime</span> <span class="operator">=</span></span><br><span class="line">                        <span class="built_in">this</span>.defaultMessageStore.getCommitLog().pickupStoreTimestamp(phyOffset, size);</span><br><span class="line">                    <span class="keyword">if</span> (storeTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (storeTime == timestamp) &#123;</span><br><span class="line">                        targetOffset = midOffset;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (storeTime &gt; timestamp) &#123;</span><br><span class="line">                        high = midOffset - CQ_STORE_UNIT_SIZE;</span><br><span class="line">                        rightOffset = midOffset;</span><br><span class="line">                        rightIndexValue = storeTime;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        low = midOffset + CQ_STORE_UNIT_SIZE;</span><br><span class="line">                        leftOffset = midOffset;</span><br><span class="line">                        leftIndexValue = storeTime;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>采用二分查找来加速检索。首先计算最低查找偏移量，取<b>消息队列最小偏移量</b>与<b>该文件最小偏移量</b>二者中的较小者作为low，获得当前存储文件中有效的最小消息物理偏移量minPhysicOffset，如果查找到消息偏移量小于该物理偏移量，则结束该查找过程。<br>二分查找的常规退出循环的条件为（ low &gt; high ），首先查找中间的偏移量 midOffset，将 ConsumeQueue 文件对应的 ByteBuffer 定位到 midOffset ，然后读取4个字节获取该消息的物理偏移量 offset。</p><ol><li>如果得到的物理偏移量小于当前的最小物理偏移量，说明待查找的物理偏移量肯定大于 midOffset，所以将 low 设置为 midOffset ，然后继续折半查找；</li><li>如果 offset 大于最小物理偏移，说明该消息是有效消息，则根据消息偏移量和消息长度获取消息的存储时间戳；</li><li>如果存储时间小于0，消息为无效消息，直接返回0；</li><li>如果存储时间戳等于待查找时间戳，说明查找到匹配消息，设置 targetOffset 并跳出循环；</li><li>如果存储时间戳大于待查找时间戳，说明待查找信息小于 midOffset ，则设置 high 为 midOffset 并设置 rightlndexValue 等于 midOffset；</li><li>如果存储时间小于待查找时间戳，说明待查找消息在大于 midOffset ，则设置 low 为 midOffset ，并设置 leftIndexValue 等于 midOffset。</li></ol><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.ConsumeQueue.getOffsetInQueueByTime(long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (targetOffset != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    offset = targetOffset;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (leftIndexValue == -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        offset = rightOffset;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rightIndexValue == -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        offset = leftOffset;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        offset =</span><br><span class="line">                            Math.abs(timestamp - leftIndexValue) &gt; Math.abs(timestamp</span><br><span class="line">                                - rightIndexValue) ? rightOffset : leftOffset;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (mappedFile.getFileFromOffset() + offset) / CQ_STORE_UNIT_SIZE;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sbr.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 targetOffset 不等于-1，表示找到了存储时间戳等于待查找时间的消息；如果 leftIndexValue 等于-1，表示返回比当前时间戳大并且最接近待查找时间的偏移量；如果 rightIndexValue 等于-1，表示返回的消息比待查找时间戳小并且最接近查找的偏移量。</p><h2 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h2><p>因为ConsumeQueue中没有存储消息ID，如果我们需要根据消息ID来查找消息，那么，在不采取其它措施来查找消息的情况下，就又得遍历CommitLog文件了，于是，为了满足这个需求，RocketMQ采用了索引文件（IndexFile）。</p><p>RocketMQ引入了Hash索引机制为消息建立索引，HashMap的设计，包含两个基本点：Hash槽与解决Hash冲突的链表结构。IndexFile布局如图</p><p><img src="/images/post-RocketMQ-Message-Storage/20190602122806.png"></p><p>消息的索引信息是存放在磁盘上的，文件以时间戳命名的，默认存放在 $ROCKETMQ_HOME&#x2F;store&#x2F;index 目录下。由上图来看，一个索引文件的结构被分成了三部分:</p><ul><li>前 40 个字节存放固定的<b>索引头(IndexHeader)</b>信息，包含了存放在这个索引文件中的消息的<b>最小&#x2F;大存储时间</b>、<b>最小&#x2F;大偏移量</b>等状况</li><li>中间一段存储了 500 万个哈希槽位，每个槽内部存储的是索引文件的地址 (索引槽)</li><li>最后一段存储了 2000 万个索引内容信息，是实际的索引信息存储的地方。每一个槽位存储了这条消息的键哈希值、存储偏移量、存储时间戳与下一个索引槽地址</li></ul><p>事实上，RocketMQ 在<b>内存中</b>还维护了一个<b>索引文件列表</b>，对于每一个索引文件，前一个文件的最大存储时间是下一个文件的最小存储时间，前一个文件的最大偏移量是下一个文件的最小偏移量。每一个索引文件都索引了在某个时间段内、某个偏移量段内的所有消息，当文件满了，就会用前一个文件的最大偏移量和最大存储时间作为起始值，创建下一个索引文件:</p><p><img src="/images/post-RocketMQ-Message-Storage/20190602123214.png"></p><h3 id="IndexFile文件的数据写入"><a href="#IndexFile文件的数据写入" class="headerlink" title="IndexFile文件的数据写入"></a>IndexFile文件的数据写入</h3><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexFile.putKey(String, long, long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key topic + uniqKey</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> phyOffset 物理偏移量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> storeTimestamp</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">putKey</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> phyOffset, <span class="keyword">final</span> <span class="type">long</span> storeTimestamp)</span> &#123;</span><br><span class="line">       <span class="comment">//1、判断index是否已满，返回失败</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.indexHeader.getIndexCount() &lt; <span class="built_in">this</span>.indexNum) &#123;</span><br><span class="line">           <span class="comment">//2、计算key的非负数hashCode</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">keyHash</span> <span class="operator">=</span> indexKeyHashMethod(key);</span><br><span class="line">           <span class="comment">//3、key应该存放的slot keyHash % 500W</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">slotPos</span> <span class="operator">=</span> keyHash % <span class="built_in">this</span>.hashSlotNum;</span><br><span class="line">           <span class="comment">//3、slot的数据存放位置 40 + keyHash %（500W）* 4</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">absSlotPos</span> <span class="operator">=</span> IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;</span><br><span class="line"></span><br><span class="line">           <span class="type">FileLock</span> <span class="variable">fileLock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// fileLock = this.fileChannel.lock(absSlotPos, hashSlotSize,</span></span><br><span class="line">               <span class="comment">// false);</span></span><br><span class="line">               <span class="comment">//5、如果存在hash冲突，获取这个slot存的前一个index的计数，如果没有则值为0</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">slotValue</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedByteBuffer.getInt(absSlotPos);</span><br><span class="line">               <span class="keyword">if</span> (slotValue &lt;= invalidIndex || slotValue &gt; <span class="built_in">this</span>.indexHeader.getIndexCount()) &#123;</span><br><span class="line">                   slotValue = invalidIndex;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//6、计算当前msg的存储时间和第一条msg相差秒数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">timeDiff</span> <span class="operator">=</span> storeTimestamp - <span class="built_in">this</span>.indexHeader.getBeginTimestamp();</span><br><span class="line"></span><br><span class="line">               <span class="comment">//这里为了节约空间；直接timestamp是8位</span></span><br><span class="line">               timeDiff = timeDiff / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.indexHeader.getBeginTimestamp() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   timeDiff = <span class="number">0</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeDiff &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                   timeDiff = Integer.MAX_VALUE;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeDiff &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                   timeDiff = <span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//7、获取该条index实际存储position</span></span><br><span class="line">               <span class="comment">//40 + 500W * 4 + index的顺序数 * 40；</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">absIndexPos</span> <span class="operator">=</span></span><br><span class="line">                   IndexHeader.INDEX_HEADER_SIZE + <span class="built_in">this</span>.hashSlotNum * hashSlotSize</span><br><span class="line">                       + <span class="built_in">this</span>.indexHeader.getIndexCount() * indexSize;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//8、Index Linked list</span></span><br><span class="line">               <span class="comment">//topic+message key的hash值</span></span><br><span class="line">               <span class="built_in">this</span>.mappedByteBuffer.putInt(absIndexPos, keyHash);</span><br><span class="line">               <span class="comment">//消息在CommitLog的物理文件地址, 可以直接查询到该消息(索引的核心机制)</span></span><br><span class="line">               <span class="built_in">this</span>.mappedByteBuffer.putLong(absIndexPos + <span class="number">4</span>, phyOffset);</span><br><span class="line">               <span class="comment">//消息的落盘时间与header里的beginTimestamp的差值(为了节省存储空间，如果直接存message的落盘时间就得8bytes)</span></span><br><span class="line">               <span class="built_in">this</span>.mappedByteBuffer.putInt(absIndexPos + <span class="number">4</span> + <span class="number">8</span>, (<span class="type">int</span>) timeDiff);</span><br><span class="line">               <span class="comment">//9、记录该slot上一个index</span></span><br><span class="line">               <span class="comment">//hash冲突处理的关键之处, 相同hash值上一个消息索引的index(如果当前消息索引是该hash值的第一个索引，则prevIndex=0, 也是消息索引查找时的停止条件)，每个slot位置的第一个消息的prevIndex就是0的</span></span><br><span class="line">               <span class="built_in">this</span>.mappedByteBuffer.putInt(absIndexPos + <span class="number">4</span> + <span class="number">8</span> + <span class="number">4</span>, slotValue);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//Slot Table</span></span><br><span class="line">               <span class="comment">//4字节</span></span><br><span class="line">               <span class="comment">//10、记录该slot当前index，如果hash冲突（即absSlotPos一致）作为下一次该slot新增的前置index</span></span><br><span class="line">               <span class="built_in">this</span>.mappedByteBuffer.putInt(absSlotPos, <span class="built_in">this</span>.indexHeader.getIndexCount());</span><br><span class="line"></span><br><span class="line">               <span class="comment">//11、如果是第一条消息，更新header中的起始offset和起始time</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.indexHeader.getIndexCount() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="built_in">this</span>.indexHeader.setBeginPhyOffset(phyOffset);</span><br><span class="line">                   <span class="built_in">this</span>.indexHeader.setBeginTimestamp(storeTimestamp);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//12、累计indexHeader</span></span><br><span class="line">               <span class="built_in">this</span>.indexHeader.incHashSlotCount();</span><br><span class="line">               <span class="built_in">this</span>.indexHeader.incIndexCount();</span><br><span class="line">               <span class="built_in">this</span>.indexHeader.setEndPhyOffset(phyOffset);</span><br><span class="line">               <span class="built_in">this</span>.indexHeader.setEndTimestamp(storeTimestamp);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               log.error(<span class="string">&quot;putKey exception, Key: &quot;</span> + key + <span class="string">&quot; KeyHashCode: &quot;</span> + key.hashCode(), e);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (fileLock != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       fileLock.release();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                       log.error(<span class="string">&quot;Failed to release the lock&quot;</span>, e);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           log.warn(<span class="string">&quot;Over index file capacity: index count = &quot;</span> + <span class="built_in">this</span>.indexHeader.getIndexCount()</span><br><span class="line">               + <span class="string">&quot;; index max num = &quot;</span> + <span class="built_in">this</span>.indexNum);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中，第5步判断slot的值是否存在，如存在则hash冲突，则在第9步把value设置为当前index的前一个index，到第10步将slot的值设置为当前index，这里有点类似HashMap的链表操作。值得注意的一点是，IndexFile 条目中存储的不<br>是消息索引 key 而是消息属性 key 的 HashCode ，在 根据 key 查找时需要根据消息物理偏移量找到消息进而再验证消息 key 的值，之所以只存储 Hash Code 而不存储具体的 key 是为了将 Index 目设计为定长结构，才 能方便地检索 与定位条目。</p><h3 id="索引文件检索"><a href="#索引文件检索" class="headerlink" title="索引文件检索"></a>索引文件检索</h3><p>索引生成的key是topic#MessageKey，所以两者作为参数传递进去查询消息</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexService.queryOffset(String, String, int, long, long)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> topic 按topic维度来查询消息，因为索引生成的时候key是用的topic#MessageKey</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key MessageKey</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maxNum 最多返回的消息数，因为key是由用户设置的，并不保证唯一，所以可能取到多个消息；同时index中只存储了hash，所以hash相同的消息也会取出来</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> begin 起始时间</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> end 结束时间</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> QueryOffsetResult <span class="title function_">queryOffset</span><span class="params">(String topic, String key, <span class="type">int</span> maxNum, <span class="type">long</span> begin, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">       List&lt;Long&gt; phyOffsets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Long&gt;(maxNum);</span><br><span class="line"></span><br><span class="line">       <span class="type">long</span> <span class="variable">indexLastUpdateTimestamp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">long</span> <span class="variable">indexLastUpdatePhyoffset</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//不会超过64条</span></span><br><span class="line">       maxNum = Math.min(maxNum, <span class="built_in">this</span>.defaultMessageStore.getMessageStoreConfig().getMaxMsgsNumBatch());</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.readWriteLock.readLock().lock();</span><br><span class="line">           <span class="keyword">if</span> (!<span class="built_in">this</span>.indexFileList.isEmpty()) &#123;</span><br><span class="line">               <span class="comment">//1、从最后一个文件开始往前查找，最后一个文件是最新的</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.indexFileList.size(); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                   <span class="type">IndexFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="built_in">this</span>.indexFileList.get(i - <span class="number">1</span>);</span><br><span class="line">                   <span class="type">boolean</span> <span class="variable">lastFile</span> <span class="operator">=</span> i == <span class="built_in">this</span>.indexFileList.size();</span><br><span class="line">                   <span class="keyword">if</span> (lastFile) &#123;</span><br><span class="line">                       indexLastUpdateTimestamp = f.getEndTimestamp();</span><br><span class="line">                       indexLastUpdatePhyoffset = f.getEndPhyOffset();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//2、判断index文件的时间包含了begin和end的全部或者部分</span></span><br><span class="line">                   <span class="keyword">if</span> (f.isTimeMatched(begin, end)) &#123;</span><br><span class="line">                       <span class="comment">//3、从index文件中获取offset</span></span><br><span class="line">                       f.selectPhyOffset(phyOffsets, buildKey(topic, key), maxNum, begin, end, lastFile);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (f.getBeginTimestamp() &lt; begin) &#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (phyOffsets.size() &gt;= maxNum) &#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           log.error(<span class="string">&quot;queryMsg exception&quot;</span>, e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.readWriteLock.readLock().unlock();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QueryOffsetResult</span>(phyOffsets, indexLastUpdateTimestamp, indexLastUpdatePhyoffset);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>物理偏移量查找</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexFile.selectPhyOffset(List<Long>, String, int, long, long, boolean)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectPhyOffset</span><span class="params">(<span class="keyword">final</span> List&lt;Long&gt; phyOffsets, <span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">int</span> maxNum,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">long</span> begin, <span class="keyword">final</span> <span class="type">long</span> end, <span class="type">boolean</span> lock)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.mappedFile.hold()) &#123;</span><br><span class="line">        <span class="comment">//1、计算key的非负数hashCode</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">keyHash</span> <span class="operator">=</span> indexKeyHashMethod(key);</span><br><span class="line">        <span class="comment">//2、key应该存放的slot keyHash % 500W</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slotPos</span> <span class="operator">=</span> keyHash % <span class="built_in">this</span>.hashSlotNum;</span><br><span class="line">        <span class="comment">//3、slot的数据存放位置 40 + keyHash %（500W）* 4</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">absSlotPos</span> <span class="operator">=</span> IndexHeader.INDEX_HEADER_SIZE + slotPos * hashSlotSize;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileLock</span> <span class="variable">fileLock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">                <span class="comment">// fileLock = this.fileChannel.lock(absSlotPos,</span></span><br><span class="line">                <span class="comment">// hashSlotSize, true);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、获取slot最后存储的index位置进行回溯</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">slotValue</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedByteBuffer.getInt(absSlotPos);</span><br><span class="line">            <span class="comment">// if (fileLock != null) &#123;</span></span><br><span class="line">            <span class="comment">// fileLock.release();</span></span><br><span class="line">            <span class="comment">// fileLock = null;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slotValue &lt;= invalidIndex || slotValue &gt; <span class="built_in">this</span>.indexHeader.getIndexCount()</span><br><span class="line">                || <span class="built_in">this</span>.indexHeader.getIndexCount() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">nextIndexToRead</span> <span class="operator">=</span> slotValue; ; ) &#123;</span><br><span class="line">                    <span class="comment">//5、查询条目满足则返回</span></span><br><span class="line">                    <span class="keyword">if</span> (phyOffsets.size() &gt;= maxNum) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//6、获取该条index实际存储position</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">absIndexPos</span> <span class="operator">=</span></span><br><span class="line">                        IndexHeader.INDEX_HEADER_SIZE + <span class="built_in">this</span>.hashSlotNum * hashSlotSize</span><br><span class="line">                            + nextIndexToRead * indexSize;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">keyHashRead</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedByteBuffer.getInt(absIndexPos);</span><br><span class="line">                    <span class="comment">//7、物理偏移量即commitLog的offset</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">phyOffsetRead</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedByteBuffer.getLong(absIndexPos + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当前msg的存储时间和第一条msg相差秒数</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">timeDiff</span> <span class="operator">=</span> (<span class="type">long</span>) <span class="built_in">this</span>.mappedByteBuffer.getInt(absIndexPos + <span class="number">4</span> + <span class="number">8</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prevIndexRead</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedByteBuffer.getInt(absIndexPos + <span class="number">4</span> + <span class="number">8</span> + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (timeDiff &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    timeDiff *= <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="type">long</span> <span class="variable">timeRead</span> <span class="operator">=</span> <span class="built_in">this</span>.indexHeader.getBeginTimestamp() + timeDiff;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">timeMatched</span> <span class="operator">=</span> (timeRead &gt;= begin) &amp;&amp; (timeRead &lt;= end);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//8、hash一致并且时间在begin和end之间，加入结果集中</span></span><br><span class="line">                    <span class="keyword">if</span> (keyHash == keyHashRead &amp;&amp; timeMatched) &#123;</span><br><span class="line">                        phyOffsets.add(phyOffsetRead);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//9、读取到0，说明没数据可读</span></span><br><span class="line">                    <span class="keyword">if</span> (prevIndexRead &lt;= invalidIndex</span><br><span class="line">                        || prevIndexRead &gt; <span class="built_in">this</span>.indexHeader.getIndexCount()</span><br><span class="line">                        || prevIndexRead == nextIndexToRead || timeRead &lt; begin) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//10、前一条不等于0，继续读取前一条，往前回溯</span></span><br><span class="line">                    nextIndexToRead = prevIndexRead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;selectPhyOffset exception &quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileLock != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileLock.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Failed to release the lock&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.mappedFile.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实时更新消息消费队列和索引文件"><a href="#实时更新消息消费队列和索引文件" class="headerlink" title="实时更新消息消费队列和索引文件"></a>实时更新消息消费队列和索引文件</h1><p>消息消费队列文件（ConsumeQueue）和消息属性索引文件（IndexFile）都是基于CommitLog文件构建的，当Producer提交消息存储到CommitLog文件中，consumeQueue和IndexFile需要及时更新，保证消息消费的及时性。而RocketMQ是通过开启一个线程ReputMessageService来做到准实时转发CommitLog文件更新的事件请求，而监听事件变化的相应的任务处理器根据转发的消息及时更新ConsumeQueue与IndexFile。更新流程如下：</p><p><img src="/images/post-RocketMQ-Message-Storage/20190602124152.png"></p><p>由org.apache.rocketmq.store.DefaultMessageStore.start()得知，每个Broker在启动时，会启动ReputMessageService线程，并初始化一个非常关键的参数reputFromOffset。该参数的含义是ReputMessageService从哪个物理偏移量开始转发消息给ConsumeQueue和IndexFile。如果允许重复转发，reputFromOffset设置为CommitLog的提交指针；如果不允许重复转发，reputFromOffset设置为CommitLog在内存中的最大偏移量。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.DefaultMessageStore.start()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.reputMessageService.setReputFromOffset(maxPhysicalPosInLogicQueue);</span><br><span class="line"><span class="built_in">this</span>.reputMessageService.start();</span><br></pre></td></tr></table></figure><p>如上图所示，ReputMessageService线程每执行1次任务推送后，休眠1ms即继续尝试推送更新任务到ConsumeQueue及IndexFile，任务转发的核心实现在doReput(…)方法中实现，其主要逻辑主要如下：</p><ol><li>返回reputFromOffset偏移量开始的全部有效数据（commitlog 文件），然后循环读取每一条消息。</li><li>从SelectMappedBufferResult返回的ByteBuffer中循环读取消息，一次读取一条，创建DispatchRequest对象，如果消息长度大于0，则调用doDispatch方法，最终分别调用CommitLogDispatcherBuildConsumeQueue（构建消息消费队列）、CommitLogDispatcherBuildlndex（构建索引文件）。接下来看下这两者的具体实现。</li></ol><h2 id="根据消息更新ConsumeQueue"><a href="#根据消息更新ConsumeQueue" class="headerlink" title="根据消息更新ConsumeQueue"></a>根据消息更新ConsumeQueue</h2><p>ConsumeQueue转发任务实现类为 CommitLogDispatcherBuildConsumeQueue，内部终将调用 putMessagePositionInfo(DispatchRequest) 方法</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.DefaultMessageStore.putMessagePositionInfo(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putMessagePositionInfo</span><span class="params">(DispatchRequest dispatchRequest)</span> &#123;</span><br><span class="line">    <span class="type">ConsumeQueue</span> <span class="variable">cq</span> <span class="operator">=</span> <span class="built_in">this</span>.findConsumeQueue(dispatchRequest.getTopic(), dispatchRequest.getQueueId());</span><br><span class="line">    cq.putMessagePositionInfoWrapper(dispatchRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据Topic及队列ID，先获取对应的ConsumeQueue文件，其逻辑比较简单，因为每个Topic对应一个ConsumeQueue目录，然后Topic下每个消息队列对应一个文件夹，然后Topic下每个消息队列对应一个文件夹，然后取出该文件夹最后的ConsumeQueue文件即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.byteBufferIndex.flip();</span><br><span class="line"><span class="built_in">this</span>.byteBufferIndex.limit(CQ_STORE_UNIT_SIZE);</span><br><span class="line"><span class="built_in">this</span>.byteBufferIndex.putLong(offset);</span><br><span class="line"><span class="built_in">this</span>.byteBufferIndex.putInt(size);</span><br><span class="line"><span class="built_in">this</span>.byteBufferIndex.putLong(tagsCode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">expectLogicOffset</span> <span class="operator">=</span> cqOffset * CQ_STORE_UNIT_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="type">MappedFile</span> <span class="variable">mappedFile</span> <span class="operator">=</span> <span class="built_in">this</span>.mappedFileQueue.getLastMappedFile(expectLogicOffset);</span><br><span class="line"><span class="keyword">if</span> (mappedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> mappedFile.appendMessage(<span class="built_in">this</span>.byteBufferIndex.array());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次将消息偏移量、消息长度、 tag_hashcode 写入到 ByteBuffer 中，并根据consumeQueueOffset计算ConsumeQueue中的物理地址，将内容追加到ConsumeQueue的内存映射文件（MappedFile，但本操作只追加并不刷盘），ConsumeQueue的刷盘方式固定为异步刷盘模式。</p><h2 id="根据消息更新IndexFile"><a href="#根据消息更新IndexFile" class="headerlink" title="根据消息更新IndexFile"></a>根据消息更新IndexFile</h2><p>Hash 索引文件转发任务实现类为 CommitLogDispatcherBuildIndex</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.DefaultMessageStore.CommitLogDispatcherBuildIndex.dispatch(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(DispatchRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (DefaultMessageStore.<span class="built_in">this</span>.messageStoreConfig.isMessageIndexEnable()) &#123;</span><br><span class="line">DefaultMessageStore.<span class="built_in">this</span>.indexService.buildIndex(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上代码可知，支持由配置方式，透过设置messageIndexEnable为true，来决定是否调用重建索引服务，也就是IndexService.buildIndex方法。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexService.buildIndex(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IndexFile</span> <span class="variable">indexFile</span> <span class="operator">=</span> retryGetAndCreateIndexFile();</span><br><span class="line">      <span class="keyword">if</span> (indexFile != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">endPhyOffset</span> <span class="operator">=</span> indexFile.getEndPhyOffset();</span><br><span class="line">          <span class="type">DispatchRequest</span> <span class="variable">msg</span> <span class="operator">=</span> req;</span><br><span class="line">          <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> msg.getTopic();</span><br><span class="line">          <span class="type">String</span> <span class="variable">keys</span> <span class="operator">=</span> msg.getKeys();</span><br><span class="line">          <span class="keyword">if</span> (msg.getCommitLogOffset() &lt; endPhyOffset) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取或创建 IndexFile 文件并获取所有文件最大的物理偏移量 如果该消息的物理偏移量小于索引文件中的物理偏移，则说明是重复数据，忽略本次索引构建。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexService.buildIndex(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req.getUniqKey() != <span class="literal">null</span>) &#123;</span><br><span class="line">    indexFile = putKey(indexFile, msg, buildKey(topic, req.getUniqKey()));</span><br><span class="line">    <span class="keyword">if</span> (indexFile == <span class="literal">null</span>) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;putKey error commitlog &#123;&#125; uniqkey &#123;&#125;&quot;</span>, req.getCommitLogOffset(), req.getUniqKey());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果消息的唯一键不为空，则添加到 Hash 索引中，以便加速根据唯一键检索消息。</p><figure class="highlight java"><figcaption><span>org.apache.rocketmq.store.index.IndexService.buildIndex(DispatchRequest)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (keys != <span class="literal">null</span> &amp;&amp; keys.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String[] keyset = keys.split(MessageConst.KEY_SEPARATOR);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; keyset.length; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyset[i];</span><br><span class="line">                    <span class="keyword">if</span> (key.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        indexFile = putKey(indexFile, msg, buildKey(topic, key));</span><br><span class="line">                        <span class="keyword">if</span> (indexFile == <span class="literal">null</span>) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;putKey error commitlog &#123;&#125; uniqkey &#123;&#125;&quot;</span>, req.getCommitLogOffset(), req.getUniqKey());</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>构建索引键， RocketMQ 支持为同一个消息建立多个索引，多个索引键空格分开。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>RocketMQ 主要存储文件包含消息文件（Commitlog）、消息消费队列文件（ConsumeQueue）、 Hash 索引文件 （IndexFile ）等。单个消息存储文件、消息消费队列文件、Hash索引文件长度固定以便使用内存映射机制进行文件的读写操作。RocketMQ 组织文件以文件的起始偏移量来命名文件，这样根据偏移量能快速定位到真实的物理文件。RocketMQ基于内存映射文件机制提供了同步刷盘与异步刷盘两种机制，异步刷盘是指在消息存储时先追加到内存映射文件，然后启动专门的刷盘线程定时将内存中的数据刷写到磁盘。当消息到达 Commitlog 文件后，会通过 ReputMessageService线程接近实时地将消息转发给消息消费队列文件与索引文件。<br><br/><br><b>大神总结的RocketMQ消息存储的总体架构图如下：</b></p><p><img src="/images/post-RocketMQ-Message-Storage/20190602130327.png"></p><blockquote><p>RocketMQ采用的这种存储结构，我们可以理解成<b>混合型</b>存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。而Kafka采用的是独立型的存储结构，每个队列一个文件。这种混合型结构的缺点在于，随机读的操作较多，降低读消息的效率，于是RocketMQ使用ConsumeQueue文件及IndexFile文件辅助消息读取、查找，而这样也要付出一定的开销及维护代价。为此，RocketMQ为提高读写性能，把系统中所有I&#x2F;O请求，都通过Page Cache机制实现，Page Cache本身可以对数据文件进行预读取。<br>另外，RocketMQ主要通过MappedByteBuffer对文件进行读写操作。其中，利用了NIO中的FileChannel模型直接将磁盘上的物理文件直接映射到用户态的内存地址中（这种Mmap的方式减少了传统IO将磁盘文件数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（这里需要注意的是，采用MappedByteBuffer这种内存映射的方式有几个限制，其中之一是一次只能映射1.5~2G 的文件至用户态的虚拟内存，这也是为何RocketMQ默认设置单个CommitLog日志数据文件为1G的原因了）。</p></blockquote><p>最后，附上大神总结的RocketMQ文件存储模型结构图：<br><img src="/images/post-RocketMQ-Message-Storage/20190602130618.png"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>《RocketMQ技术内幕》丁威<br><a href="https://zhuanlan.zhihu.com/p/59516998">RocketMQ源码分析之ConsumeQueue</a><br><a href="https://www.jianshu.com/p/b73fdd893f98">消息中间件—RocketMQ消息存储（一）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ-Producer消息发送</title>
      <link href="/2019/05/30/RocketMQ-Producer-Send-Message/"/>
      <url>/2019/05/30/RocketMQ-Producer-Send-Message/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ发送消息主流程"><a href="#RocketMQ发送消息主流程" class="headerlink" title="RocketMQ发送消息主流程"></a>RocketMQ发送消息主流程</h1><p>RocketMQ发送消息主要流程：<br>Producer在发送消息的时候，会根据消息的Topic，选出对应的路由信息，再挑选出具体某个队列，将消息发送至队列对应的Broker。</p><h1 id="RocketMQ消息发送方式"><a href="#RocketMQ消息发送方式" class="headerlink" title="RocketMQ消息发送方式"></a>RocketMQ消息发送方式</h1><p>RocketMQ支持3种消息发送方式：同步（Sync）、异步（Async）、单向（Oneway）。</p><ul><li>同步：发送者向MQ 执行发送消息API 时，同步等待， 直到消息服务器返回发送结果。</li><li>异步：发送者向MQ 执行发送消息API 时，指定消息发送成功后的回调函数，然后调用消息发送API 后，立即返回，消息发送者线程不阻塞，直到运行结束。待消息发送成功或失败的时候，回调任务在一个新的线程中执行。<br>*单向：消息发送者向MQ执行发送消息API时，直接返回，不等待消息服务器的结果，也不注册回调函数，简单地说，就是只管发，不在乎消息是否成功存储在消息服务器上。</li></ul><h1 id="RocketMQ-消息发送考虑的问题"><a href="#RocketMQ-消息发送考虑的问题" class="headerlink" title="RocketMQ 消息发送考虑的问题"></a>RocketMQ 消息发送考虑的问题</h1><ul><li>消息队列如何负载？</li><li>消息发送如何实现高可用？</li><li>批量消息发送如何实现一致性？</li></ul><h1 id="RocketMQ消息结构"><a href="#RocketMQ消息结构" class="headerlink" title="RocketMQ消息结构"></a>RocketMQ消息结构</h1><p>RocketMQ 消息封装类是 <b>org.apache.rocketmq.common.message.Message</b>，其类设计如下<br><img src="/images/post-RocketMQ-Producer-Send-Message/20190530045048.png"></p><p>Message类的全属性构造函数<br><b>org.apache.rocketmq.common.message.Message.Message(String, String, String, int, byte[], boolean)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(String topic, String tags, String keys, <span class="type">int</span> flag, <span class="type">byte</span>[] body, <span class="type">boolean</span> waitStoreMsgOK)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.topic = topic;  <span class="comment">// topic：消息所在的topic通道，主要属性</span></span><br><span class="line">       <span class="built_in">this</span>.flag = flag;  </span><br><span class="line">       <span class="built_in">this</span>.body = body; <span class="comment">// body：消息的真实内容，主要属性</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (tags != <span class="literal">null</span> &amp;&amp; tags.length() &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="built_in">this</span>.setTags(tags);  <span class="comment">// tags：消息标签，用于消息过滤</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (keys != <span class="literal">null</span> &amp;&amp; keys.length() &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="built_in">this</span>.setKeys(keys); <span class="comment">// keys：Message索引键，多个则用空格隔开，RocketMQ可以根据这些Key快速检索到消息</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.setWaitStoreMsgOK(waitStoreMsgOK);  <span class="comment">// waitStoreMsgOK：消息发送时是否等消息存储完成后再返回</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Message 的基础属性主要包括消息所属主题topic ， 消息Flag(RocketMQ 不做处理）、扩展属性（properties）、消息体（body）、事务ID（transactionId，用于分布式事务）。</p><p>其中，RocketMQ Message的一些扩展属性properties还包含：</p><ul><li>delayTimeLevel：消息延迟级别，用于定时消息或消息重试</li><li>buyerId： 买家ID（这个字段一看就带有很浓重的电商气息）</li></ul><p>透过这些属性的set方法可以知道，这些扩展属性存储在Message的Map类型的properties变量中。</p><h1 id="生产者的启动流程"><a href="#生产者的启动流程" class="headerlink" title="生产者的启动流程"></a>生产者的启动流程</h1><p>消息生产者的代码都在client 模块中，相对于RocketMQ 来说，它就是客户端，也是消息的提供者，我们在应用系统中初始化生产者的一个实例即可使用它来发消息。</p><h2 id="DefaultMQProducer（默认的消息发送者）"><a href="#DefaultMQProducer（默认的消息发送者）" class="headerlink" title="DefaultMQProducer（默认的消息发送者）"></a>DefaultMQProducer（默认的消息发送者）</h2><p>消息生产者的启动流程，我们可以从org.apache.rocketmq.client.producer.DefaultMQProducer.start()入口开始看进去，<br>默认实现是<b>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.start(boolean)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动的简易入口</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123; </span><br><span class="line">       <span class="built_in">this</span>.start(<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//程序的真实启动入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> startFactory)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">       <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">           <span class="keyword">case</span> CREATE_JUST:</span><br><span class="line">               <span class="built_in">this</span>.serviceState = ServiceState.START_FAILED; <span class="comment">// 设置默认的状态是失败</span></span><br><span class="line">               <span class="comment">// 验证配置，主要是验证group配置，不能为默认group</span></span><br><span class="line">               <span class="built_in">this</span>.checkConfig();  </span><br><span class="line">               <span class="comment">// 将group的的名称设置为当前线程的后缀id</span></span><br><span class="line">               <span class="keyword">if</span> (!<span class="built_in">this</span>.defaultMQProducer.getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP)) &#123;</span><br><span class="line">                   <span class="built_in">this</span>.defaultMQProducer.changeInstanceNameToPID();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 获得发送客户端工厂，该工程是复用设计，内部是client的配置</span></span><br><span class="line">               <span class="built_in">this</span>.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(<span class="built_in">this</span>.defaultMQProducer, rpcHook);</span><br><span class="line">               <span class="comment">// 注册当前的消息发送者，确保每个group都是唯一的，否则报错</span></span><br><span class="line">               <span class="type">boolean</span> <span class="variable">registerOK</span> <span class="operator">=</span> mQClientFactory.registerProducer(<span class="built_in">this</span>.defaultMQProducer.getProducerGroup(), <span class="built_in">this</span>);</span><br><span class="line">               <span class="keyword">if</span> (!registerOK) &#123;</span><br><span class="line">                   <span class="built_in">this</span>.serviceState = ServiceState.CREATE_JUST;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The producer group[&quot;</span> + <span class="built_in">this</span>.defaultMQProducer.getProducerGroup()</span><br><span class="line">                       + <span class="string">&quot;] has been created before, specify another name please.&quot;</span> + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span><br><span class="line">                       <span class="literal">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// topic的发送消息管理，发生自动创建topic的请求</span></span><br><span class="line">               <span class="built_in">this</span>.topicPublishInfoTable.put(<span class="built_in">this</span>.defaultMQProducer.getCreateTopicKey(), <span class="keyword">new</span> <span class="title class_">TopicPublishInfo</span>());</span><br><span class="line">               <span class="comment">//如果是静态工程启动，需要手动的启动</span></span><br><span class="line">               <span class="keyword">if</span> (startFactory) &#123;</span><br><span class="line">                   mQClientFactory.start();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               log.info(<span class="string">&quot;the producer [&#123;&#125;] start OK. sendMessageWithVIPChannel=&#123;&#125;&quot;</span>, <span class="built_in">this</span>.defaultMQProducer.getProducerGroup(),</span><br><span class="line">                   <span class="built_in">this</span>.defaultMQProducer.isSendMessageWithVIPChannel());</span><br><span class="line">               <span class="built_in">this</span>.serviceState = ServiceState.RUNNING;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> RUNNING:</span><br><span class="line">           <span class="keyword">case</span> START_FAILED:</span><br><span class="line">           <span class="keyword">case</span> SHUTDOWN_ALREADY:</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The producer service state not OK, maybe started once, &quot;</span></span><br><span class="line">                   + <span class="built_in">this</span>.serviceState</span><br><span class="line">                   + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),</span><br><span class="line">                   <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 启动成功后，发送心跳</span></span><br><span class="line">       <span class="built_in">this</span>.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来，重点看一下<b>MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer, rpcHook)</b>的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于本地缓存的客户端管理</span></span><br><span class="line">   <span class="keyword">public</span> MQClientInstance <span class="title function_">getAndCreateMQClientInstance</span><span class="params">(<span class="keyword">final</span> ClientConfig clientConfig, RPCHook rpcHook)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> clientConfig.buildMQClientId(); <span class="comment">//id为当前服务器的id</span></span><br><span class="line">       <span class="type">MQClientInstance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryTable.get(clientId); <span class="comment">//是否有可复用的通信客户端，资源占用比较大，可以复用</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">           instance =</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">MQClientInstance</span>(clientConfig.cloneClientConfig(),</span><br><span class="line">                   <span class="built_in">this</span>.factoryIndexGenerator.getAndIncrement(), clientId, rpcHook); <span class="comment">//初始化客户端请求实例</span></span><br><span class="line">           <span class="type">MQClientInstance</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryTable.putIfAbsent(clientId, instance); <span class="comment">//设置请求对象，如果存在则返回原先的值，同时不覆盖，用原来的请求</span></span><br><span class="line">           <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">               instance = prev;</span><br><span class="line">               log.warn(<span class="string">&quot;Returned Previous MQClientInstance for clientId:[&#123;&#125;]&quot;</span>, clientId);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               log.info(<span class="string">&quot;Created new MQClientInstance for clientId:[&#123;&#125;]&quot;</span>, clientId);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续跟进去看初始化MQClientInstance的构造，最终的操作都会围绕该类进行操作和整合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化客户端请求实例</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MQClientInstance</span><span class="params">(ClientConfig clientConfig, <span class="type">int</span> instanceIndex, String clientId, RPCHook rpcHook)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.clientConfig = clientConfig; <span class="comment">//mq的核心配置信息</span></span><br><span class="line">       <span class="built_in">this</span>.instanceIndex = instanceIndex; <span class="comment">//当前进程内的唯一标识，升序数值</span></span><br><span class="line">       <span class="built_in">this</span>.nettyClientConfig = <span class="keyword">new</span> <span class="title class_">NettyClientConfig</span>(); <span class="comment">//netty通信的客户端配置</span></span><br><span class="line">       <span class="built_in">this</span>.nettyClientConfig.setClientCallbackExecutorThreads(clientConfig.getClientCallbackExecutorThreads());</span><br><span class="line">       <span class="built_in">this</span>.nettyClientConfig.setUseTLS(clientConfig.isUseTLS());</span><br><span class="line">       <span class="built_in">this</span>.clientRemotingProcessor = <span class="keyword">new</span> <span class="title class_">ClientRemotingProcessor</span>(<span class="built_in">this</span>); <span class="comment">//解析客户端请求，封装的事件处理</span></span><br><span class="line">       <span class="built_in">this</span>.mQClientAPIImpl = <span class="keyword">new</span> <span class="title class_">MQClientAPIImpl</span>(<span class="built_in">this</span>.nettyClientConfig, <span class="built_in">this</span>.clientRemotingProcessor, rpcHook, clientConfig); <span class="comment">//客户端实例的实际实现，网络通信的核心，只是初始化了通信框架，具体的链接后面根据不同的地址再进行链接操作</span></span><br><span class="line">       <span class="comment">//设置核心的nameserv地址</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.clientConfig.getNamesrvAddr() != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="built_in">this</span>.mQClientAPIImpl.updateNameServerAddressList(<span class="built_in">this</span>.clientConfig.getNamesrvAddr());</span><br><span class="line">           log.info(<span class="string">&quot;user specified name server address: &#123;&#125;&quot;</span>, <span class="built_in">this</span>.clientConfig.getNamesrvAddr());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.clientId = clientId;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.mQAdminImpl = <span class="keyword">new</span> <span class="title class_">MQAdminImpl</span>(<span class="built_in">this</span>); <span class="comment">//mq管理</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.pullMessageService = <span class="keyword">new</span> <span class="title class_">PullMessageService</span>(<span class="built_in">this</span>); <span class="comment">//拉取消息的实现</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.rebalanceService = <span class="keyword">new</span> <span class="title class_">RebalanceService</span>(<span class="built_in">this</span>);  <span class="comment">//负载均衡的实现，可能有相关的机器增加删除，需要定期的进行重负载操作</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.defaultMQProducer = <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(MixAll.CLIENT_INNER_PRODUCER_GROUP); </span><br><span class="line">       <span class="built_in">this</span>.defaultMQProducer.resetClientConfig(clientConfig);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.consumerStatsManager = <span class="keyword">new</span> <span class="title class_">ConsumerStatsManager</span>(<span class="built_in">this</span>.scheduledExecutorService); <span class="comment">//消费端的状态管理</span></span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;Created a new client Instance, InstanceIndex:&#123;&#125;, ClientID:&#123;&#125;, ClientConfig:&#123;&#125;, ClientVersion:&#123;&#125;, SerializerType:&#123;&#125;&quot;</span>,</span><br><span class="line">           <span class="built_in">this</span>.instanceIndex,</span><br><span class="line">           <span class="built_in">this</span>.clientId,</span><br><span class="line">           <span class="built_in">this</span>.clientConfig,</span><br><span class="line">           MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION), RemotingCommand.getSerializeTypeConfigInThisServer());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续跟进去网络通信的构造方法 <b>org.apache.rocketmq.client.impl.MQClientAPIImpl.MQClientAPIImpl(NettyClientConfig, ClientRemotingProcessor, RPCHook, ClientConfig)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端网络通信</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MQClientAPIImpl</span><span class="params">(<span class="keyword">final</span> NettyClientConfig nettyClientConfig,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> ClientRemotingProcessor clientRemotingProcessor,</span></span><br><span class="line"><span class="params">       RPCHook rpcHook, <span class="keyword">final</span> ClientConfig clientConfig)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.clientConfig = clientConfig; <span class="comment">//核心的配置</span></span><br><span class="line">       topAddressing = <span class="keyword">new</span> <span class="title class_">TopAddressing</span>(MixAll.getWSAddr(), clientConfig.getUnitName()); <span class="comment">//该功能主要是判断如果namesrv为空，则从约定的服务上去拉取</span></span><br><span class="line">       <span class="built_in">this</span>.remotingClient = <span class="keyword">new</span> <span class="title class_">NettyRemotingClient</span>(nettyClientConfig, <span class="literal">null</span>); <span class="comment">//通信客户端的核心实现，底层基于netty的链接</span></span><br><span class="line">       <span class="built_in">this</span>.clientRemotingProcessor = clientRemotingProcessor; <span class="comment">//请求事件封装处理</span></span><br><span class="line">       <span class="comment">//注册rpc调用的钩子方法，并将事件处理绑定到上层传递过来的事件处理封装类上</span></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerRPCHook(rpcHook);</span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.CHECK_TRANSACTION_STATE, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>); </span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.NOTIFY_CONSUMER_IDS_CHANGED, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.RESET_CONSUMER_CLIENT_OFFSET, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.GET_CONSUMER_STATUS_FROM_CLIENT, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.GET_CONSUMER_RUNNING_INFO, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingClient.registerProcessor(RequestCode.CONSUME_MESSAGE_DIRECTLY, <span class="built_in">this</span>.clientRemotingProcessor, <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至此，初始化配置的操作已经完成。接下来，就是继续调用mqClientFactory.start()方法，<b>org.apache.rocketmq.client.impl.factory.MQClientInstance.start()</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">           <span class="keyword">switch</span> (<span class="built_in">this</span>.serviceState) &#123;</span><br><span class="line">               <span class="keyword">case</span> CREATE_JUST:</span><br><span class="line">                   <span class="built_in">this</span>.serviceState = ServiceState.START_FAILED;</span><br><span class="line">                   <span class="comment">// If not specified,looking address from name server</span></span><br><span class="line">                   <span class="keyword">if</span> (<span class="literal">null</span> == <span class="built_in">this</span>.clientConfig.getNamesrvAddr()) &#123;</span><br><span class="line">                       <span class="built_in">this</span>.mQClientAPIImpl.fetchNameServerAddr();</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// Start request-response channel</span></span><br><span class="line">                   <span class="built_in">this</span>.mQClientAPIImpl.start(); <span class="comment">//启动netty的客户端配置</span></span><br><span class="line">                   <span class="comment">// Start various schedule tasks</span></span><br><span class="line">                   <span class="built_in">this</span>.startScheduledTask();  <span class="comment">//启动定时任务，定时进行更新、验证、发送心跳等操作</span></span><br><span class="line">                   <span class="comment">// Start pull service</span></span><br><span class="line">                   <span class="built_in">this</span>.pullMessageService.start();  <span class="comment">//拉取消息消费</span></span><br><span class="line">                   <span class="comment">// Start rebalance service</span></span><br><span class="line">                   <span class="built_in">this</span>.rebalanceService.start();  <span class="comment">// 设置消费端重新负载，请求的初始化操作也在此方法内执行</span></span><br><span class="line">                   <span class="comment">// Start push service</span></span><br><span class="line">                   <span class="built_in">this</span>.defaultMQProducer.getDefaultMQProducerImpl().start(<span class="literal">false</span>);  <span class="comment">// 推送消息消费，这里入参为false，是因为前面已经初始化过了，只需要初始化其它操作</span></span><br><span class="line">                   log.info(<span class="string">&quot;the client factory [&#123;&#125;] start OK&quot;</span>, <span class="built_in">this</span>.clientId);</span><br><span class="line">                   <span class="built_in">this</span>.serviceState = ServiceState.RUNNING;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> RUNNING:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> SHUTDOWN_ALREADY:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> START_FAILED:</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;The Factory object[&quot;</span> + <span class="built_in">this</span>.getClientId() + <span class="string">&quot;] has been created before, and failed.&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上，就是producer（消息发送端）的启动操作过程。接下来，就是重头——消息发送过程。</p><h1 id="RocketMQ消息发送流程剖析"><a href="#RocketMQ消息发送流程剖析" class="headerlink" title="RocketMQ消息发送流程剖析"></a>RocketMQ消息发送流程剖析</h1><p>Broker在启动后会周期性地向NameSrv注册自身及Topic路由信息，而生产者Producer同样会周期性地从NameSrv上拉取最新更新至本地的Topic路由信息。当Producer要开始发送某一Topic的消息时，便会从本地的路由表中找到Topic对应的路由，选择Topic下合适的Broker来发送消息。RocketMQ中，Topic底下包含若干个队列（Queue），也就是说，Topic对Queue是一对多的关系。每个Queue都记录了自己所属的Broker，对于同一个Topic而言，它的多个Queue可能指向同一个Broker。</p><p>如上文所述，Producer根据消息的Topic，选出对应的路由信息（TopicRouteData），再挑选出具体某个MessageQueue，将消息发送至MessageQueue对应的Broker。</p><p><img src="/images/post-RocketMQ-Producer-Send-Message/20190530051014.png"></p><p>假设TopicX上有4个Queue（queue1，queue2，queue3，queue4），那么Producer发送TopicX的消息时，会将消息平均发送到每个Queue，从而发送到每个Queue对应的Broker，至于Broker这边，仅Master节点才能接收Producer发来的消息并写入到本地存储，如果有Slave，则会再从Master同步至Slave。</p><p>接下来是发送消息的源码分析环节。</p><h1 id="消息发送的流程解析"><a href="#消息发送的流程解析" class="headerlink" title="消息发送的流程解析"></a>消息发送的流程解析</h1><p>消息发送的主要步骤包括：验证消息、查找路由、消息发送（包含异常处理机制）。</p><p>直接来看发送消息的默认实现，<b>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(Message, CommunicationMode, SendCallback, long)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SendResult <span class="title function_">sendDefaultImpl</span><span class="params">(</span></span><br><span class="line"><span class="params">       Message msg,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> CommunicationMode communicationMode,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> SendCallback sendCallback,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">long</span> timeout</span></span><br><span class="line"><span class="params">   )</span> <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">       <span class="built_in">this</span>.makeSureStateOK();</span><br><span class="line">       Validators.checkMessage(msg, <span class="built_in">this</span>.defaultMQProducer);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="type">long</span> <span class="variable">invokeID</span> <span class="operator">=</span> random.nextLong();</span><br><span class="line">       <span class="type">long</span> <span class="variable">beginTimestampFirst</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="type">long</span> <span class="variable">beginTimestampPrev</span> <span class="operator">=</span> beginTimestampFirst;</span><br><span class="line">       <span class="type">long</span> <span class="variable">endTimestamp</span> <span class="operator">=</span> beginTimestampFirst;</span><br><span class="line">       <span class="type">TopicPublishInfo</span> <span class="variable">topicPublishInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.tryToFindTopicPublishInfo(msg.getTopic());</span><br><span class="line">       <span class="keyword">if</span> (topicPublishInfo != <span class="literal">null</span> &amp;&amp; topicPublishInfo.ok()) &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">callTimeout</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">timesTotal</span> <span class="operator">=</span> communicationMode == CommunicationMode.SYNC ? <span class="number">1</span> + <span class="built_in">this</span>.defaultMQProducer.getRetryTimesWhenSendFailed() : <span class="number">1</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           String[] brokersSent = <span class="keyword">new</span> <span class="title class_">String</span>[timesTotal];</span><br><span class="line">           <span class="keyword">for</span> (; times &lt; timesTotal; times++) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">lastBrokerName</span> <span class="operator">=</span> <span class="literal">null</span> == mq ? <span class="literal">null</span> : mq.getBrokerName();</span><br><span class="line">               <span class="type">MessageQueue</span> <span class="variable">mqSelected</span> <span class="operator">=</span> <span class="built_in">this</span>.selectOneMessageQueue(topicPublishInfo, lastBrokerName);</span><br><span class="line">               <span class="keyword">if</span> (mqSelected != <span class="literal">null</span>) &#123;</span><br><span class="line">                   mq = mqSelected;</span><br><span class="line">                   brokersSent[times] = mq.getBrokerName();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       beginTimestampPrev = System.currentTimeMillis();</span><br><span class="line">                       <span class="keyword">if</span> (times &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="comment">//Reset topic with namespace during resend.</span></span><br><span class="line">                           msg.setTopic(<span class="built_in">this</span>.defaultMQProducer.withNamespace(msg.getTopic()));</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> beginTimestampPrev - beginTimestampFirst;</span><br><span class="line">                       <span class="keyword">if</span> (timeout &lt; costTime) &#123;</span><br><span class="line">                           callTimeout = <span class="literal">true</span>;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       sendResult = <span class="built_in">this</span>.sendKernelImpl(msg, mq, communicationMode, sendCallback, topicPublishInfo, timeout - costTime);</span><br><span class="line">                       endTimestamp = System.currentTimeMillis();</span><br><span class="line">                       <span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">false</span>);</span><br><span class="line">                       <span class="keyword">switch</span> (communicationMode) &#123;</span><br><span class="line">                           <span class="keyword">case</span> ASYNC:</span><br><span class="line">                               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                           <span class="keyword">case</span> ONEWAY:</span><br><span class="line">                               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                           <span class="keyword">case</span> SYNC:</span><br><span class="line">                               <span class="keyword">if</span> (sendResult.getSendStatus() != SendStatus.SEND_OK) &#123;</span><br><span class="line">                                   <span class="keyword">if</span> (<span class="built_in">this</span>.defaultMQProducer.isRetryAnotherBrokerWhenNotStoreOK()) &#123;</span><br><span class="line">                                       <span class="keyword">continue</span>;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               <span class="keyword">return</span> sendResult;</span><br><span class="line">                           <span class="keyword">default</span>:</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">                       endTimestamp = System.currentTimeMillis();</span><br><span class="line">                       <span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">true</span>);</span><br><span class="line">                       log.warn(String.format(<span class="string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span>, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                       log.warn(msg.toString());</span><br><span class="line">                       exception = e;</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">                       endTimestamp = System.currentTimeMillis();</span><br><span class="line">                       <span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">true</span>);</span><br><span class="line">                       log.warn(String.format(<span class="string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span>, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                       log.warn(msg.toString());</span><br><span class="line">                       exception = e;</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (MQBrokerException e) &#123;</span><br><span class="line">                       endTimestamp = System.currentTimeMillis();</span><br><span class="line">                       <span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">true</span>);</span><br><span class="line">                       log.warn(String.format(<span class="string">&quot;sendKernelImpl exception, resend at once, InvokeID: %s, RT: %sms, Broker: %s&quot;</span>, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                       log.warn(msg.toString());</span><br><span class="line">                       exception = e;</span><br><span class="line">                       <span class="keyword">switch</span> (e.getResponseCode()) &#123;</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.TOPIC_NOT_EXIST:</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.SERVICE_NOT_AVAILABLE:</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.SYSTEM_ERROR:</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.NO_PERMISSION:</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.NO_BUYER_ID:</span><br><span class="line">                           <span class="keyword">case</span> ResponseCode.NOT_IN_CURRENT_UNIT:</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           <span class="keyword">default</span>:</span><br><span class="line">                               <span class="keyword">if</span> (sendResult != <span class="literal">null</span>) &#123;</span><br><span class="line">                                   <span class="keyword">return</span> sendResult;</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               <span class="keyword">throw</span> e;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       endTimestamp = System.currentTimeMillis();</span><br><span class="line">                       <span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">false</span>);</span><br><span class="line">                       log.warn(String.format(<span class="string">&quot;sendKernelImpl exception, throw exception, InvokeID: %s, RT: %sms, Broker: %s&quot;</span>, invokeID, endTimestamp - beginTimestampPrev, mq), e);</span><br><span class="line">                       log.warn(msg.toString());</span><br><span class="line"></span><br><span class="line">                       log.warn(<span class="string">&quot;sendKernelImpl exception&quot;</span>, e);</span><br><span class="line">                       log.warn(msg.toString());</span><br><span class="line">                       <span class="keyword">throw</span> e;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (sendResult != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> sendResult;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;Send [%d] times, still failed, cost [%d]ms, Topic: %s, BrokersSent: %s&quot;</span>,</span><br><span class="line">               times,</span><br><span class="line">               System.currentTimeMillis() - beginTimestampFirst,</span><br><span class="line">               msg.getTopic(),</span><br><span class="line">               Arrays.toString(brokersSent));</span><br><span class="line"></span><br><span class="line">           info += FAQUrl.suggestTodo(FAQUrl.SEND_MSG_FAILED);</span><br><span class="line"></span><br><span class="line">           <span class="type">MQClientException</span> <span class="variable">mqClientException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(info, exception);</span><br><span class="line">           <span class="keyword">if</span> (callTimeout) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingTooMuchRequestException</span>(<span class="string">&quot;sendDefaultImpl call timeout&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> MQBrokerException) &#123;</span><br><span class="line">               mqClientException.setResponseCode(((MQBrokerException) exception).getResponseCode());</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RemotingConnectException) &#123;</span><br><span class="line">               mqClientException.setResponseCode(ClientErrorCode.CONNECT_BROKER_EXCEPTION);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RemotingTimeoutException) &#123;</span><br><span class="line">               mqClientException.setResponseCode(ClientErrorCode.ACCESS_BROKER_TIMEOUT);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> MQClientException) &#123;</span><br><span class="line">               mqClientException.setResponseCode(ClientErrorCode.BROKER_NOT_EXIST_EXCEPTION);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">throw</span> mqClientException;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       List&lt;String&gt; nsList = <span class="built_in">this</span>.getmQClientFactory().getMQClientAPIImpl().getNameServerAddressList();</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == nsList || nsList.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(</span><br><span class="line">               <span class="string">&quot;No name server address, please set it.&quot;</span> + FAQUrl.suggestTodo(FAQUrl.NAME_SERVER_ADDR_NOT_EXIST_URL), <span class="literal">null</span>).setResponseCode(ClientErrorCode.NO_NAME_SERVER_EXCEPTION);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(<span class="string">&quot;No route info of this topic, &quot;</span> + msg.getTopic() + FAQUrl.suggestTodo(FAQUrl.NO_TOPIC_ROUTE_INFO),</span><br><span class="line">           <span class="literal">null</span>).setResponseCode(ClientErrorCode.NOT_FOUND_TOPIC_EXCEPTION);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于这个方法逻辑比较多，接下来我们分拆成几个部分来分析。</p><h2 id="验证消息"><a href="#验证消息" class="headerlink" title="验证消息"></a>验证消息</h2><p>第一步，消息发送之前，首先确保生产者处于运行状态，这里调了 this.makeSureStateOK()，然后便是验证消息 <b>Validators.checkMessage(msg, this.defaultMQProducer)</b>，点进去<b>org.apache.rocketmq.client.Validators.checkMessage(Message, DefaultMQProducer)</b>会看到是验证消息是否符合相应的规范，包括具体的规范要求包括：Topic名称，消息体不能为空，消息长度不能等于0且默认不能超过允许发送消息的最大长度4M（maxMessageSize &#x3D; 1024 * 1024 * 4）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkMessage</span><span class="params">(Message msg, DefaultMQProducer defaultMQProducer)</span></span><br><span class="line">       <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == msg) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(ResponseCode.MESSAGE_ILLEGAL, <span class="string">&quot;the message is null&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// topic</span></span><br><span class="line">       Validators.checkTopic(msg.getTopic());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// body</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == msg.getBody()) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(ResponseCode.MESSAGE_ILLEGAL, <span class="string">&quot;the message body is null&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="number">0</span> == msg.getBody().length) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(ResponseCode.MESSAGE_ILLEGAL, <span class="string">&quot;the message body length is zero&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (msg.getBody().length &gt; defaultMQProducer.getMaxMessageSize()) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MQClientException</span>(ResponseCode.MESSAGE_ILLEGAL,</span><br><span class="line">               <span class="string">&quot;the message body size over max value, MAX: &quot;</span> + defaultMQProducer.getMaxMessageSize());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="查找路由"><a href="#查找路由" class="headerlink" title="查找路由"></a>查找路由</h2><p>第二步，查找Topic对应的路由信息（留意方法体的代码注释）。</p><p><b>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.tryToFindTopicPublishInfo(String)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TopicPublishInfo <span class="title function_">tryToFindTopicPublishInfo</span><span class="params">(<span class="keyword">final</span> String topic)</span> &#123;</span><br><span class="line"><span class="comment">// 查本地缓存的表</span></span><br><span class="line">       <span class="type">TopicPublishInfo</span> <span class="variable">topicPublishInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.topicPublishInfoTable.get(topic);</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == topicPublishInfo || !topicPublishInfo.ok()) &#123; <span class="comment">// 本地缓存中没有，则向NameSrv发起请求，并更新本地路由缓存</span></span><br><span class="line">           <span class="built_in">this</span>.topicPublishInfoTable.putIfAbsent(topic, <span class="keyword">new</span> <span class="title class_">TopicPublishInfo</span>());</span><br><span class="line">           <span class="built_in">this</span>.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);</span><br><span class="line">           topicPublishInfo = <span class="built_in">this</span>.topicPublishInfoTable.get(topic);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果从NameSrv上查找到了，此处便直接返回找到的路由信息topicPublishInfo</span></span><br><span class="line">       <span class="keyword">if</span> (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) &#123; </span><br><span class="line">           <span class="keyword">return</span> topicPublishInfo;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有查找到，再次查询topic路由</span></span><br><span class="line">           <span class="built_in">this</span>.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, <span class="literal">true</span>, <span class="built_in">this</span>.defaultMQProducer); </span><br><span class="line">           topicPublishInfo = <span class="built_in">this</span>.topicPublishInfoTable.get(topic);</span><br><span class="line">           <span class="keyword">return</span> topicPublishInfo;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里有点吊诡的是，为什么在前面从NameSrv查不到路由信息，第二次就再来查一次，难道再试一次就能查到吗？带着疑问，跟进去<b>org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(String, boolean, DefaultMQProducer)</b>方法体里边一探究竟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateTopicRouteInfoFromNameServer</span><span class="params">(<span class="keyword">final</span> String topic, <span class="type">boolean</span> isDefault,</span></span><br><span class="line"><span class="params">       DefaultMQProducer defaultMQProducer)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.lockNamesrv.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   TopicRouteData topicRouteData;</span><br><span class="line">                   <span class="keyword">if</span> (isDefault &amp;&amp; defaultMQProducer != <span class="literal">null</span>) &#123;</span><br><span class="line">                       topicRouteData = <span class="built_in">this</span>.mQClientAPIImpl.getDefaultTopicRouteInfoFromNameServer(defaultMQProducer.getCreateTopicKey(),</span><br><span class="line">                           <span class="number">1000</span> * <span class="number">3</span>);</span><br><span class="line">                       <span class="keyword">if</span> (topicRouteData != <span class="literal">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">for</span> (QueueData data : topicRouteData.getQueueDatas()) &#123;</span><br><span class="line">                               <span class="type">int</span> <span class="variable">queueNums</span> <span class="operator">=</span> Math.min(defaultMQProducer.getDefaultTopicQueueNums(), data.getReadQueueNums());</span><br><span class="line">                               data.setReadQueueNums(queueNums);</span><br><span class="line">                               data.setWriteQueueNums(queueNums);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       topicRouteData = <span class="built_in">this</span>.mQClientAPIImpl.getTopicRouteInfoFromNameServer(topic, <span class="number">1000</span> * <span class="number">3</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这次调用 <b>updateTopicRouteInfoFromNameServer(…)</b>，传入的 isDefault 参数为 true，也就是说，会走 if 分支，这里是调 <b>this.mQClientAPIImpl.getDefaultTopicRouteInfoFromNameServer(defaultMQProducer.getCreateTopicKey(), 1000 * 3)</b> 从NameSrv查询Topic路由，不过这回不是查询消息所属的Topic路由信息，而是查询RocketMQ设置的一个默认Topic的路由，进去 defaultMQProducer.getCreateTopicKey() 看到 这个默认的 Topic 是 <b style="color:orange">TBW102</b> （AUTO_CREATE_TOPIC_KEY_TOPIC &#x3D; “TBW102”），这个Topic就是用来创建其他Topic所用的。如果某Broker配置了 autoCreateTopicEnable，允许自动创建Topic，那么在该Broker启动后，便会向自己的路由表中插入 <b style="color:orange">TBW102</b> 这个Topic，并注册到NameSrv，表明处理该Topic类型的消息。 如果默认Topic下查询到路由信息，则替换路由信息中读写队列个数为消息生产者默认的队列个数（defaultTopicQueueNums ）。如果isDefault 为false ，则使用参数topic 去查询；如果未查询到路由信息，则返回false ，表示路由信息未变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line"><span class="comment">// 如果路由信息找到，与本地缓存中的路由信息进行对比，判断路由信息是否发生了改变， 如果未发生变化，则直接返回chaged=false</span></span><br><span class="line"><span class="keyword">if</span> (topicRouteData != <span class="literal">null</span>) &#123; </span><br><span class="line"><span class="type">TopicRouteData</span> <span class="variable">old</span> <span class="operator">=</span> <span class="built_in">this</span>.topicRouteTable.get(topic);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> topicRouteDataIsChange(old, topicRouteData);</span><br><span class="line"><span class="keyword">if</span> (!changed) &#123;</span><br><span class="line">changed = <span class="built_in">this</span>.isNeedUpdateTopicRouteInfo(topic);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;the topic[&#123;&#125;] route info changed, old[&#123;&#125;] ,new[&#123;&#125;]&quot;</span>, topic, old, topicRouteData);</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后，更新MQClientInstance Broker地址缓存（路由信息转化为PublishInfo）以及更新该MQClientInstance所管辖的所有消息发送关于该topic的路由信息（路由信息转化为MessageQueue列表，此具体实现在 <b>topicRouteData2TopicSubscribeInfo(…)</b> 方法，再根据MessageQueue列表进行更新）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update Pub info</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">TopicPublishInfo</span> <span class="variable">publishInfo</span> <span class="operator">=</span> topicRouteData2TopicPublishInfo(topic, topicRouteData);</span><br><span class="line">publishInfo.setHaveTopicRouterInfo(<span class="literal">true</span>);</span><br><span class="line">Iterator&lt;Entry&lt;String, MQProducerInner&gt;&gt; it = <span class="built_in">this</span>.producerTable.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, MQProducerInner&gt; entry = it.next();</span><br><span class="line"><span class="type">MQProducerInner</span> <span class="variable">impl</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (impl != <span class="literal">null</span>) &#123;</span><br><span class="line">impl.updateTopicPublishInfo(topic, publishInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update sub info</span></span><br><span class="line">&#123;</span><br><span class="line">Set&lt;MessageQueue&gt; subscribeInfo = topicRouteData2TopicSubscribeInfo(topic, topicRouteData);</span><br><span class="line">Iterator&lt;Entry&lt;String, MQConsumerInner&gt;&gt; it = <span class="built_in">this</span>.consumerTable.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, MQConsumerInner&gt; entry = it.next();</span><br><span class="line"><span class="type">MQConsumerInner</span> <span class="variable">impl</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (impl != <span class="literal">null</span>) &#123;</span><br><span class="line">impl.updateTopicSubscribeInfo(topic, subscribeInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>org.apache.rocketmq.client.impl.factory.MQClientInstance.topicRouteData2TopicSubscribeInfo(String, TopicRouteData)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 循环遍历路由信息的QueueData 信息，如果队列没有写权限，则继续遍历下一个QueueData ；根据brokerName 找到brokerData 信息，</span></span><br><span class="line"><span class="comment">* 找不到或没有找到Master节点（仅Master节点Broker才提供写消息服务），则遍历下一个QueueData ；</span></span><br><span class="line"><span class="comment">* 根据写队列个数，根据topic＋序号创建MessageQueue ，填充topicPublishlnfo 的List&lt;QuueMessage＞ 。完成消息发送的路由查找。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;MessageQueue&gt; <span class="title function_">topicRouteData2TopicSubscribeInfo</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> TopicRouteData route)</span> &#123;</span><br><span class="line">       Set&lt;MessageQueue&gt; mqList = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;MessageQueue&gt;();</span><br><span class="line">       List&lt;QueueData&gt; qds = route.getQueueDatas();</span><br><span class="line">       <span class="keyword">for</span> (QueueData qd : qds) &#123;</span><br><span class="line">           <span class="keyword">if</span> (PermName.isReadable(qd.getPerm())) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; qd.getReadQueueNums(); i++) &#123;</span><br><span class="line">                   <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageQueue</span>(topic, qd.getBrokerName(), i);</span><br><span class="line">                   mqList.add(mq);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> mqList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>所以，当消息所属的Topic，假设叫Topic X吧，它本身没有在任何Broker上配置的时候，生产者就会查询默认Topic <b style="color:orange">TBW102</b>的路由信息，暂时作为Topic X的的路由，并插入到本地路由表中。当TopicX利用该路由发送到 Broker后，Broker发现自己并没有该Topic信息后，便会创建好该Topic，并更新到NameSrv中，表明后续接收TopicX的消息。</p><p>整理一下获取Topic路由的步骤：<br>1.先从本地缓存的路由表中查询；<br>2.没有找到的话，便向NameSrv发起请求，更新本地路由表，再次查询；<br>3.如果仍然没有查询到，表明Topic没有事先配置，则用Topic <b style="color:orange">TBW102</b>向NameSrv发起查询，返回<b style="color:orange">TBW102</b>的路由信息，暂时作为Topic的路由。</p><p>查找路由的过程解析到此，接下来是选择消息队列的过程。</p><h2 id="发送消息队列"><a href="#发送消息队列" class="headerlink" title="发送消息队列"></a>发送消息队列</h2><p>我们此处所谓发送消息，其实是发送到Queue里的，RocketMQ里边的Queue是个抽象的概念，并不是我们所理解的数据结构里的队列Queue，上文已经提到，每个Topic的路由信息（topicRouteData）中可能包含若干Queue，而topicRouteData是由元数据管理中心NameSrv返回的。也就是说，Producer是从NameSrv拉取的路由信息为TopicRouteData，我们不妨先来看下它的属性：</p><p><img src="/images/post-RocketMQ-Producer-Send-Message/20190530055026.png"></p><p>queueDatas 中包含了Topic对应的所有Queue信息，QueueData的结构如下：</p><p><img src="/images/post-RocketMQ-Producer-Send-Message/20190530055138.png"></p><h3 id="选择队列"><a href="#选择队列" class="headerlink" title="选择队列"></a>选择队列</h3><p>接下来，回到 sendDefaultImpl() 方法，看一下拿到路由信息后的下一步，选择队列的过程实现，其中选择队列的逻辑加上了 <b style="color:orange">超时机制</b> 和 <b style="color:orange">重试机制</b>。当选择某个Queue发送消息失败后，只要还没超时，且没有超出最大重试次数，就是再次尝试选择某个Queue进行重试。</p><p>看回 <b>org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl(Message, CommunicationMode, SendCallback, long)</b> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重试次数内进行重试            </span></span><br><span class="line"><span class="keyword">for</span> (; times &lt; timesTotal; times++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">lastBrokerName</span> <span class="operator">=</span> <span class="literal">null</span> == mq ? <span class="literal">null</span> : mq.getBrokerName();</span><br><span class="line"><span class="type">MessageQueue</span> <span class="variable">mqSelected</span> <span class="operator">=</span> <span class="built_in">this</span>.selectOneMessageQueue(topicPublishInfo, lastBrokerName); <span class="comment">// 选择某个Queue 用来发送消息</span></span><br><span class="line"><span class="keyword">if</span> (mqSelected != <span class="literal">null</span>) &#123;</span><br><span class="line">mq = mqSelected;</span><br><span class="line">brokersSent[times] = mq.getBrokerName();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beginTimestampPrev = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">if</span> (times &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//Reset topic with namespace during resend.</span></span><br><span class="line">msg.setTopic(<span class="built_in">this</span>.defaultMQProducer.withNamespace(msg.getTopic()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> beginTimestampPrev - beginTimestampFirst;</span><br><span class="line"><span class="keyword">if</span> (timeout &lt; costTime) &#123; <span class="comment">// 在超时时间内进行重试</span></span><br><span class="line">callTimeout = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进行消息发送的核心实现</span></span><br><span class="line">sendResult = <span class="built_in">this</span>.sendKernelImpl(msg, mq, communicationMode, sendCallback, topicPublishInfo, timeout - costTime);</span><br><span class="line">endTimestamp = System.currentTimeMillis();</span><br><span class="line"><span class="built_in">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">switch</span> (communicationMode) &#123; <span class="comment">// 三种不同的发送方式，相应的处理：除了同步需要重试另一个Broker以确保返回结果，其它直接返回null</span></span><br><span class="line"><span class="keyword">case</span> ASYNC:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">case</span> ONEWAY:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">case</span> SYNC:</span><br><span class="line"><span class="keyword">if</span> (sendResult.getSendStatus() != SendStatus.SEND_OK) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.defaultMQProducer.isRetryAnotherBrokerWhenNotStoreOK()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sendResult;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 以下是各种catch异常，此处省略这部分的代码</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MessageQueue <span class="title function_">selectOneMessageQueue</span><span class="params">(<span class="keyword">final</span> TopicPublishInfo tpInfo, <span class="keyword">final</span> String lastBrokerName)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.sendLatencyFaultEnable) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> tpInfo.getSendWhichQueue().getAndIncrement();</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tpInfo.getMessageQueueList().size(); i++) &#123;</span><br><span class="line">                   <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> Math.abs(index++) % tpInfo.getMessageQueueList().size();</span><br><span class="line">                   <span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">                       pos = <span class="number">0</span>;</span><br><span class="line">                   <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> tpInfo.getMessageQueueList().get(pos);</span><br><span class="line">                   <span class="keyword">if</span> (latencyFaultTolerance.isAvailable(mq.getBrokerName())) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (<span class="literal">null</span> == lastBrokerName || mq.getBrokerName().equals(lastBrokerName))</span><br><span class="line">                           <span class="keyword">return</span> mq;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">final</span> <span class="type">String</span> <span class="variable">notBestBroker</span> <span class="operator">=</span> latencyFaultTolerance.pickOneAtLeast();</span><br><span class="line">               <span class="type">int</span> <span class="variable">writeQueueNums</span> <span class="operator">=</span> tpInfo.getQueueIdByBroker(notBestBroker);</span><br><span class="line">               <span class="keyword">if</span> (writeQueueNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> tpInfo.selectOneMessageQueue();</span><br><span class="line">                   <span class="keyword">if</span> (notBestBroker != <span class="literal">null</span>) &#123;</span><br><span class="line">                       mq.setBrokerName(notBestBroker);</span><br><span class="line">                       mq.setQueueId(tpInfo.getSendWhichQueue().getAndIncrement() % writeQueueNums);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> mq;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   latencyFaultTolerance.remove(notBestBroker);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               log.error(<span class="string">&quot;Error occurred when selecting message queue&quot;</span>, e);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> tpInfo.selectOneMessageQueue();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> tpInfo.selectOneMessageQueue(lastBrokerName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由上面代码可知，选择Queue的具体逻辑在topicPublishInfo.selectOneMessageQueue（lastBrokerName）中。这里在调用时传入了lastBrokerName，目前我们还不知道是为了什么，所以带着疑惑进入方法内部看看吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MessageQueue <span class="title function_">selectOneMessageQueue</span><span class="params">(<span class="keyword">final</span> String lastBrokerName)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (lastBrokerName == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> selectOneMessageQueue();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="built_in">this</span>.sendWhichQueue.getAndIncrement();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.messageQueueList.size(); i++) &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> Math.abs(index++) % <span class="built_in">this</span>.messageQueueList.size();</span><br><span class="line">               <span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">                   pos = <span class="number">0</span>;</span><br><span class="line">               <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> <span class="built_in">this</span>.messageQueueList.get(pos);</span><br><span class="line">               <span class="keyword">if</span> (!mq.getBrokerName().equals(lastBrokerName)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> mq;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> selectOneMessageQueue();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> MessageQueue <span class="title function_">selectOneMessageQueue</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="built_in">this</span>.sendWhichQueue.getAndIncrement();</span><br><span class="line">       <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> Math.abs(index) % <span class="built_in">this</span>.messageQueueList.size();</span><br><span class="line">       <span class="keyword">if</span> (pos &lt; <span class="number">0</span>)</span><br><span class="line">           pos = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.messageQueueList.get(pos);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们来分析一下这段逻辑：<br>1.当lastBrokerName不为空时，将计数器进行自增，再遍历TopicPulishInfo中的MessageQueue列表，按照计数器数值对MessageQueue总个数进行取模，再根据取模结果，取出MessageQueue列表中的某个Queue，并判断Queue所属Broker的Name是否和lastBrokerName一致，一致则继续遍历。<br>2.当lastBrokerName为空时，同样将计数器进行自增，按照计数器数值对MessageQueue总个数进行取模，再根据取模结果，取出MessageQueue列表中的某个Queue，直接返回。<br>概括一下，这段逻辑的主要部分就是利用计数器，来进行Queue的负载均衡。而lastBrokerName的作用，就是为了做负载均衡。</p><p>当某条消息第一次发送时，lastBrokerName 为空，此时就是直接取模进行负载均衡操作。但是如果消息发送失败，就会触发重试机制，发送失败有可能是因为Broker出现来某些故障，或者某些网络连通性问题，所以当消息第N次重试时，就要避开第N-1次时消息发往的Broker，也就是lastBrokerName。<br>好了，我们已经了解了选择Queue 的来源及消息发送时Queue的负载均衡以及重试机制。下面让我们来看看消息的核心发送过程。</p><h3 id="发送消息的核心实现"><a href="#发送消息的核心实现" class="headerlink" title="发送消息的核心实现"></a>发送消息的核心实现</h3><p>好了，消息发送的核心，就在于最后一步，网络传输了，我们跟踪到 org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl(Message, MessageQueue, CommunicationMode, SendCallback, TopicPublishInfo, long) 方法里边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">brokerAddr</span> <span class="operator">=</span> <span class="built_in">this</span>.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == brokerAddr) &#123;</span><br><span class="line">tryToFindTopicPublishInfo(mq.getTopic());</span><br><span class="line">brokerAddr = <span class="built_in">this</span>.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到Broker地址后，要将消息内容及其他信息封装进请求头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SendMessageRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendMessageRequestHeader</span>();</span><br><span class="line">requestHeader.setProducerGroup(<span class="built_in">this</span>.defaultMQProducer.getProducerGroup());</span><br><span class="line">requestHeader.setTopic(msg.getTopic());</span><br><span class="line">requestHeader.setDefaultTopic(<span class="built_in">this</span>.defaultMQProducer.getCreateTopicKey());</span><br><span class="line">requestHeader.setDefaultTopicQueueNums(<span class="built_in">this</span>.defaultMQProducer.getDefaultTopicQueueNums());</span><br><span class="line">requestHeader.setQueueId(mq.getQueueId());</span><br><span class="line">requestHeader.setSysFlag(sysFlag);</span><br><span class="line">requestHeader.setBornTimestamp(System.currentTimeMillis());</span><br><span class="line">requestHeader.setFlag(msg.getFlag());</span><br><span class="line">requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class="line">requestHeader.setReconsumeTimes(<span class="number">0</span>);</span><br><span class="line">requestHeader.setUnitMode(<span class="built_in">this</span>.isUnitMode());</span><br><span class="line">requestHeader.setBatch(msg <span class="keyword">instanceof</span> MessageBatch);</span><br></pre></td></tr></table></figure><p>请求头部封装好之后，接下来重点来看 org.apache.rocketmq.client.impl.MQClientAPIImpl.sendMessage(String, String, Message, SendMessageRequestHeader, long, CommunicationMode, SendCallback, TopicPublishInfo, MQClientInstance, int, SendMessageContext, DefaultMQProducerImpl)，这方法内部便是创建网络请求，调用封装的Netty接口进行网络传输了。</p><p>首先创建请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemotingCommand</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (sendSmartMsg || msg <span class="keyword">instanceof</span> MessageBatch) &#123;</span><br><span class="line"><span class="type">SendMessageRequestHeaderV2</span> <span class="variable">requestHeaderV2</span> <span class="operator">=</span> SendMessageRequestHeaderV2.createSendMessageRequestHeaderV2(requestHeader);</span><br><span class="line">request = RemotingCommand.createRequestCommand(msg <span class="keyword">instanceof</span> MessageBatch ? RequestCode.SEND_BATCH_MESSAGE : RequestCode.SEND_MESSAGE_V2, requestHeaderV2);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">request = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, requestHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.setBody(msg.getBody());</span><br></pre></td></tr></table></figure><p>这里按照是否发送 smartMsg ，创建了不同请求命令号的请求，接下来，根据消息发送方式（单向、同步、异步），调用不同的发送函数进行网络传输：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (communicationMode) &#123;</span><br><span class="line"><span class="keyword">case</span> ONEWAY:</span><br><span class="line"><span class="built_in">this</span>.remotingClient.invokeOneway(addr, request, timeoutMillis);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">case</span> ASYNC:</span><br><span class="line"><span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">times</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"><span class="type">long</span> <span class="variable">costTimeAsync</span> <span class="operator">=</span> System.currentTimeMillis() - beginStartTime;</span><br><span class="line"><span class="keyword">if</span> (timeoutMillis &lt; costTimeAsync) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingTooMuchRequestException</span>(<span class="string">&quot;sendMessage call timeout&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.sendMessageAsync(addr, brokerName, msg, timeoutMillis - costTimeAsync, request, sendCallback, topicPublishInfo, instance,</span><br><span class="line">retryTimesWhenSendFailed, times, context, producer);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">case</span> SYNC:</span><br><span class="line"><span class="type">long</span> <span class="variable">costTimeSync</span> <span class="operator">=</span> System.currentTimeMillis() - beginStartTime;</span><br><span class="line"><span class="keyword">if</span> (timeoutMillis &lt; costTimeSync) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingTooMuchRequestException</span>(<span class="string">&quot;sendMessage call timeout&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.sendMessageSync(addr, brokerName, msg, timeoutMillis - costTimeSync, request);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">assert</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，消息的发送——从Producer把消息传输到Broker的过程分析就已经结束了。</p><h1 id="批量消息发送"><a href="#批量消息发送" class="headerlink" title="批量消息发送"></a>批量消息发送</h1><p>批量消息发送是将 同一主题的多条消息一起打包发送到消息服务端，减少网络调用次数，提高网络传输效率。<br>批量消息发送要解决的是如何将这些消息编码以便服务端能够正确解码出每条消息的消息内容 。</p><p>那 RocketMQ 如何编码多条消息呢 ？ 我们首先梳理一下 RocketMQ 网络请求命令设计。 其结构如下<br><img src="/images/post-RocketMQ-Producer-Send-Message/20190530062628.png"></p><p>单条消息发送时 ，消息体的内容将保存在 body 中 。 批量消息发送 ，需要将多条消息体的内容存储在 body 中，如何存储方便服务端正确解析出 每条消息呢？<br>RocketMQ 采取的方式是，对单条消息 内容使用 固定格式进行存储，如下图<br><img src="/images/post-RocketMQ-Producer-Send-Message/20190530062911.png"></p><p>接下来梳理一下批量消息发送的核心流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SendResult <span class="title function_">send</span><span class="params">(</span></span><br><span class="line"><span class="params">    Collection&lt;Message&gt; msgs)</span> <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defaultMQProducerImpl.send(batch(msgs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在消息发送端，调用 batch 方法 ，将一批消息封装成 MessageBatch 对象。 MessageBatch 继承自 Message 对象，Messag巳Batch 内部持有 List&lt;Message&gt; messages。这样的话，批量消息发送与单条消息发送的处理流程完全一样。MessageBatch 只需要将该集合中的每条消息的消息体 body 聚合成一个 byte[]，在消息服务端能够从该 byte[] 中正确解析出消息即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] encode() &#123;</span><br><span class="line">       <span class="keyword">return</span> MessageDecoder.encodeMessages(messages);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在创建 RemotingCommand 对象时将调用 org.apache.rocketmq.common.message.MessageDecoder.encodeMessage(Message) 方法填充到 RemotingCommand 的 body 域中。多条消息编码方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encodeMessage(Message message) &#123;</span><br><span class="line">       <span class="comment">//only need flag, body, properties</span></span><br><span class="line">       <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">       <span class="type">int</span> <span class="variable">bodyLen</span> <span class="operator">=</span> body.length;</span><br><span class="line">       <span class="type">String</span> <span class="variable">properties</span> <span class="operator">=</span> messageProperties2String(message.getProperties());</span><br><span class="line">       <span class="type">byte</span>[] propertiesBytes = properties.getBytes(CHARSET_UTF8);</span><br><span class="line">       <span class="comment">//note properties length must not more than Short.MAX</span></span><br><span class="line">       <span class="type">short</span> <span class="variable">propertiesLength</span> <span class="operator">=</span> (<span class="type">short</span>) propertiesBytes.length;</span><br><span class="line">       <span class="type">int</span> <span class="variable">sysFlag</span> <span class="operator">=</span> message.getFlag();</span><br><span class="line">       <span class="type">int</span> <span class="variable">storeSize</span> <span class="operator">=</span> <span class="number">4</span> <span class="comment">// 1 TOTALSIZE</span></span><br><span class="line">           + <span class="number">4</span> <span class="comment">// 2 MAGICCOD</span></span><br><span class="line">           + <span class="number">4</span> <span class="comment">// 3 BODYCRC</span></span><br><span class="line">           + <span class="number">4</span> <span class="comment">// 4 FLAG</span></span><br><span class="line">           + <span class="number">4</span> + bodyLen <span class="comment">// 4 BODY</span></span><br><span class="line">           + <span class="number">2</span> + propertiesLength;</span><br><span class="line">       <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(storeSize);</span><br><span class="line">       <span class="comment">// 1 TOTALSIZE</span></span><br><span class="line">       byteBuffer.putInt(storeSize);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2 MAGICCODE</span></span><br><span class="line">       byteBuffer.putInt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3 BODYCRC</span></span><br><span class="line">       byteBuffer.putInt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4 FLAG</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> message.getFlag();</span><br><span class="line">       byteBuffer.putInt(flag);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 5 BODY</span></span><br><span class="line">       byteBuffer.putInt(bodyLen);</span><br><span class="line">       byteBuffer.put(body);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 6 properties</span></span><br><span class="line">       byteBuffer.putShort(propertiesLength);</span><br><span class="line">       byteBuffer.put(propertiesBytes);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> byteBuffer.array();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在消息发送端将会按照上述结构进行解码，然后整个发送流程与单个消息发送没什么差异。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>RocketMQ发送消息重点如下：<br>1 ）消息生产者启动流程<br>重点理解 MQClientlnstance、消息生产者之间的关系。<br>2 ）消息队列负载机制<br>消息生产者在发送消息时，如果本地路由表中未缓存 topic 的路由信息，向 NameServer 发送获取路由信息请求，更新本地路由信息表，并且消息生产者每隔 30s 从 NameServer 更新路由表。<br>3 ）消息发送异常机制<br>消息发送高可用主要通过两个手段：重试与 Broker 规避。Broker规避就是在一次消息发送过程中发现错误，在某一时间段内，消息生产者不会选择该 Broker（消息服务器）上的消息队列，提高发送消息的成功率。<br>4 ）批量消息发送<br>RocketMQ支持将同一主题下的多条消息一次性发送到消息服务端。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ NameServer</title>
      <link href="/2019/05/25/RocketMQ-NameServer/"/>
      <url>/2019/05/25/RocketMQ-NameServer/</url>
      
        <content type="html"><![CDATA[<h1 id="路由中心Namesrv设计"><a href="#路由中心Namesrv设计" class="headerlink" title="路由中心Namesrv设计"></a>路由中心Namesrv设计</h1><p>Namesrv就是RocketMQ的路由中心，也就是路由元信息的管理中心。主要作用是为消息生产者（Producer）、消费者（Consumer）提供关于主题（Topic）的路由信息，那么，Namesrv需要存储路由的基础信息，还要能管理Broker节点，包括路由注册、路由删除等功能。Namesrv被设计为RocketMQ统一的路由中心，这也就是为何，Producer与Consumer在启动时，统一需要在Namesrv上面注册，而非Broker。</p><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><p>NameServer路由实现类：org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager。</p><p><img src="/images/post-RocketMQ-NameServer/20190525085014.png"></p><p>主要属性<br>•topicQueueTable: Topic 下的消息队列路由信息，消息发送时根据路由表进行负载均衡。<br>•brokerAddrTable : Broker 基础信息， 包含brokerName 、所属集群名称、主备Broker地址。<br>•clusterAddrTable: Broker 集群信息，存储集群中所有Broker 名称。<br>•brokerLiveTable: Broker 状态信息。NameServer 每次收到心跳包时会替换该信息，这是实现Broker服务更新的关键。<br>•filterServerTable : Broker 上的FilterServer 列表，用于类模式消息过滤，这涉及到消息过滤的功能。</p><h1 id="Namesrv实现类一览"><a href="#Namesrv实现类一览" class="headerlink" title="Namesrv实现类一览"></a>Namesrv实现类一览</h1><p><img src="/images/post-RocketMQ-NameServer/20190525085521.png"><br>包结构不复杂，类数据量也不多，关键的几个类是：<br>•NamesrvStartup：启动类<br>•NamesrvController：核心控制器<br>•RouteInfoManager：路由信息表</p><h1 id="Namesrv启动"><a href="#Namesrv启动" class="headerlink" title="Namesrv启动"></a>Namesrv启动</h1><p>从Namesrv的启动类NamesrvStartup撸起（文中提到代码均基于RocketMQ 4.5.1版本）：<br><b>org.apache.rocketmq.namesrv.NamesrvStartup.main0(String[]) </b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NamesrvController <span class="title function_">main0</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">NamesrvController</span> <span class="variable">controller</span> <span class="operator">=</span> createNamesrvController(args);</span><br><span class="line">start(controller);</span><br><span class="line"><span class="type">String</span> <span class="variable">tip</span> <span class="operator">=</span> <span class="string">&quot;The Name Server boot success. serializeType=&quot;</span> + RemotingCommand.getSerializeTypeConfigInThisServer();</span><br><span class="line">log.info(tip);</span><br><span class="line">System.out.printf(<span class="string">&quot;%s%n&quot;</span>, tip);</span><br><span class="line"><span class="keyword">return</span> controller;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.exit(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个NameServer的服务启动流程代码都在这个main0(String[] args)方法里了，咋一看，还是比较简单的，大体流程分三步：</p><ol><li>创建NamesrvController对象，</li><li>启动NamesrvController，</li><li>记log并返回NamesrvController对象。步骤三就很简单了，一目了然，那么接下来分析步骤一及步骤二。</li></ol><h2 id="创建NamesrvController对象"><a href="#创建NamesrvController对象" class="headerlink" title="创建NamesrvController对象"></a>创建NamesrvController对象</h2><p>完整代码：<br><b>org.apache.rocketmq.namesrv.NamesrvStartup.createNamesrvController(String[])</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NamesrvController <span class="title function_">createNamesrvController</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, JoranException &#123;</span><br><span class="line">       System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line">       <span class="comment">//PackageConflictDetect.detectFastjson();</span></span><br><span class="line"></span><br><span class="line">       <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> ServerUtil.buildCommandlineOptions(<span class="keyword">new</span> <span class="title class_">Options</span>());</span><br><span class="line">       commandLine = ServerUtil.parseCmdLine(<span class="string">&quot;mqnamesrv&quot;</span>, args, buildCommandlineOptions(options), <span class="keyword">new</span> <span class="title class_">PosixParser</span>());</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == commandLine) &#123;</span><br><span class="line">           System.exit(-<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="type">NamesrvConfig</span> <span class="variable">namesrvConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvConfig</span>();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">NettyServerConfig</span> <span class="variable">nettyServerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyServerConfig</span>();</span><br><span class="line">       nettyServerConfig.setListenPort(<span class="number">9876</span>);</span><br><span class="line">       <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;c&#x27;</span>)) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> commandLine.getOptionValue(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">           <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">               properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">               properties.load(in);</span><br><span class="line">               MixAll.properties2Object(properties, namesrvConfig);</span><br><span class="line">               MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">               namesrvConfig.setConfigStorePath(file);</span><br><span class="line"></span><br><span class="line">               System.out.printf(<span class="string">&quot;load config properties file OK, %s%n&quot;</span>, file);</span><br><span class="line">               in.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;p&#x27;</span>)) &#123;</span><br><span class="line">           <span class="type">InternalLogger</span> <span class="variable">console</span> <span class="operator">=</span> InternalLoggerFactory.getLogger(LoggerName.NAMESRV_CONSOLE_NAME);</span><br><span class="line">           MixAll.printObjectProperties(console, namesrvConfig);</span><br><span class="line">           MixAll.printObjectProperties(console, nettyServerConfig);</span><br><span class="line">           System.exit(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), namesrvConfig);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == namesrvConfig.getRocketmqHome()) &#123;</span><br><span class="line">           System.out.printf(<span class="string">&quot;Please set the %s variable in your environment to match the location of the RocketMQ installation%n&quot;</span>, MixAll.ROCKETMQ_HOME_ENV);</span><br><span class="line">           System.exit(-<span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">LoggerContext</span> <span class="variable">lc</span> <span class="operator">=</span> (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">       <span class="type">JoranConfigurator</span> <span class="variable">configurator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JoranConfigurator</span>();</span><br><span class="line">       configurator.setContext(lc);</span><br><span class="line">       lc.reset();</span><br><span class="line">       configurator.doConfigure(namesrvConfig.getRocketmqHome() + <span class="string">&quot;/conf/logback_namesrv.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);</span><br><span class="line"></span><br><span class="line">       MixAll.printObjectProperties(log, namesrvConfig);</span><br><span class="line">       MixAll.printObjectProperties(log, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="type">NamesrvController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvController</span>(namesrvConfig, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// remember all configs to prevent discard</span></span><br><span class="line">       controller.getConfiguration().registerConfig(properties);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> controller;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里方法的代码就比较多了，我们拆成几段来撸就比较好分析了：<br><b>org.apache.rocketmq.namesrv.NamesrvStartup.createNamesrvController(String[])</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> ServerUtil.buildCommandlineOptions(<span class="keyword">new</span> <span class="title class_">Options</span>());</span><br><span class="line">commandLine = ServerUtil.parseCmdLine(<span class="string">&quot;mqnamesrv&quot;</span>, args, buildCommandlineOptions(options), <span class="keyword">new</span> <span class="title class_">PosixParser</span>());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == commandLine) &#123;</span><br><span class="line">System.exit(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段是使用了Apache Commons CLI命令行（Command Line Interface）解析工具，它主要是根据运行时传递进来的参数生成commandLine命令行对象，用于解析运行时类似于 -c 指定文件路径，然后填充到 namesrvConfig 和 nettyServerConfig 对象中。<br>那么，之后的两个小步骤，就是 这两个配置的填充过程了：</p><p><b>org.apache.rocketmq.namesrv.NamesrvStartup.createNamesrvController(String[]) </b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">NamesrvConfig</span> <span class="variable">namesrvConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvConfig</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">NettyServerConfig</span> <span class="variable">nettyServerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyServerConfig</span>();</span><br><span class="line">nettyServerConfig.setListenPort(<span class="number">9876</span>);</span><br><span class="line"><span class="keyword">if</span> (commandLine.hasOption(<span class="string">&#x27;c&#x27;</span>)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> commandLine.getOptionValue(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(in);</span><br><span class="line">MixAll.properties2Object(properties, namesrvConfig);</span><br><span class="line">MixAll.properties2Object(properties, nettyServerConfig);</span><br><span class="line"></span><br><span class="line">namesrvConfig.setConfigStorePath(file);</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;load config properties file OK, %s%n&quot;</span>, file);</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段是createNamesrvController(String[] args)方法最为核心的代码，从代码可以看到，先创建NamesrvConfig和NettyServerConfig对象，接着利用commandLine命令行工具读取-c指定的配置文件路径，然后将其读取到流中，生成properties对象，最后将namesrvConfig和nettyServerConfig对象进行初始化。</p><p>这里省略一些没有那么重要的细节代码，譬如支持配置查看模式（命令行添加 -p，则把当前的环境配置输出来）、日志上下文配置（包括日志文件路径设定，Logger获取），这里不细看，接着往下看：</p><p><b>org.apache.rocketmq.namesrv.NamesrvStartup.createNamesrvController(String[])</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">NamesrvController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvController</span>(namesrvConfig, nettyServerConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remember all configs to prevent discard</span></span><br><span class="line">controller.getConfiguration().registerConfig(properties);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> controller;</span><br></pre></td></tr></table></figure><p>到这里就是水到渠成，利用namesrvConfig和nettyServerConfig对象创建NamesrvController对象，然后在注册一遍properties，防止丢失。</p><h2 id="启动NamesrvController"><a href="#启动NamesrvController" class="headerlink" title="启动NamesrvController"></a>启动NamesrvController</h2><p>回到 org.apache.rocketmq.namesrv.NamesrvStartup.main0(String[] args) 方法，看进去 start(NamesrvController) 方法<br><b>org.apache.rocketmq.namesrv.NamesrvStartup.start(NamesrvController) </b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NamesrvController <span class="title function_">start</span><span class="params">(<span class="keyword">final</span> NamesrvController controller)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == controller) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;NamesrvController is null&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">initResult</span> <span class="operator">=</span> controller.initialize();</span><br><span class="line">       <span class="keyword">if</span> (!initResult) &#123;</span><br><span class="line">           controller.shutdown();</span><br><span class="line">           System.exit(-<span class="number">3</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">ShutdownHookThread</span>(log, <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Void&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">               controller.shutdown();</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;));</span><br><span class="line"></span><br><span class="line">       controller.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> controller;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这个方法主要是对核心控制器进行初始化操作，其次是注册一个钩子函数，用于JVM进程关闭时，优雅地释放netty服务、线程池等资源，最后对核心控制器进行启动操作，接下来我们继续撸org.apache.rocketmq.namesrv.NamesrvController.initialize() 详细实现：<br><b>org.apache.rocketmq.namesrv.NamesrvController.initialize()</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 加载kv配置</span></span><br><span class="line">       <span class="built_in">this</span>.kvConfigManager.load();</span><br><span class="line">       <span class="comment">// 加载netty网络服务对象，并注册</span></span><br><span class="line">       <span class="built_in">this</span>.remotingServer = <span class="keyword">new</span> <span class="title class_">NettyRemotingServer</span>(<span class="built_in">this</span>.nettyServerConfig, <span class="built_in">this</span>.brokerHousekeepingService);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">this</span>.remotingExecutor =</span><br><span class="line">           Executors.newFixedThreadPool(nettyServerConfig.getServerWorkerThreads(), <span class="keyword">new</span> <span class="title class_">ThreadFactoryImpl</span>(<span class="string">&quot;RemotingExecutorThread_&quot;</span>));</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">this</span>.registerProcessor();</span><br><span class="line">       <span class="comment">// 创建定时任务--每隔10秒扫描一次Broker，并定时删除不活跃的Broker</span></span><br><span class="line">       <span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               NamesrvController.<span class="built_in">this</span>.routeInfoManager.scanNotActiveBroker();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">5</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">       <span class="comment">// 创建定时任务--每隔10分钟打印一遍kv配置</span></span><br><span class="line">       <span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               NamesrvController.<span class="built_in">this</span>.kvConfigManager.printAllPeriodically();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">1</span>, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 之后是注册一个监听器，去监听Ssl上下文环境的变更，主要透过Tls证书文件监听进行</span></span><br><span class="line">       <span class="comment">// 。。。</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至此，就是最后一步了，就是创建Netty服务来进行通信，关于Netty的实现细节较多，这里不深入，要想了解可以看一下Netty相关文章。</p><h2 id="路由启动时序图"><a href="#路由启动时序图" class="headerlink" title="路由启动时序图"></a>路由启动时序图</h2><p><img src="/images/post-RocketMQ-NameServer/20190525090837.png"></p><h1 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h1><p>路由注册即是Broker向Nameserver注册的过程，它们是通过Broker的心跳功能实现的，既然Nameserver是用来存储Broker的注册信息，那么我们就先来看看Nameserver到底存储了哪些信息，就是上文那张结构图，我们知道RouteInfoManager为路由信息表。</p><p>RocketMQ是基于订阅发布机制的，一个Topic拥有多个消息队列，如果不指定队列的数量，一个Broker默认会为每个Topic创建4个读队列和4个写队列，多个Broker组成集群，Broker会通过发送心跳包将自己的信息注册到路由中心，路由中心brokerLiveTable存储Broker的状态，它会根据Broker的心跳包更新Broker状态信息。</p><h2 id="Broker发送心跳包"><a href="#Broker发送心跳包" class="headerlink" title="Broker发送心跳包"></a>Broker发送心跳包</h2><p><b>org.apache.rocketmq.broker.BrokerController.start()</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.registerBrokerAll(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>); <span class="comment">// 初次启动，这里会强制执行发送心跳包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BrokerController.<span class="built_in">this</span>.registerBrokerAll(<span class="literal">true</span>, <span class="literal">false</span>, brokerConfig.isForceRegister());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">log.error(<span class="string">&quot;registerBrokerAll Exception&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span> * <span class="number">10</span>, Math.max(<span class="number">10000</span>, Math.min(brokerConfig.getRegisterNameServerPeriod(), <span class="number">60000</span>)), TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>Broker在核心控制器启动时，会强制发送一次心跳包，接着创建一个定时任务，定时向路由中心发送心跳包。由 brokerConfig.getRegisterNameServerPeriod() 可以看到这个定时时间支持可配置，但是调了两个Math类的限制大小函数，把时间限定在[10，60]这个区间，默认是30秒。<br>接下来，进去org.apache.rocketmq.broker.BrokerController.registerBrokerAll(boolean, boolean, boolean)方法看下：<br><b>org.apache.rocketmq.broker.BrokerController.registerBrokerAll(boolean, boolean, boolean)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">registerBrokerAll</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> checkOrderConfig, <span class="type">boolean</span> oneway, <span class="type">boolean</span> forceRegister)</span> &#123;</span><br><span class="line">       <span class="type">TopicConfigSerializeWrapper</span> <span class="variable">topicConfigWrapper</span> <span class="operator">=</span> <span class="built_in">this</span>.getTopicConfigManager().buildTopicConfigSerializeWrapper(); <span class="comment">// 创建一个topic包装类</span></span><br><span class="line"><span class="comment">//这里的设计是，如果该broker没有读写权限，那么会新建一个临时的topicConfigTable，再set进包装类</span></span><br><span class="line">       <span class="keyword">if</span> (!PermName.isWriteable(<span class="built_in">this</span>.getBrokerConfig().getBrokerPermission())</span><br><span class="line">           || !PermName.isReadable(<span class="built_in">this</span>.getBrokerConfig().getBrokerPermission())) &#123;  </span><br><span class="line">           ConcurrentHashMap&lt;String, TopicConfig&gt; topicConfigTable = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, TopicConfig&gt;();</span><br><span class="line">           <span class="keyword">for</span> (TopicConfig topicConfig : topicConfigWrapper.getTopicConfigTable().values()) &#123;</span><br><span class="line">               <span class="type">TopicConfig</span> <span class="variable">tmp</span> <span class="operator">=</span></span><br><span class="line">                   <span class="keyword">new</span> <span class="title class_">TopicConfig</span>(topicConfig.getTopicName(), topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),</span><br><span class="line">                       <span class="built_in">this</span>.brokerConfig.getBrokerPermission());</span><br><span class="line">               topicConfigTable.put(topicConfig.getTopicName(), tmp);</span><br><span class="line">           &#125;</span><br><span class="line">           topicConfigWrapper.setTopicConfigTable(topicConfigTable);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 判断该Broker是否需要发送心跳包</span></span><br><span class="line">       <span class="keyword">if</span> (forceRegister || needRegister(<span class="built_in">this</span>.brokerConfig.getBrokerClusterName(),</span><br><span class="line">           <span class="built_in">this</span>.getBrokerAddr(),</span><br><span class="line">           <span class="built_in">this</span>.brokerConfig.getBrokerName(),</span><br><span class="line">           <span class="built_in">this</span>.brokerConfig.getBrokerId(),</span><br><span class="line">           <span class="built_in">this</span>.brokerConfig.getRegisterBrokerTimeoutMills())) &#123;</span><br><span class="line">           doRegisterBrokerAll(checkOrderConfig, oneway, topicConfigWrapper); <span class="comment">// 执行发送心跳包</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>该方法是Broker执行发送心跳包的核心控制方法，它主要做了topic的包装类封装操作，判断Broker此时是否需要执行发送心跳包，但<b>查看org.apache.rocketmq.common.BrokerConfig#forceRegister字段的值，发现写死为true，也就是该判断永远为true，即默认配置下是每次都需要发送心跳包。</b><br>进去看一下这个控制是否发心跳包的方法org.apache.rocketmq.broker.BrokerController.needRegister(String, String, String, long, int)<br><b>org.apache.rocketmq.broker.BrokerController.needRegister(String, String, String, long, int)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">needRegister</span><span class="params">(<span class="keyword">final</span> String clusterName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerAddr,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">long</span> brokerId,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">int</span> timeoutMills)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">TopicConfigSerializeWrapper</span> <span class="variable">topicConfigWrapper</span> <span class="operator">=</span> <span class="built_in">this</span>.getTopicConfigManager().buildTopicConfigSerializeWrapper();</span><br><span class="line">       List&lt;Boolean&gt; changeList = brokerOuterAPI.needRegister(clusterName, brokerAddr, brokerName, brokerId, topicConfigWrapper, timeoutMills);</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">needRegister</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">for</span> (Boolean changed : changeList) &#123;</span><br><span class="line">           <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">               needRegister = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> needRegister;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>进去里边发现，是否需要发送心跳包的逻辑还得结合 org.apache.rocketmq.broker.out.BrokerOuterAPI.needRegister(String, String, String, long, TopicConfigSerializeWrapper, int) 方法来判断。<br><b>org.apache.rocketmq.broker.out.BrokerOuterAPI.needRegister(String, String, String, long, TopicConfigSerializeWrapper, int)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Boolean&gt; <span class="title function_">needRegister</span><span class="params">(</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String clusterName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerAddr,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">long</span> brokerId,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">int</span> timeoutMills)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> List&lt;Boolean&gt; changedList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">       List&lt;String&gt; nameServerAddressList = <span class="built_in">this</span>.remotingClient.getNameServerAddressList();</span><br><span class="line">       <span class="keyword">if</span> (nameServerAddressList != <span class="literal">null</span> &amp;&amp; nameServerAddressList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(nameServerAddressList.size());</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">final</span> String namesrvAddr : nameServerAddressList) &#123;</span><br><span class="line">               brokerOuterExecutor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="type">QueryDataVersionRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryDataVersionRequestHeader</span>();</span><br><span class="line">                           requestHeader.setBrokerAddr(brokerAddr);</span><br><span class="line">                           requestHeader.setBrokerId(brokerId);</span><br><span class="line">                           requestHeader.setBrokerName(brokerName);</span><br><span class="line">                           requestHeader.setClusterName(clusterName);</span><br><span class="line">                           <span class="type">RemotingCommand</span> <span class="variable">request</span> <span class="operator">=</span> RemotingCommand.createRequestCommand(RequestCode.QUERY_DATA_VERSION, requestHeader);</span><br><span class="line">                           request.setBody(topicConfigWrapper.getDataVersion().encode());</span><br><span class="line">                           <span class="type">RemotingCommand</span> <span class="variable">response</span> <span class="operator">=</span> remotingClient.invokeSync(namesrvAddr, request, timeoutMills);</span><br><span class="line">                           <span class="type">DataVersion</span> <span class="variable">nameServerDataVersion</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                           <span class="type">Boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                           <span class="keyword">switch</span> (response.getCode()) &#123;</span><br><span class="line">                               <span class="keyword">case</span> ResponseCode.SUCCESS: &#123;</span><br><span class="line">                                   <span class="type">QueryDataVersionResponseHeader</span> <span class="variable">queryDataVersionResponseHeader</span> <span class="operator">=</span></span><br><span class="line">                                       (QueryDataVersionResponseHeader) response.decodeCommandCustomHeader(QueryDataVersionResponseHeader.class);</span><br><span class="line">                                   changed = queryDataVersionResponseHeader.getChanged();</span><br><span class="line">                                   <span class="type">byte</span>[] body = response.getBody();</span><br><span class="line">                                   <span class="keyword">if</span> (body != <span class="literal">null</span>) &#123;</span><br><span class="line">                                       nameServerDataVersion = DataVersion.decode(body, DataVersion.class);</span><br><span class="line">                                       <span class="keyword">if</span> (!topicConfigWrapper.getDataVersion().equals(nameServerDataVersion)) &#123; <span class="comment">//判断是否一致的DataVersion</span></span><br><span class="line">                                           changed = <span class="literal">true</span>;</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;</span><br><span class="line">                                   <span class="keyword">if</span> (changed == <span class="literal">null</span> || changed) &#123;</span><br><span class="line">                                       changedList.add(Boolean.TRUE);</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">default</span>:</span><br><span class="line">                                   <span class="keyword">break</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           log.warn(<span class="string">&quot;Query data version from name server &#123;&#125; OK,changed &#123;&#125;, broker &#123;&#125;,name server &#123;&#125;&quot;</span>, namesrvAddr, changed, topicConfigWrapper.getDataVersion(), nameServerDataVersion == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : nameServerDataVersion);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                           changedList.add(Boolean.TRUE);</span><br><span class="line">                           log.error(<span class="string">&quot;Query data version from name server &#123;&#125;  Exception, &#123;&#125;&quot;</span>, namesrvAddr, e);</span><br><span class="line">                       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                           countDownLatch.countDown();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               log.error(<span class="string">&quot;query dataversion from nameserver countDownLatch await Exception&quot;</span>, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> changedList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>捋一捋这个方法的逻辑，发现，关键是这个判断 !topicConfigWrapper.getDataVersion().equals(nameServerDataVersion)，就是说，该Broker本地的topic配置的DataVersion与远程调用Namesrv获取回来的DataVersion是否一致，如果不是，则要发送心跳包。</p><p>我们再定位到 needRegister 远程调用到路由中心Namesrv的方法：</p><p><b>org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.isBrokerTopicConfigChanged(String, DataVersion)，</b><br><b>org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.queryBrokerTopicConfig(String) </b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBrokerTopicConfigChanged</span><span class="params">(<span class="keyword">final</span> String brokerAddr, <span class="keyword">final</span> DataVersion dataVersion)</span> &#123;</span><br><span class="line">       <span class="type">DataVersion</span> <span class="variable">prev</span> <span class="operator">=</span> queryBrokerTopicConfig(brokerAddr);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span> == prev || !prev.equals(dataVersion);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> DataVersion <span class="title function_">queryBrokerTopicConfig</span><span class="params">(<span class="keyword">final</span> String brokerAddr)</span> &#123;</span><br><span class="line">       <span class="type">BrokerLiveInfo</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerLiveTable.get(brokerAddr);</span><br><span class="line">       <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> prev.getDataVersion();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>发现，关键还是取决于Namesrv这边记录的存活Broker列表BrokerLiveInfo中的dataVersion，如果broker本地存的dataVersion为空或者当前这个dataVersion不等于NameServ的brokerLiveTable里存储的brokerLiveInfo里边的dataVersion，就说明Broker信息版本与NameServ的对不上号，则需要更新，也就是说Broker就需要发送心跳包。</p><h2 id="NameSrv处理心跳包"><a href="#NameSrv处理心跳包" class="headerlink" title="NameSrv处理心跳包"></a>NameSrv处理心跳包</h2><p>Nameserver的netty服务监听收到心跳包之后，会调用到路由中心以下方法进行处理：<br><b>org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.registerBroker(String, String, String, long, String, TopicConfigSerializeWrapper, List<String>, Channel)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RegisterBrokerResult <span class="title function_">registerBroker</span><span class="params">(</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String clusterName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerAddr,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String brokerName,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> <span class="type">long</span> brokerId,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> String haServerAddr,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> List&lt;String&gt; filterServerList,</span></span><br><span class="line"><span class="params">       <span class="keyword">final</span> Channel channel)</span> &#123;</span><br><span class="line">       <span class="type">RegisterBrokerResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegisterBrokerResult</span>();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.lock.writeLock().lockInterruptibly();</span><br><span class="line">               <span class="comment">// 获取集群下所有的Broker，并将当前Broker加入clusterAddrTable，由于brokerNames是Set结构，并不会重复</span></span><br><span class="line">               Set&lt;String&gt; brokerNames = <span class="built_in">this</span>.clusterAddrTable.get(clusterName); </span><br><span class="line">               <span class="keyword">if</span> (<span class="literal">null</span> == brokerNames) &#123;</span><br><span class="line">                   brokerNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">                   <span class="built_in">this</span>.clusterAddrTable.put(clusterName, brokerNames);</span><br><span class="line">               &#125;</span><br><span class="line">               brokerNames.add(brokerName);</span><br><span class="line"></span><br><span class="line">               <span class="type">boolean</span> <span class="variable">registerFirst</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">               <span class="type">BrokerData</span> <span class="variable">brokerData</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerAddrTable.get(brokerName); <span class="comment">// 获取Broker信息，如果是首次注册，那么新建一个BrokerData并加入brokerAddrTable</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="literal">null</span> == brokerData) &#123;</span><br><span class="line">                   registerFirst = <span class="literal">true</span>;</span><br><span class="line">                   brokerData = <span class="keyword">new</span> <span class="title class_">BrokerData</span>(clusterName, brokerName, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Long, String&gt;());</span><br><span class="line">                   <span class="built_in">this</span>.brokerAddrTable.put(brokerName, brokerData);</span><br><span class="line">               &#125;</span><br><span class="line">               Map&lt;Long, String&gt; brokerAddrsMap = brokerData.getBrokerAddrs();</span><br><span class="line">               <span class="comment">//Switch slave to master: first remove &lt;1, IP:PORT&gt; in namesrv, then add &lt;0, IP:PORT&gt;</span></span><br><span class="line">               <span class="comment">//The same IP:PORT must only have one record in brokerAddrTable</span></span><br><span class="line">               Iterator&lt;Entry&lt;Long, String&gt;&gt; it = brokerAddrsMap.entrySet().iterator();</span><br><span class="line">               <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                   Entry&lt;Long, String&gt; item = it.next();</span><br><span class="line">                   <span class="keyword">if</span> (<span class="literal">null</span> != brokerAddr &amp;&amp; brokerAddr.equals(item.getValue()) &amp;&amp; brokerId != item.getKey()) &#123;</span><br><span class="line">                       it.remove();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 这里判断Broker是否是已经注册过</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">oldAddr</span> <span class="operator">=</span> brokerData.getBrokerAddrs().put(brokerId, brokerAddr);</span><br><span class="line">               registerFirst = registerFirst || (<span class="literal">null</span> == oldAddr);</span><br><span class="line">               <span class="comment">// 如果是Broker是Master节点吗，并且Topic信息更新或者是首次注册，那么创建更新topic队列信息</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="literal">null</span> != topicConfigWrapper</span><br><span class="line">                   &amp;&amp; MixAll.MASTER_ID == brokerId) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="built_in">this</span>.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())</span><br><span class="line">                       || registerFirst) &#123;</span><br><span class="line">                       ConcurrentMap&lt;String, TopicConfig&gt; tcTable =</span><br><span class="line">                           topicConfigWrapper.getTopicConfigTable();</span><br><span class="line">                       <span class="keyword">if</span> (tcTable != <span class="literal">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">for</span> (Map.Entry&lt;String, TopicConfig&gt; entry : tcTable.entrySet()) &#123;</span><br><span class="line">                               <span class="built_in">this</span>.createAndUpdateQueueData(brokerName, entry.getValue());</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 更新BrokerLiveInfo状态信息</span></span><br><span class="line">               <span class="type">BrokerLiveInfo</span> <span class="variable">prevBrokerLiveInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerLiveTable.put(brokerAddr,</span><br><span class="line">                   <span class="keyword">new</span> <span class="title class_">BrokerLiveInfo</span>(</span><br><span class="line">                       System.currentTimeMillis(),</span><br><span class="line">                       topicConfigWrapper.getDataVersion(),</span><br><span class="line">                       channel,</span><br><span class="line">                       haServerAddr));</span><br><span class="line">               <span class="keyword">if</span> (<span class="literal">null</span> == prevBrokerLiveInfo) &#123;</span><br><span class="line">                   log.info(<span class="string">&quot;new broker registered, &#123;&#125; HAServer: &#123;&#125;&quot;</span>, brokerAddr, haServerAddr);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (filterServerList != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (filterServerList.isEmpty()) &#123;</span><br><span class="line">                       <span class="built_in">this</span>.filterServerTable.remove(brokerAddr);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="built_in">this</span>.filterServerTable.put(brokerAddr, filterServerList);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (MixAll.MASTER_ID != brokerId) &#123;</span><br><span class="line">                   <span class="type">String</span> <span class="variable">masterAddr</span> <span class="operator">=</span> brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);</span><br><span class="line">                   <span class="keyword">if</span> (masterAddr != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="type">BrokerLiveInfo</span> <span class="variable">brokerLiveInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.brokerLiveTable.get(masterAddr);</span><br><span class="line">                       <span class="keyword">if</span> (brokerLiveInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                           result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());</span><br><span class="line">                           result.setMasterAddr(masterAddr);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.lock.writeLock().unlock();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           log.error(<span class="string">&quot;registerBroker Exception&quot;</span>, e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>该方法是处理Broker心跳包的最核心方法，它主要做了对RouteInfoManager路由信息的一些更新操作，包括对clusterAddrTable、brokerAddrTable、topicQueueTable、brokerLiveTable等路由信息。</p><h2 id="Broker路由注册时序图"><a href="#Broker路由注册时序图" class="headerlink" title="Broker路由注册时序图"></a>Broker路由注册时序图</h2><p><img src="/images/post-RocketMQ-NameServer/20190525092557.png"></p><h1 id="路由删除"><a href="#路由删除" class="headerlink" title="路由删除"></a>路由删除</h1><p>前面部分我们分析了Nameserver启动时会创建一个定时任务，定时剔除不活跃的Broker。<br><b>org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.scanNotActiveBroker()</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanNotActiveBroker</span><span class="params">()</span> &#123;</span><br><span class="line">       Iterator&lt;Entry&lt;String, BrokerLiveInfo&gt;&gt; it = <span class="built_in">this</span>.brokerLiveTable.entrySet().iterator();</span><br><span class="line">       <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">           Entry&lt;String, BrokerLiveInfo&gt; next = it.next();</span><br><span class="line">           <span class="type">long</span> <span class="variable">last</span> <span class="operator">=</span> next.getValue().getLastUpdateTimestamp();</span><br><span class="line">           <span class="keyword">if</span> ((last + BROKER_CHANNEL_EXPIRED_TIME) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">               RemotingUtil.closeChannel(next.getValue().getChannel());</span><br><span class="line">               it.remove();</span><br><span class="line">               log.warn(<span class="string">&quot;The broker channel expired, &#123;&#125; &#123;&#125;ms&quot;</span>, next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);</span><br><span class="line">               <span class="built_in">this</span>.onChannelDestroy(next.getKey(), next.getValue().getChannel());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>剔除Broker信息的逻辑就比较简单了，就是遍历所有存活的Broker的信息，也就是BrokerLiveInfo，从BrokerLiveInfo获取状态信息，判断Broker的心跳时间是否已经超过限定值，如果超过，则执行剔除的逻辑。<br>这个逻辑，会放在Namesrv初始化方法initialize()里以一个定时任务来执行，默认每隔10秒执行一次。</p><h1 id="路由发现"><a href="#路由发现" class="headerlink" title="路由发现"></a>路由发现</h1><p>RocketMQ路由发现，是非实时的。当Topic路由出现变化后，Namesrv不主动推送给客户端，而是由客户端定时拉取主题最新的路由。<br>根据主题名称拉取路由信息的命令编码为： GET ROUTEINTO BY_TOPIC 。RocketMQ 路由结果如下：</p><p>•String orderTopicConf ：顺序消息配置内容，来自于kvConfig 。<br>•List&lt;QueueData&gt; queueData ： topic 队列元数据。<br>•List&lt;BrokerData&gt; brokerDatas ： topic 分布的broker 元数据。<br>•HashMap&lt; String&#x2F;* brokerAdress*&#x2F;,List&lt;String&gt; &#x2F;* filterServer* &#x2F;&gt; ： broker 上过滤服务器地址列表</p><p>NameServer 路由发现实现方法：<br><b>org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor.getRouteInfoByTopic(ChannelHandlerContext, RemotingCommand)</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RemotingCommand <span class="title function_">getRouteInfoByTopic</span><span class="params">(ChannelHandlerContext ctx,</span></span><br><span class="line"><span class="params">       RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">RemotingCommand</span> <span class="variable">response</span> <span class="operator">=</span> RemotingCommand.createResponseCommand(<span class="literal">null</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">GetRouteInfoRequestHeader</span> <span class="variable">requestHeader</span> <span class="operator">=</span></span><br><span class="line">           (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);</span><br><span class="line"></span><br><span class="line">       <span class="type">TopicRouteData</span> <span class="variable">topicRouteData</span> <span class="operator">=</span> <span class="built_in">this</span>.namesrvController.getRouteInfoManager().pickupTopicRouteData(requestHeader.getTopic());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (topicRouteData != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.namesrvController.getNamesrvConfig().isOrderMessageEnable()) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">orderTopicConf</span> <span class="operator">=</span></span><br><span class="line">                   <span class="built_in">this</span>.namesrvController.getKvConfigManager().getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG,</span><br><span class="line">                       requestHeader.getTopic());</span><br><span class="line">               topicRouteData.setOrderTopicConf(orderTopicConf);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="type">byte</span>[] content = topicRouteData.encode();</span><br><span class="line">           response.setBody(content);</span><br><span class="line">           response.setCode(ResponseCode.SUCCESS);</span><br><span class="line">           response.setRemark(<span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> response;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       response.setCode(ResponseCode.TOPIC_NOT_EXIST);</span><br><span class="line">       response.setRemark(<span class="string">&quot;No topic route info in name server for the topic: &quot;</span> + requestHeader.getTopic()</span><br><span class="line">           + FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL));</span><br><span class="line">       <span class="keyword">return</span> response;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Step 1：调用RouterlnfoManager 的方法，从路由表topicQueueTable 、brokerAddrTable 、filterServerTable 中分别填充TopicRouteData 中的List&lt;QueueData&gt;、List&lt;BrokerData&gt;和 filterServer 地址表。<br>Step 2 ： 如果找到主题对应的路由信息并且该主题为顺序消息，则从NameServerKVconfig 中获取关于顺序消息相关的配置填充路由信息。如果找不到路由信息CODE 则使用TOPIC NOT_EXISTS ，表示没有找到对应的路由。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要介绍了NameServer 路由功能，包含路由元数据、路由注册与发现机制。<br>下面以一张图来总结Namesrv的路由注册、删除机制。<br><img src="/images/post-RocketMQ-NameServer/20190525093816.png"></p><p>Namesrv路由发现与删除机制的设计，主要是，消息生产者（Producer）在发送消息之前先从Namesrv获取Broker服务器地址列表，然后根据负载算法从列表中选择一台消息服务器进行发送 。Namesrv与每台Broker服务器保持长连接，Broker每隔30秒（可配置，默认30秒）发送一次心跳向Namesrv报告自己存活，而Namesrv则间隔10秒检测一次Broker是否存活（对比上一次报告时间是否超过120秒），如果检测到Broker宕机，则从路由注册表（BrokerLiveInfo）中将其移除。<br>但是这样的设计存在这样一种情况： NameServer 需要等Broker 失效至少120秒才能将该Broker 从路由表中移除掉，那如果在Broker 故障期间，因为没有立马把路由变化通知到消息生产者，消息生产者Producer 根据主题获取到的路由信息包含已经看机的Broker ，会导致消息发送失败，那这种情况怎么办，岂不是消息发送不是高可用的？这个其实是在<a href="/2019/05/30/RocketMQ-Producer-Send-Message/#%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息发送端提供容错机制来保证消息的高可用性的</a>， 这样的设计，主要是为了降低Namesrv实现的复杂性。<br>而Namesrv本身的高可用，可以通过部署多台Namesrv服务器来实现，但彼此之间互不通信，这一点，跟我们熟悉的zookeeper，etcd这种不一样（namesrv不像zk那样分leader&#x2F;follower，或者说master&#x2F;slave，强调的更多是CAP里的AP，避免脑裂问题），这其实也是RocketMQ的namesrv设计的一个亮点，因为不需要维护master、slave的状态同步，所以实现更加简单。<br>从以上亮点，可以看出，RocketMQ的Namesrv设计上追求简单高效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ调试环境配置</title>
      <link href="/2019/05/18/RocketMQ-Debug-Environment/"/>
      <url>/2019/05/18/RocketMQ-Debug-Environment/</url>
      
        <content type="html"><![CDATA[<h1 id="调试环境及工具"><a href="#调试环境及工具" class="headerlink" title="调试环境及工具"></a>调试环境及工具</h1><ol><li>   JDK 1.8+</li><li>   Maven</li><li>   IDE工具（Eclipse&#x2F;IntelliJ IDEA）</li></ol><h2 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h2><p>RocketMQ的官方仓库 <a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a> ，为方便调试，可以 Fork 出属于自己的仓库。<br>使用Eclipse从仓库里拉取代码。拉取并以Maven项目形式导入IDE工具，完成后，Maven会自动下载依赖包。</p><p>搭建之前先来一张RocketMQ物理部署架构图（集群）：<br><img src="/images/post-RocketMQ-environment/20190518080010.png"></p><p><b style="color:orange">下文只介绍最小化的RocketMQ环境部署，暂时不考虑Namesrv集群、Broker集群、Comsumer集群。</b><br>本文所涉及RocketMQ源码基于 4.5.1 版本（master分支）。<br>搭建调试环境的过程：<br>1.启动 RocketMQ Namesrv （元数据管理，Broker、Producer、Consumer各组件的服务注册与发现）<br>2.启动 RocketMQ Broker （真正意义上的MQ服务端，接收消息、推送消费）<br>3.启动 RocketMQ Producer （消息生产者，发送消息至Broker）<br>4.启动 RocketMQ Consumer （消息消费者，消费Broker推送过来的消息）</p><p>消息服务端（Namesrv及Broker）的启动方式：<br>1.配置文件方式（配置文件多，路径多，配置项多而繁琐，不推荐×）<br>2.代码启动方式（代码简单可控，推荐√）</p><h1 id="启动Namesrv"><a href="#启动Namesrv" class="headerlink" title="启动Namesrv"></a>启动Namesrv</h1><h2 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h2><p>以Eclipse为例简单说明一下，以配置文件方式来启动Namesrv模块</p><ol><li>   打开namesrv模块下的NamesrvStartup.java，选择Debug As，配置Debug Configuration，弹出De bug Configuration s 对话框。</li><li>   选中Java Application 条目并单击右键，选择New 弹出Debug Configurations 对话框</li><li>   设置RocketMQ 运行主目录。选择Environment 选项卡，添加环境变量ROCKET_HOME</li><li>   在RocketMQ 运行主目录中创建conf 、logs 、store 三个文件夹<br><img src="/images/post-RocketMQ-environment/20190518081143.png"></li><li><pre><code>从RocketMQ distribution 部署目录中将broker.conf、logback_ broker.xml 文件复制到conf 目录中， logback_ namesrv.xml 文件则只需修改日志文件的目录， broker.conf 文件内容如下所示。定义一个自己的RocketMQ store目录路径，替换即可。</code></pre></li></ol><p><img src="/images/post-RocketMQ-environment/20190518081320.png"><br>6.在Eclipse Debug 中运行NamesrvStartup ，并输出“ The Name Server boot success.Serializetype&#x3D;JSON ” 。</p><h2 id="代码启动方式（推荐√）"><a href="#代码启动方式（推荐√）" class="headerlink" title="代码启动方式（推荐√）"></a>代码启动方式（推荐√）</h2><p>打开 org.apache.rocketmq.namesrv.NameServerInstanceTest 单元测试类，参考 #startup() 方法，我们编写一个自己的启动器，NamesrvStarter， 包含 #main(String[] args) 静态方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// NamesrvConfig 配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">NamesrvConfig</span> <span class="variable">namesrvConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvConfig</span>();</span><br><span class="line">    <span class="comment">// NettyServerConfig 配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">NettyServerConfig</span> <span class="variable">nettyServerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyServerConfig</span>();</span><br><span class="line">    nettyServerConfig.setListenPort(<span class="number">9876</span>); <span class="comment">// 设置端口，不设置的话默认9876端口</span></span><br><span class="line">    <span class="comment">// 创建 NamesrvController 对象，并启动</span></span><br><span class="line">    <span class="type">NamesrvController</span> <span class="variable">namesrvController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamesrvController</span>(namesrvConfig, nettyServerConfig);</span><br><span class="line">    namesrvController.initialize();</span><br><span class="line">    namesrvController.start();</span><br><span class="line">    <span class="comment">// 休眠1天，一直hold住线程不退出</span></span><br><span class="line">    Thread.sleep(DateUtils.MILLIS_PER_DAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心配置均在代码里体现，右键运行，RocketMQ Namesrv 就启动完成。输出日志如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">07:54:03.354 [NettyEventExecutor] INFO  RocketmqRemoting - NettyEventExecutor service started</span><br><span class="line">07:54:03.355 [FileWatchService] INFO  RocketmqCommon - FileWatchService service started</span><br></pre></td></tr></table></figure><h1 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h1><h2 id="配置文件方式-1"><a href="#配置文件方式-1" class="headerlink" title="配置文件方式"></a>配置文件方式</h2><p>以Eclipse为例简单说明一下，以配置文件方式来启动 Broker 模块<br>1.打开BrokerStartup.java，移动到Debug As ，选中Debug Configurations ，在弹出的对话框，选择arguments 选项卡，配置 -c 属性指定 broker 配置文件路径。<br><img src="/images/post-RocketMQ-environment/20190518081402.png"><br>2.切换选项卡Environment ，配置RocketMQ 主目录。<br><img src="/images/post-RocketMQ-environment/20190518081418.png"><br>3.以Debug 模式运行BrokerStartup.java ，查看${ROCKET_HOME} &#x2F;logs&#x2F; broker.log 文件，没报错则表示启动成功。</p><h2 id="代码启动方式（推荐√）-1"><a href="#代码启动方式（推荐√）-1" class="headerlink" title="代码启动方式（推荐√）"></a>代码启动方式（推荐√）</h2><p>打开 org.apache.rocketmq.broker.BrokerControllerTest 单元测试类，参考 #testBrokerRestart() 方法，我们编写一个BrokerStarter类，包含#main(String[] args) 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 设置版本号</span></span><br><span class="line">    System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));</span><br><span class="line">    <span class="comment">// NettyServerConfig 配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">NettyServerConfig</span> <span class="variable">nettyServerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyServerConfig</span>();</span><br><span class="line">    nettyServerConfig.setListenPort(<span class="number">10911</span>);</span><br><span class="line">    <span class="comment">// BrokerConfig 配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">BrokerConfig</span> <span class="variable">brokerConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrokerConfig</span>();</span><br><span class="line">    brokerConfig.setBrokerName(<span class="string">&quot;broker-a&quot;</span>);</span><br><span class="line">    brokerConfig.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">    <span class="comment">// MessageStoreConfig 配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">MessageStoreConfig</span> <span class="variable">messageStoreConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageStoreConfig</span>();</span><br><span class="line">    messageStoreConfig.setDeleteWhen(<span class="string">&quot;04&quot;</span>);</span><br><span class="line">    messageStoreConfig.setFileReservedTime(<span class="number">48</span>);</span><br><span class="line">    messageStoreConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);</span><br><span class="line">    messageStoreConfig.setDuplicationEnable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">BrokerPathConfigHelper.setBrokerConfigPath(<span class="string">&quot;D:/Users/xieruxu669/rockemq/conf/broker.conf&quot;</span>); <span class="comment">// 指定broker配置文件的路径</span></span><br><span class="line">    <span class="comment">// 创建 BrokerController 对象，并启动</span></span><br><span class="line">    <span class="type">BrokerController</span> <span class="variable">brokerController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrokerController</span>(<span class="comment">//</span></span><br><span class="line">            brokerConfig, <span class="comment">//</span></span><br><span class="line">            nettyServerConfig, <span class="comment">//</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NettyClientConfig</span>(), <span class="comment">//</span></span><br><span class="line">            messageStoreConfig);</span><br><span class="line">    brokerController.initialize();</span><br><span class="line">    brokerController.start();</span><br><span class="line">    <span class="comment">// 休眠1天，一直hold住线程不退出持续1天</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Broker started...休眠1天&quot;</span>);</span><br><span class="line">    Thread.sleep(DateUtils.MILLIS_PER_DAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，右键运行，RocketMQ Broker 就启动完成了。输出日志如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Broker started...休眠1天</span><br></pre></td></tr></table></figure><p>莫惊讶，Broker启动过程其实是没有自己的INFO日志的，但是，Broker起来必然会到Namesrv上面注册，所以，打开Namesrv的控制台，会看到输出如下日志：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">07:57:55.033 [NettyServerCodecThread_1] INFO  RocketmqRemoting - NETTY SERVER PIPELINE: channelRegistered 127.0.0.1:2597</span><br><span class="line">07:57:55.035 [NettyServerCodecThread_1] INFO  RocketmqRemoting - NETTY SERVER PIPELINE: channelActive, the channel[127.0.0.1:2597]</span><br><span class="line">07:57:55.231 [RemotingExecutorThread_1] DEBUG RocketmqNamesrv - receive request, 103 127.0.0.1:2597 RemotingCommand [code=103, language=JAVA, version=315, opaque=0, flag(B)=0, remark=null, extFields=&#123;brokerId=0, bodyCrc32=1180178866, clusterName=DefaultCluster, brokerAddr=10.188.32.24:10911, haServerAddr=10.188.32.24:10912, compressed=false, brokerName=broker-a&#125;, serializeTypeCurrentRPC=JSON]</span><br><span class="line">07:57:55.263 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, %RETRY%please_rename_unique_group_name_4 QueueData [brokerName=broker-a, readQueueNums=1, writeQueueNums=1, perm=6, topicSynFlag=0]</span><br><span class="line">07:57:55.264 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, BenchmarkTest QueueData [brokerName=broker-a, readQueueNums=1024, writeQueueNums=1024, perm=6, topicSynFlag=0]</span><br><span class="line">07:57:55.264 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, OFFSET_MOVED_EVENT QueueData [brokerName=broker-a, readQueueNums=1, writeQueueNums=1, perm=6, topicSynFlag=0]</span><br><span class="line">07:57:55.264 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, TopicTest QueueData [brokerName=broker-a, readQueueNums=4, writeQueueNums=4, perm=6, topicSynFlag=0]</span><br><span class="line">07:57:55.264 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, broker-a QueueData [brokerName=broker-a, readQueueNums=1, writeQueueNums=1, perm=7, topicSynFlag=0]</span><br><span class="line">07:57:55.264 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, TBW102 QueueData [brokerName=broker-a, readQueueNums=8, writeQueueNums=8, perm=7, topicSynFlag=0]</span><br><span class="line">07:57:55.265 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, SELF_TEST_TOPIC QueueData [brokerName=broker-a, readQueueNums=1, writeQueueNums=1, perm=6, topicSynFlag=0]</span><br><span class="line">07:57:55.266 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new topic registered, DefaultCluster QueueData [brokerName=broker-a, readQueueNums=16, writeQueueNums=16, perm=7, topicSynFlag=0]</span><br><span class="line">07:57:55.270 [RemotingExecutorThread_1] INFO  RocketmqNamesrv - new broker registered, 10.188.32.24:10911 HAServer: 10.188.32.24:10912b</span><br></pre></td></tr></table></figure><p><b>new broker registered, 10.188.32.24:10911 HAServer: 10.188.32.24:10912b</b> 这说明，Broker已经注册到了Namesrv上，也就是妥妥滴起来了。</p><p>可以用telnet命令测试一下连接端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 10911</span><br></pre></td></tr></table></figure><h1 id="启动-Producer"><a href="#启动-Producer" class="headerlink" title="启动 Producer"></a>启动 Producer</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class demonstrates how to send messages to brokers using provided &#123;<span class="doctag">@link</span> DefaultMQProducer&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Instantiate with a producer group name.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;please_rename_unique_group_name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Specify name server addresses.</span></span><br><span class="line"><span class="comment">         * &lt;p/&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Alternatively, you may specify name server addresses via exporting environmental variable: NAMESRV_ADDR</span></span><br><span class="line"><span class="comment">         * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">         * &#123;@code</span></span><br><span class="line"><span class="comment">         * producer.setNamesrvAddr(&quot;name-server1-ip:9876;name-server2-ip:9876&quot;);</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Launch the instance.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>); <span class="comment">// 设定 Namesrv 的地址与端口</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TopicTest&quot;</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                    <span class="string">&quot;TagA&quot;</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                    (<span class="string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Call send message to deliver message to one of brokers.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg);</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%s%n&quot;</span>, sendResult);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Shut down once the producer instance is not longer in use.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里第 28 行，增加了 producer.setNamesrvAddr(“127.0.0.1:9876”) 代码块，指明 Producer 使用的 Namesrv。<br><b style="color:red">送命题</b><br><b>这里有道送命题：为什么 Producer 这里指明的是 Namesrv 的地址跟端口，而不是 Broker 呢？</b></p><h1 id="启动-Consumer"><a href="#启动-Consumer" class="headerlink" title="启动 Consumer"></a>启动 Consumer</h1><p>打开 org.apache.rocketmq.example.quickstart.Consumer 示例类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, MQClientException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Instantiate with specified consumer group name.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;please_rename_unique_group_name_4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Specify name server addresses.</span></span><br><span class="line"><span class="comment">         * &lt;p/&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Alternatively, you may specify name server addresses via exporting environmental variable: NAMESRV_ADDR</span></span><br><span class="line"><span class="comment">         * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">         * &#123;@code</span></span><br><span class="line"><span class="comment">         * consumer.setNamesrvAddr(&quot;name-server1-ip:9876;name-server2-ip:9876&quot;);</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Specify where to start in case the specified consumer group is a brand new one.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>); <span class="comment">// 设定 Namesrv 的地址与端口</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Subscribe one more more topics to consume.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;TopicTest&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span><br><span class="line"><span class="params">                ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%s Receive New Messages: %s %n&quot;</span>, Thread.currentThread().getName(), msgs);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  Launch the consumer instance.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;Consumer Started.%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 25 行，我们还增加了 consumer.setNamesrvAddr(“127.0.0.1:9876”) 代码块，指明 Consumer 使用的 RocketMQ Namesrv 。</p><p>然后，右键运行，RocketMQ Consumer 就启动完成。输入日志如下：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">08:17:20.362 [main] DEBUG i.n.u.i.l.InternalLoggerFactory - Using SLF4J as the default logging framework</span><br><span class="line">Consumer Started.</span><br></pre></td></tr></table></figure><p><b style="color:orange">如有消息堆积，则会在启动时刷刷出现消费消息的日志</b><br><b>再来一问，这里为何指定的不是Broker，而是Namesrv？</b></p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-Transaction-MVCC</title>
      <link href="/2019/05/07/MySQL-Transaction-MVCC/"/>
      <url>/2019/05/07/MySQL-Transaction-MVCC/</url>
      
        <content type="html"><![CDATA[<h1 id="事务ACID"><a href="#事务ACID" class="headerlink" title="事务ACID"></a>事务ACID</h1><p>事务的四大特性，Atomicity(原子性), Consistency(一致性), Isolation(隔离性), Durability(持久性)。</p><h2 id="A（原子性）"><a href="#A（原子性）" class="headerlink" title="A（原子性）"></a>A（原子性）</h2><p>一个事务的操作，要么全部执行，要么全部不执行。</p><h2 id="C（一致性）"><a href="#C（一致性）" class="headerlink" title="C（一致性）"></a>C（一致性）</h2><p>事务总是从一个一致的状态转换到另一个一致的状态。在事务开始之前和结束之后，数据库的完整性约束没有被破坏。</p><h2 id="I（隔离性）"><a href="#I（隔离性）" class="headerlink" title="I（隔离性）"></a>I（隔离性）</h2><p>隔离性决定了一个事务的修改结果在什么时候能够被其他事务看到。隔离性的概念，离不开并发控制（concurrency control）、可串行化（serializability）、锁（lock）等概念。</p><h2 id="D（持久性）"><a href="#D（持久性）" class="headerlink" title="D（持久性）"></a>D（持久性）</h2><p>事务一旦提交，所有的变化都是永久的，即使发生宕机等故障，数据库也能将数据恢复。持久性保证的是事务系统的高可靠性，而非高可用。事务本身并不保证高可用性，需要一些系统共同配合来完成。</p><h2 id="事务特性的实现"><a href="#事务特性的实现" class="headerlink" title="事务特性的实现"></a>事务特性的实现</h2><p>MySQL事务的原子性和持久性，靠redo log实现，redo log称为重做日志，通常是物理日志，记录的是页的物理修改操作。<br>一致性则用undo log来保证，undo log是回滚日志，是逻辑日志，根据每行纪录进行记录。<br>两种日志的作用都可以视为一种恢复操作，redo恢复的是提交事务修改的页操作，而undo回滚行记录到某个特定的版本。</p><h1 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h1><p>SQL标准定义的四个隔离级别：</p><ul><li><p>Read Uncommitted（读未提交，RU）<br>可以读到其它未提交事务导致的数据变更。最低的隔离级别，存在脏读的问题。</p></li><li><p>Read Committed（读已提交，RC）<br>可以读到已提交的事务导致的数据变更，解决了RU的脏读问题，但存在不可重复读的问题。</p></li><li><p>Repeatable Read（可重复读，RR）<br>InnoDB存储引擎默认支持的隔离级别便是Repeatable Read。可重复读，解决了RC的不可重复读问题，但也可能存在幻读的问题。InnoDB在RR级别下，使用Next-Key Lock算法，可以避免幻读的产生，所以说，在RR级别下已经能完全保证事务的最高隔离性要求，也就是以下的Serializable级别。</p></li><li><p>Serializable（串行化）<br>最高的隔离级别，事务间串行化操作，可以理解为事务间无并发。</p></li></ul><p>隔离级别由上至下依次为越来越高，而隔离级别越低则事务请求的锁就越少，或者锁保持的时间就越短。这就是为何大多数数据库系统默认的事务隔离级别是Read Committed（读已提交）。</p><h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><p>并发的任务对同一个临界资源进行操作，如果不采取措施，可能导致不一致，故必须进行并发控制(Concurrency Control)。</p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>如Java中的锁一样，利用普通锁的互斥性是保证一致性的常用手段，本质上一种串行化的执行过程。<br>普通的锁，体现的是独占性：</p><blockquote><ul><li>操作数据前，锁住，实施互斥，不允许其他的并发任务操作;</li><li>操作完成后，释放锁，让其他任务执行;</li></ul></blockquote><p>这种方式简单粗暴，但性能上可以有优化的空间，于是，出现新的锁种类：</p><blockquote><ul><li>共享锁(Share Locks，记为S锁)，读取数据时加S锁</li><li>排他锁(eXclusive Locks，记为X锁)，修改数据时加X锁</li></ul></blockquote><p>共享锁之间不互斥，也就是：读读可并行<br>排他锁与任何锁都互斥，也就是：写读、写写都不可并行</p><p>排他锁的劣在于，一旦有写，对读也存在串行化的影响，没法提高并发。而事实上可以优化，读可以不受写阻塞。数据多版本就是为了提高并发的一种优化手段。</p><h1 id="数据多版本"><a href="#数据多版本" class="headerlink" title="数据多版本"></a>数据多版本</h1><p>核心原理在于：读与写操作的数据，副本隔离不一致</p><ul><li>写任务发生时，将数据克隆一份，以版本号区分;</li><li>写任务操作新克隆的数据，直至提交;</li><li>并发读任务可以继续读取旧版本的数据，不至于阻塞;</li></ul><p><b>基于同一个初始版本v0，写任务将克隆一份数据副本，进行修改，修改后的数据视为新版本v1，但写任务未提交前，所有读任务都读取初始版本v0，不会受写任务阻塞。</b></p><p>提高并发的演进思路，就在于此：</p><p>普通锁，本质是串行执行<br>读写锁，可以实现读读并发<br>数据多版本，可以实现读写并发</p><h2 id="Redo-log的必要性"><a href="#Redo-log的必要性" class="headerlink" title="Redo log的必要性"></a>Redo log的必要性</h2><p>Redo log用于实现事务的持久性（ACID里的D）。数据库事务提交后，必须将更新后的数据刷到磁盘上，以保证ACID特性。但这种数据落盘的方式，是随机写，性能较低，如果每次数据落盘都立马操作这种随机写，便会影响吞吐量。于是，默认通过“提交时强制写日志”（Force Log at Commit）的机制进行优化（当然，也可以设置为不强制写日志），<b>也就是说，必须在将事务的数据变更行为记入redo log并进行日志持久化后，再等事务的commit操作完成后，这才算事务完成。</b></p><p>Redo log记录的两个阶段分别是：</p><ol><li>先写入文件缓存 </li><li>后必须进行一次fsync操作（确保持久化）</li></ol><p>日志的写入采取文件末尾追加的方式，也就是顺序写，而后再定期（较短的时间间隔）fsync落盘，<b>顺序写比之随机写，性能得到大大的提升</b>。</p><p>假如某一时刻，数据库崩溃，还没来得及刷盘的数据，在数据库重启后，会重做redo日志文件里的内容，以保证已提交事务对数据产生的影响都刷到磁盘上。</p><h2 id="Undo-log的必要性"><a href="#Undo-log的必要性" class="headerlink" title="Undo log的必要性"></a>Undo log的必要性</h2><p>Undo log用以保证原子性（A）与一致性（C），以及配合实现innoDB的MVCC机制。</p><p>数据库事务未提交时，会将事务修改数据的镜像(即修改前的旧版本)存放到undo日志里，当事务回滚时，或者数据库奔溃时，可以利用undo日志，即旧版本数据，撤销未提交事务对数据库产生的影响。</p><blockquote><p>对于insert操作，undo日志记录新数据的PK(ROW_ID)，回滚时直接删除;<br>对于delete&#x2F;update操作，undo日志记录旧数据row，回滚时直接恢复</p></blockquote><p>而两类操作存放数据的buffer是不同的。除了回滚操作，undo的另一作用便是为MVCC机制提供数据的历史版本回溯。</p><p><b>PS：为什么说undo log是逻辑日志？</b><br>Undo log的回滚机制，只是保证所有数据变更行为被逻辑上取消了，也就是根据undo log找到数据变更行为，把对应的逆反行为执行上，即成功回滚。<b>对于每个delete行为，则执行insert作回滚；每个update，则执行相反的update把数据恢复回去；而每个insert，则执行delete</b>，但是这样并不会把物理存储结构的变化给变更回去，譬如，用户执行了insert 10W条记录的一个事务，会导致表空间增大，但在rollback完成后，仅仅是表数据记录回滚，表空间的大小并不会因此而收缩。<b>而为了保证undo log的持久性，undo log的写入操作也会引发redo log的产生。</b></p><h1 id="多版本并发控制（MVCC）"><a href="#多版本并发控制（MVCC）" class="headerlink" title="多版本并发控制（MVCC）"></a>多版本并发控制（MVCC）</h1><h2 id="回溯到数据历史版本"><a href="#回溯到数据历史版本" class="headerlink" title="回溯到数据历史版本"></a>回溯到数据历史版本</h2><p>首先InnoDB每一行数据还有一个DB_ROLL_PT的回滚指针，用于指向该行修改前的上一个历史版本。<br>事实上，MySQL给每行数据添加了三个隐藏字段，分别是该行的隐式行ID（DB_ROW_ID），事务号（DB_TRX_ID）和上述的回滚指针。<br><img src="/images/post-mysql-transaction-mvcc/2019%E2%80%8E05%E2%80%8E15%E2%80%8E0%E2%80%8F%E2%80%8E73339.png"></p><p>当插入一条新数据时，记录上对应的回滚指针为NULL，表明没有历史版本。</p><p><img src="/images/post-mysql-transaction-mvcc/2019%E2%80%8E05%E2%80%8E15%E2%80%8E0%E2%80%8F%E2%80%8E70926.png"><br>更新记录时，原记录将被放入到undo表空间中，并通过DB_ROLL_PT指向该记录。MySQL就是根据记录上的回滚段指针及事务ID判断记录是否可见，如果不可见则按照DB_ROLL_PT继续回溯查找。</p><h2 id="Read-View判断行记录是否可见"><a href="#Read-View判断行记录是否可见" class="headerlink" title="Read View判断行记录是否可见"></a>Read View判断行记录是否可见</h2><p>Read View用来判断是否为当前执行事务所见，从而达到对事务之间的数据可见性控制。<br>当开始一个事务或者每个查询语句执行时，把当前系统中活动的事务的ID都拷贝到一个列表，这个列表中最早的事务ID是tmin，最晚的事务ID为tmax，这个列表为Read View。当读到一行数据时，该行上面当前事务ID（DB_TRX_ID）记为tid0（也就是最后一次对数据进行修改的事务的ID），当前行数据是否可见的判断逻辑如图：<br><img src="/images/post-mysql-transaction-mvcc/2019%E2%80%8E05%E2%80%8E07%E2%80%8E013537.png"></p><blockquote><p>READ COMMITTED<br>事务内的每个查询语句执行时都会重新创建Read View，这样就会产生不可重复的现象。</p></blockquote><blockquote><p>REPEATABLE READ<br>事务开始时创建Read View，在事务结束这段时间内，每一次查询都不会重新创建Read View，从而实现了可重复读。</p></blockquote><h2 id="InnoDB为何能够支持高并发"><a href="#InnoDB为何能够支持高并发" class="headerlink" title="InnoDB为何能够支持高并发"></a>InnoDB为何能够支持高并发</h2><p>回滚段里的数据，其实是历史数据的快照(snapshot)，这些数据是不会被修改，select可以肆无忌惮的并发读取他们。</p><p>快照读(Snapshot Read)，这种一致性不加锁的读(Consistent Nonlocking Read)，就是InnoDB并发如此之高的核心原因之一。</p><p>这里的一致性是指，事务读取到的数据，要么是事务开始前就已经存在的数据(当然，是其他已提交事务产生的)，要么是事务自身插入或者修改的数据。</p><p>普通的select语句都是快照读，显式加锁（select for update&#x2F;select lock in share mode）的select语句不属于快照读。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/2019/04/22/AOP/"/>
      <url>/2019/04/22/AOP/</url>
      
        <content type="html"><![CDATA[<p>整合总结，备忘…</p><h1 id="What’s-AOP"><a href="#What’s-AOP" class="headerlink" title="What’s AOP"></a>What’s AOP</h1><p>Aspect Oriented Programming，面向切面编程。以 OOP 来对比理解：</p><p><b>纵向关系 OOP，横向角度 AOP</b></p><p>以 日志记录 为例，在没有AOP之前，如果需要在多个方法中进行日志记录，需要在每个方法中都重复编写同一段日志操作代码，哪怕日志操作记录的方法被封装到工具类(LogUtils)，仅需要一行调用即可，这样的操作还是对业务代码有侵入性，而类似日志统计、性能分析等这一类就被称为侵入性业务，使原本的业务逻辑代码跟日志操作这类代码有耦合，并且往往这类代码横跨并嵌入众多模块里边，在各个模块里分散得很厉害，到处都能见到，造成代码维护困难。</p>>> 从对象组织角度来讲，我们一般采用的分类方法都是使用类似生物学分类的方法，以「继承」关系为主线，我们称之为纵向，也就是OOP。设计时只使用 OOP思想可能会带来两个问题：> * 对象设计的时候一般都是纵向思维，如果这个时候考虑这些不同类对象的共性，不仅会增加设计的难度和复杂性，还会造成类的接口过多而难以维护（共性越多，意味着接口契约越多）。> * 需要对现有的对象 动态增加 某种行为或责任时非常困难。> 而AOP就可以很好地解决以上的问题，怎么做到的？除了这种纵向分类之外，我们从横向的角度去观察这些对象，无需再去到处调用 LogUtils 了，声明哪些地方需要打印日志，这个地方就是一个切面，AOP 会在适当的时机为你把打印语句插进切面。<p><img src="/images/post-aop/20190422060436.png"></p><h1 id="AOP用处"><a href="#AOP用处" class="headerlink" title="AOP用处"></a>AOP用处</h1><h2 id="参数校验和判空"><a href="#参数校验和判空" class="headerlink" title="参数校验和判空"></a>参数校验和判空</h2><p>系统之间在进行接口调用时，往往是有入参传递的，入参是接口业务逻辑实现的先决条件，有时入参的缺失或错误会导致业务逻辑的异常，大量的异常捕获无疑增加了接口实现的复杂度，也让代码显得雍肿冗长，因此提前对入参进行验证是有必要的，可以提前处理入参数据的异常，并封装好异常转化成结果对象返回给调用方，也让业务逻辑解耦变得独立。</p><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>避免到处都是申请权限和处理权限的代码。</p><h2 id="无痕埋点"><a href="#无痕埋点" class="headerlink" title="无痕埋点"></a>无痕埋点</h2><p>围绕方法调用前后进行接口调度次数统计的埋掉操作。</p><h2 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h2><p>比如全局的登录状态流程控制。</p><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>常用于方法进入前、执行结果后的日志记录。</p><h2 id="性能统计"><a href="#性能统计" class="headerlink" title="性能统计"></a>性能统计</h2><p>检测方法耗时其实已经有一些现成的工具。痛点是这些工具使用起来都比较麻烦，效率低下，而且无法针对某一个块代码或者某个指定的sdk进行查看方法耗时。可以采用 AOP 思想对每个方法做一个切点，在执行之后打印方法耗时。</p><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>声明方法，为特定方法加上事务，指定情况下（比如抛出异常）回滚事务。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>替代防御性的 try-Catch。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存某方法的返回值，下次执行该方法时，直接从缓存里获取。留意一些常用的缓存框架的使用方式，即可发现AOP的应用，譬如guava cache&#x2F;caffeine，可以在真实的DAO方法前冠上@Cacheable便可以指定方法返回值来被缓存。</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式又分<b>静态代理</b>与<b>动态代理。</b></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><blockquote><p>代理模式上，基本上有Subject角色，RealSubject角色，Proxy角色。其中：Subject角色负责定义RealSubject和Proxy角色应该实现的接口；RealSubject角色用来真正完成业务服务功能；Proxy角色负责将自身的Request请求，调用realsubject 对应的request功能来实现业务功能，自己不真正做业务。</p></blockquote><p><img src="/images/post-aop/%E2%80%8E20190%E2%80%8E4%E2%80%8E%E2%80%8E24%E2%80%8E%E2%80%8F%E2%80%8E55910.png"></p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>通常，我们会使用代理模式来实现 AOP，这就意味着代理模式可以优雅的解决侵入性业务问题。之所以优雅，其中一个点就在于，「动态」二字。较之静态，动态就体现出更加灵活，在运行时动态地对某些东西代理，代理它去做了一些其他的事情。这种动态依赖的是反射机制。因为静态代理需要预先定义好代理类的代码实现，而当大量使用静态代理时，就可能产生大量的代理类，随着类的数量及规模增大，代码维护成本也随之增大，为了解决这个问题，就有了动态地创建代理类的想法。<br><br/><br>在运行期的代码中生成二进制字节码</p><blockquote><p>由于JVM通过字节码的二进制信息加载类的，那么，如果我们在运行期系统中，遵循Java编译系统组织.class文件的格式和结构，生成相应的二进制数据，然后再把这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建一个类的能力了。</p></blockquote><p><img src="/images/post-aop/201904240%E2%80%8F%E2%80%8E55936.png"></p><p>在运行时期可以按照Java虚拟机规范对class文件的组织规则生成对应的二进制字节码。当前有很多开源框架可以完成这些功能，如ASM，Javassist。</p><blockquote><p>Proxy角色在执行代理业务的时候，无非是在调用真正业务之前或者之后做一些“额外”业务。</p></blockquote><p><img src="/images/post-aop/20190424060834.png"></p><p>上图可以看出，代理类处理的逻辑很简单：在调用某个方法前及方法后做一些额外的业务。换一种思路就是：在触发（invoke）真实角色的方法之前或者之后做一些额外的业务。那么，为了构造出具有通用性和简单性的代理类，可以将所有的触发真实角色动作交给一个触发的管理器，让这个管理器统一地管理触发。这种管理器就是Invocation Handler。</p><p>动态代理模式的结构跟上面的静态代理模式有所不同的地方，就在于多引入了一个InvocationHandler角色。</p><p>在静态代理中，代理Proxy中的方法，都指定了调用了特定的realSubject中的对应的方法：</p><p>在上面的静态代理模式下，Proxy所做的事情，无非是调用在不同的request时，调用触发realSubject对应的方法；更抽象点看，Proxy所作的事情；在Java中 方法（Method）也是作为一个对象来看待了，</p><blockquote><p>动态代理工作的基本模式就是将自己的方法功能的实现交给 InvocationHandler角色，外界对Proxy角色中的每一个方法的调用，Proxy角色都会交给InvocationHandler来处理，而InvocationHandler则调用具体对象角色的方法。如下图所示：</p></blockquote><p><img src="/images/post-aop/20190424061348.png"></p><p>在这种模式之中：代理Proxy 和RealSubject 应该实现相同的功能，这一点相当重要。（这里说的功能，可以理解为某个类的public方法）</p><p>在面向对象的编程之中，如果想要约定Proxy 和RealSubject可以实现相同的功能，有两种方式：<br>a. 一个比较直观的方式，就是定义一个功能接口，然后让Proxy 和RealSubject来实现这个接口。<br>b. 还有比较隐晦的方式，就是通过继承。因为如果Proxy继承自RealSubject，这样Proxy则拥有了RealSubject的功能，Proxy还可以通过重写RealSubject中的方法，来实现多态。</p><p>其中JDK中提供的创建动态代理的机制，是以a这种思路设计的（基于接口），而cglib 则是以b思路设计的（基于类继承）。</p><blockquote><p>资源出自动态代理的神总结文章：<a href="https://blog.csdn.net/luanlouis/article/details/24589193">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a></p></blockquote><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p><b>装饰者模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。</b>它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。<br>装饰者模式的实现上，与静态代理极为相似，都是透过增强被代理者的功能来做到扩展对象。关键的不同点在于：代理强调的是<b>为其他对象提供一种代理以控制对这个对象的访问</b>，而装饰者仅仅强调扩展，并不强调访问控制。而动态代理比装饰者模式更加灵活，被增强的对象和增强的内容都是可以更换的，动态化的。</p><h1 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h1><p>AOP具体的通知包含</p><ul><li>@Before，前置通知，执行方法前执行</li><li>@AfterReturn，返回通知，正常返回方法后执行</li><li>@After，后置通知，方法最终结束后执行，相当于finaly</li><li>@Around，环绕通知，围绕整个方法</li><li>@AfterThrowing，异常通知，抛出异常后执行<br>开发者在命中连接点时，可以通过以上不同的通知，执行对应方法。这就是AOP中的Advisor。</li></ul><p>一图胜千言：<br><img src="/images/post-aop/20190425065216.png"></p><p>辅助记忆各种通知类型：<br><img src="/images/post-aop/20190422045144.png"></p><p>具体术语包括</p><ul><li><b>Aspect</b>，切面，一个关注点的模块。<br>例子中，LogAspect就是切面。</li><li><b>JoinPoint</b>， 连接点，程序执行中的某个点，某个位置。<br>例子中，testBean.getName()是连接点。</li><li><b>PointCut</b>，切点，切面匹配连接点的点，一般与切点表达式相关，就是切面如何切点。<br>例子中，@PointCut注解就是切点表达式，匹配对应的连接点</li><li><b>Advice</b>，通知，指在切面的某个特定的连接点上执行的动作，也叫增强行为。<br>例子中，before()与after()方法中的代码。</li><li><b>TargetObject</b>，目标对象，指被切入的对象，也就是被代理的对象。<br>例子中，从ctx中取出的testBean则是目标对象。</li><li><b>Weave</b>，织入，将Advice作用在JoinPoint的过程。</li></ul><p>一图胜千言（图片源自网络）：<br><img src="/images/post-aop/20190422031720.png"></p><h1 id="Spring-AOP过程"><a href="#Spring-AOP过程" class="headerlink" title="Spring AOP过程"></a>Spring AOP过程</h1><p>1、Spring加载自动代理器AnnotationAwareAspectJAutoProxyCreator，当作一个系统组件。</p><p>2、当一个bean加载到Spring中时，会触发自动代理器中的bean后置处理</p><p>3、bean后置处理，会先扫描bean中所有的Advisor</p><p>4、然后用这些Adviosr和其他参数构建ProxyFactory</p><p>5、ProxyFactory会根据配置和目标对象的类型寻找代理的方式（JDK动态代理或CGLIG代理）</p><p>6、然后代理出来的对象放回context中，完成Spring AOP代理配置，等待被代理类的被调用</p><p>7、响应被代理类被调度，设置拦截器回调（JDK Proxy透过InvocationHandler、CGLIB透过DynamicAdvisedInterceptor完成回调）。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>以AspectJ实现为例：</p><ul><li><p>Maven POM依赖配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个待代理的业务Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">( String name )</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个切面Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut( &quot;execution(* com.xu.test.aop.TestBean.getName())&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向上面的getName()切点，透过getName()的PointCut注解指向真实被代理的方法，也就是execution里的表达式所指向的方法</span></span><br><span class="line"><span class="meta">@Before( &quot;getName()&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">( JoinPoint jp )</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">clazzName</span> <span class="operator">=</span> jp.getTarget().getClass().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line">System.out.println( <span class="string">&quot;before &quot;</span> + clazzName + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot; executing&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After( &quot;getName()&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">( JoinPoint jp )</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">clazzName</span> <span class="operator">=</span> jp.getTarget().getClass().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> jp.getSignature().getName();</span><br><span class="line">System.out.println( <span class="string">&quot;after &quot;</span> + clazzName + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot; executing&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.aspectj.AspectJAfterThrowingAdvice</span></span><br><span class="line"><span class="comment">//@AfterThrowing( throwing = &quot;ex&quot;, pointcut = &quot;getName()&quot; )</span></span><br><span class="line"><span class="comment">//public void afterThrowing( JoinPoint jp, Throwable ex ) &#123;</span></span><br><span class="line"><span class="comment">//String clazzName = jp.getTarget().getClass().getName();</span></span><br><span class="line"><span class="comment">//String methodName = jp.getSignature().getName();</span></span><br><span class="line"><span class="comment">//System.out.println( &quot;throw exception when &quot; + clazzName + &quot;.&quot; + methodName + &quot; executing&quot; );</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.aspectj.AspectJAroundAdvice</span></span><br><span class="line"><span class="comment">//@Around( value = &quot;getName()&quot; ) </span></span><br><span class="line"><span class="comment">//// 除了around通知，其余类型的通知都不能用ProceedingJoinPoint，只能用普通的JoinPoint</span></span><br><span class="line"><span class="comment">//public void around( ProceedingJoinPoint pjp  ) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//String clazzName = pjp.getTarget().getClass().getName();</span></span><br><span class="line"><span class="comment">//String methodName = pjp.getSignature().getName();</span></span><br><span class="line"><span class="comment">//System.out.println( &quot;before &quot; + clazzName + &quot;.&quot; + methodName + &quot; executing&quot; );</span></span><br><span class="line"><span class="comment">//Object result = pjp.proceed();</span></span><br><span class="line"><span class="comment">//System.out.println( &quot;after &quot; + clazzName + &quot;.&quot; + methodName + &quot; executing, result = &quot; + result );</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置业务Bean与切面Bean（aop-test.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.test.aop.TestBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.xu.test.aop.LogAspect&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试代理类执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAOP</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;aop-test.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">TestBean</span> <span class="variable">tb</span> <span class="operator">=</span> ctx.getBean( <span class="string">&quot;testBean&quot;</span>, TestBean.class );</span><br><span class="line"></span><br><span class="line">tb.setName( <span class="string">&quot;xxx&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> tb.getName();</span><br><span class="line"></span><br><span class="line">System.out.println( name );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><blockquote><p>before com.xu.test.aop.TestBean.getName executing<br>after com.xu.test.aop.TestBean.getName executing<br>xxx</p></blockquote></li></ul><p>上面的例子之所以能完成AOP的代理，只因为Spring的xml配置里面加了这一句</p><blockquote><p>&lt; aop : aspectj-autoproxy &#x2F; &gt;</p></blockquote><p>加上了这一个配置，使得整个Spring项目拥有了AOP的功能。全局搜索下aspectj-autoproxy这个字段，可以发现，是这个类AspectJAutoProxyBeanDefinitionParser解析了这个元素。</p><p>其中的parse方法调用的是AopNamespaceUtils类中的registerAspectJAnnotationAutoProxyCreatorIfNecessary。这个方法作用是初始化一个AOP专用的Bean，并且注册到Spring容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AspectJAutoProxyBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class="line">AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);</span><br><span class="line">extendBeanDefinition(element, parserContext);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="params">(</span></span><br><span class="line"><span class="params">ParserContext parserContext, Element sourceElement)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(</span><br><span class="line">parserContext.getRegistry(), parserContext.extractSource(sourceElement));</span><br><span class="line">useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);</span><br><span class="line">registerComponentIfNecessary(beanDefinition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析这三个操作，</p><p>1、第一句，注册一个AnnotationAwareAspectJAutoProxyCreator（称它为自动代理器），这个Creator是AOP的操作核心，也是扫描Bean，代理Bean的操作所在。</p><p>2、第二句，解析配置元素，决定代理的模式。其中有JDK动态代理，还有CGLIB代理。</p><p>3、第三句，作为系统组件，把Creator这个Bean，放到Spring容器中。让Spring实例化，启动这个Creator。</p><h2 id="自动代理器"><a href="#自动代理器" class="headerlink" title="自动代理器"></a>自动代理器</h2><p>自动代理器 AnnotationAwareAspectJAutoProxyCreator 继承自 AbstractAutoProxyCreator，AbstractAutoProxyCreator里边实现了BeanPostProceesor接口的postProcessAfterInitialization方法，这个方法是在一个Bean被加载并注册到Spring IOC容器后，由BeanFactory回调执行的，也就是说，<b>切面是在目标对象被实例化的时候织入目标对象的，更准确的说，切面是在目标对象的bean在完成初始实例化之后，由bean工厂回调bean的后置处理器将切面织入到目标对象中的。</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a proxy with the configured interceptors if the bean is</span></span><br><span class="line"><span class="comment"> * identified as one to proxy by the subclass.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">cacheKey</span> <span class="operator">=</span> getCacheKey(bean.getClass(), beanName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里边的wrapIfNecessary方法会生成一个新的代理对象，返回context（容器上下文）中加载。</p><p>AOP最核心的逻辑就在这个 wrapIfNecessary方法里边，里边主要是获取通知(advice&#x2F;advisor)放到一个名为specificInterceptors的数组里，然后作为参数去调用createProxy方法，创建对应的代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrap the given bean if necessary, i.e. if it is eligible for being proxied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the raw bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheKey the cache key for metadata access</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a proxy wrapping the bean, or the raw bean instance as-is</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (beanName != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="built_in">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line"><span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，这里边有两个核心方法，就是getAdvicesAndAdvisorsForBean（获取通知），还有createProxy（创建代理）</p><h2 id="获取通知"><a href="#获取通知" class="headerlink" title="获取通知"></a>获取通知</h2><p>getAdvicesAndAdvisorsForBean，顾名思义，就是获取被代理的Bean所关联的advice及advisor，自然地，这里有个疑问，advice与advisor是什么关系，为什么获取通知不是只需要获取advice即可？Spring使用org.springframework.aop.Advisor接口表示切面的概念，当完成对目标对象方法的增强行为操作(也就是通知，Advice)和切入点（Point）的设计开发之后，需要一个对象将目标对象、增强行为和切入点三者结合起来，而Advisor(通知器)就是一个实现这个功能的对象，即通过Advisor通知器，可以定义哪些目标对象的哪些方法在什么地方使用这些增强的行为。简单来讲，<b>Advisor&#x3D;Advice+Point。</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Advisor</span> &#123;    </span><br><span class="line">    <span class="comment">//获取切面的通知Advice    </span></span><br><span class="line">    Advice <span class="title function_">getAdvice</span><span class="params">()</span>;    </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//判断这个通知是否和某个特定的实例对象相关    </span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPerInstance</span><span class="params">()</span>;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>事实上，debug进去AbstractAdvisorAutoProxyCreator对getAdvicesAndAdvisorsForBean的实现代码，可以看到，其实这里确实只是获取Advisor通知器而已，如上文说的，每个Advisor对象持有一个Advice通知，一步步debug，进入到AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors()，找到BeanFactoryAspectJAdvisorsBuilder中的buildAspectJAdvisors方法，这个方法里边就是寻找AspectBean，然后返回AspectBean中的所有Advisor的过程实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Look for AspectJ-annotated aspect beans in the current bean factory,</span></span><br><span class="line"><span class="comment"> * and return to a list of Spring AOP Advisors representing them.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Creates a Spring Advisor for each AspectJ advice method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of &#123;<span class="doctag">@link</span> org.springframework.aop.Advisor&#125; beans</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isEligibleBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title function_">buildAspectJAdvisors</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;String&gt; aspectNames = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">aspectNames = <span class="built_in">this</span>.aspectBeanNames;</span><br><span class="line"><span class="keyword">if</span> (aspectNames == <span class="literal">null</span>) &#123;</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Advisor&gt;();</span><br><span class="line">aspectNames = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">String[] beanNames =</span><br><span class="line">BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<span class="built_in">this</span>.beanFactory, Object.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// We must be careful not to instantiate beans eagerly as in this</span></span><br><span class="line"><span class="comment">// case they would be cached by the Spring container but would not</span></span><br><span class="line"><span class="comment">// have been weaved</span></span><br><span class="line">Class&lt;?&gt; beanType = <span class="built_in">this</span>.beanFactory.getType(beanName);</span><br><span class="line"><span class="keyword">if</span> (beanType == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">aspectNames.add(beanName);</span><br><span class="line"><span class="type">AspectMetadata</span> <span class="variable">amd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectMetadata</span>(beanType, beanName);</span><br><span class="line"><span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line"><span class="type">MetadataAwareAspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BeanFactoryAspectInstanceFactory</span>(<span class="built_in">this</span>.beanFactory, beanName);</span><br><span class="line">List&lt;Advisor&gt; classAdvisors = <span class="built_in">this</span>.advisorFactory.getAdvisors(factory);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">&#125;</span><br><span class="line">advisors.addAll(classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Per target or per this.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName +</span><br><span class="line"><span class="string">&quot;&#x27; is a singleton, but aspect instantiation model is not singleton&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">MetadataAwareAspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PrototypeAspectInstanceFactory</span>(<span class="built_in">this</span>.beanFactory, beanName);</span><br><span class="line"><span class="built_in">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">advisors.addAll(<span class="built_in">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Advisor&gt;();</span><br><span class="line"><span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">List&lt;Advisor&gt; cachedAdvisors = <span class="built_in">this</span>.advisorsCache.get(aspectName);</span><br><span class="line"><span class="keyword">if</span> (cachedAdvisors != <span class="literal">null</span>) &#123;</span><br><span class="line">advisors.addAll(cachedAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">MetadataAwareAspectInstanceFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="built_in">this</span>.aspectFactoryCache.get(aspectName);</span><br><span class="line">advisors.addAll(<span class="built_in">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>譬如，例子中的LogAspect就是AspectBean，它定义了Before与After两个通知（或者说增强行为），那么最终便返回LogAspect中的Before与After对应的Advisor通知器。</p><h2 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create an AOP proxy for the given bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanClass the class of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> specificInterceptors the set of interceptors that is</span></span><br><span class="line"><span class="comment">    * specific to this bean (may be empty, but not null)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> targetSource the TargetSource for the proxy,</span></span><br><span class="line"><span class="comment">    * already pre-configured to access the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the AOP proxy for the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #buildAdvisors</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> Object <span class="title function_">createProxy</span><span class="params">(</span></span><br><span class="line"><span class="params">           Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">           AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="built_in">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">       &#125;</span><br><span class="line">　　　　　</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *这里是与后面的代理拦截器链调用的逻辑有关</span></span><br><span class="line"><span class="comment"> * ProxyFactory本质上就是一个ProxyConfig，它透过多层继承，最终继承到了ProxyConfig</span></span><br><span class="line"><span class="comment"> * 继承链路是：ProxyFactory -&gt; ProxyCreatorSupport -&gt; AdvisedSupport -&gt; ProxyConfig</span></span><br><span class="line"><span class="comment"> * 所以这里new一个ProxyFactory其实就是创建一个ProxyConfig对象，</span></span><br><span class="line"><span class="comment"> * 这个ProxyConfig对象将会存储与目标对象相匹配的advisor，这就是所谓的织入。</span></span><br><span class="line"><span class="comment"> * 等到调用目标对象的时候再将advisor取出来包装（转换）成拦截器。最后组成拦截器链。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">       <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">       proxyFactory.copyFrom(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">                </span><br><span class="line">　　　　　　　　　　proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/** 这里是指定拦截器（specificInterceptors）包装成advisor。</span></span><br><span class="line"><span class="comment"> * 这个specificInterceptors是作为这个方法的参数传进来的。</span></span><br><span class="line"><span class="comment"> * 也就是说在这之前就已经将与目标对象相匹配的拦截器构建好了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">       Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">       <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">           <span class="comment">//这里就是织入，将与目标对象相匹配的advisor存储到ProxyConfig对象中。</span></span><br><span class="line">           proxyFactory.addAdvisor(advisor);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       proxyFactory.setTargetSource(targetSource);</span><br><span class="line">       customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">       proxyFactory.setFrozen(<span class="built_in">this</span>.freezeProxy);</span><br><span class="line">       <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">           proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>把Advisor丢到proxyFactory（ProxyConfig）之后，最后要从proxyFactory里获取一个代理对象。也就是，ProxyFactory的getProxy方法，一路debug进去方法，最终可以在DefaultAopProxyFactory中createAopProxy的实现中，看到代理对象是怎么被生成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">AopProxyFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException &#123;</span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopConfigException</span>(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line"><span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyFactory会根据配置与目标对象的类型，选择用JDK动态代理，还是CGLIB的代理，代理后的对象会放回context中，然后等到程序执行时，会直接调用这个代理类。<br>留意到这里的JDK动态代理 or CGLIB动态代理的选择逻辑，体现到了<b>目标为接口时使用JDK动态代理，目标为类时使用CGLIB动态代理</b>的意思。<br><br><br>至此，整个代理的织入、连接过程就已完成。接下来的问题是，调用时怎么给目标类（被代理类）作访问拦截的。</p><h1 id="AOP代理拦截"><a href="#AOP代理拦截" class="headerlink" title="AOP代理拦截"></a>AOP代理拦截</h1><p>上面的代码分析中，已经知道，在Spring AOP通过JDK的Proxy方式或者CGLIB方式生成代理对象的时候，相关的拦截器已经生成并配置到代理对象中去了。<br>那么，拦截器的回调，是怎么设置的呢？<br>有两种方式：</p><ul><li>JDK的Proxy方式生成代理对象：JdkDynamicAopProxy会通过连接点（ReflectiveMethodInvocation）来调用拦截器链中的拦截器（也就是调用通知方法）</li><li>CGLIB方式生成代理对象：根据CGLIB使用要求，通过DynamicAdvisedInterceptor来完成回调。</li></ul><p>在《Spring技术内幕（第2版）》中有截取到两种方式的拦截器在Spring代码中的实现。</p><h2 id="JdkDynamicAopProxy的invoke拦截"><a href="#JdkDynamicAopProxy的invoke拦截" class="headerlink" title="JdkDynamicAopProxy的invoke拦截"></a>JdkDynamicAopProxy的invoke拦截</h2><p>具体实现看org.springframework.aop.framework.JdkDynamicAopProxy.invoke(Object, Method, Object[])源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of &#123;<span class="doctag">@code</span> InvocationHandler.invoke&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Callers will see exactly the exception thrown by the target,</span></span><br><span class="line"><span class="comment"> * unless a hook method throws an exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">MethodInvocation invocation;</span><br><span class="line"><span class="type">Object</span> <span class="variable">oldProxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">setProxyContext</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="built_in">this</span>.advised.targetSource;</span><br><span class="line">Class&lt;?&gt; targetClass = <span class="literal">null</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line"><span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line"><span class="keyword">return</span> hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy.class) &#123;</span><br><span class="line"><span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="built_in">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">method.getDeclaringClass().isAssignableFrom(Advised.class)) &#123;</span><br><span class="line"><span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="built_in">this</span>.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object retVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到目标对象的地方</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里获取到定义好的拦截器链</span></span><br><span class="line"><span class="comment">// 这里的this.advised是个AdvisedSupport类型（继承ProxyConfig），就是一个ProxyConfig</span></span><br><span class="line"><span class="comment">// 进去getInterceptorsAndDynamicInterceptionAdvice方法，便会发现上文提到的Advisor转换成拦截器的过程</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="built_in">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有设定拦截器（拦截器链为空），那么就直接调用target的对应方法</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果有拦截器的设定，那么需要调用拦截器之后才调用目标对象的相应方法</span></span><br><span class="line"><span class="comment">// 通过构造一个ReflectiveMethodInvocation对象来实现</span></span><br><span class="line">invocation = <span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// 沿着拦截器链继续前进（执行）</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line"><span class="keyword">if</span> (retVal != <span class="literal">null</span> &amp;&amp; retVal == target &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) &#123;</span><br><span class="line">retVal = proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="literal">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopInvocationException</span>(</span><br><span class="line"><span class="string">&quot;Null return value from advice does not match primitive return type for: &quot;</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">targetSource.releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine a list of &#123;<span class="doctag">@link</span> org.aopalliance.intercept.MethodInterceptor&#125; objects</span></span><br><span class="line"><span class="comment"> * for the given method, based on this configuration.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> method the proxied method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetClass the target class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List of MethodInterceptors (may also include InterceptorAndDynamicMethodMatchers)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line"><span class="comment">// 这里作了缓存，把已有的interceptor链存起来，除了首次要生成，后续获取都是走的缓存，节省时间</span></span><br><span class="line"><span class="comment">// 这个interceptor链的生成是由advisorChainFactory完成的，在这里使用的是DefaultAdvisorChainFactory</span></span><br><span class="line"><span class="type">MethodCacheKey</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodCacheKey</span>(method);</span><br><span class="line">List&lt;Object&gt; cached = <span class="built_in">this</span>.methodCache.get(cacheKey);</span><br><span class="line"><span class="keyword">if</span> (cached == <span class="literal">null</span>) &#123;</span><br><span class="line">cached = <span class="built_in">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line"><span class="built_in">this</span>, method, targetClass);</span><br><span class="line"><span class="built_in">this</span>.methodCache.put(cacheKey, cached);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cached;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorChainFactory</span> <span class="keyword">implements</span> <span class="title class_">AdvisorChainFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(</span></span><br><span class="line"><span class="params">Advised config, Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is somewhat tricky... We have to process introductions first,</span></span><br><span class="line"><span class="comment">// but we need to preserve order in the ultimate list.</span></span><br><span class="line">List&lt;Object&gt; interceptorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;(config.getAdvisors().length);</span><br><span class="line">Class&lt;?&gt; actualClass = (targetClass != <span class="literal">null</span> ? targetClass : method.getDeclaringClass());</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasIntroductions</span> <span class="operator">=</span> hasMatchingIntroductions(config, actualClass);</span><br><span class="line"><span class="type">AdvisorAdapterRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : config.getAdvisors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line"><span class="comment">// Add it conditionally.</span></span><br><span class="line"><span class="type">PointcutAdvisor</span> <span class="variable">pointcutAdvisor</span> <span class="operator">=</span> (PointcutAdvisor) advisor;</span><br><span class="line"><span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123;</span><br><span class="line"><span class="comment">// Advisor入参，获取到已经注册好的方法拦截器</span></span><br><span class="line">MethodInterceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line"><span class="type">MethodMatcher</span> <span class="variable">mm</span> <span class="operator">=</span> pointcutAdvisor.getPointcut().getMethodMatcher();</span><br><span class="line"><span class="keyword">if</span> (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) &#123;</span><br><span class="line"><span class="keyword">if</span> (mm.isRuntime()) &#123;</span><br><span class="line"><span class="comment">// Creating a new object instance in the getInterceptors() method</span></span><br><span class="line"><span class="comment">// isn&#x27;t a problem as we normally cache created chains.</span></span><br><span class="line"><span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">interceptorList.add(<span class="keyword">new</span> <span class="title class_">InterceptorAndDynamicMethodMatcher</span>(interceptor, mm));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line"><span class="type">IntroductionAdvisor</span> <span class="variable">ia</span> <span class="operator">=</span> (IntroductionAdvisor) advisor;</span><br><span class="line"><span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> interceptorList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cglib2AopProxy的intercept拦截"><a href="#Cglib2AopProxy的intercept拦截" class="headerlink" title="Cglib2AopProxy的intercept拦截"></a>Cglib2AopProxy的intercept拦截</h2><p>具体实现看org.springframework.aop.framework.Cglib2AopProxy.DynamicAdvisedInterceptor.intercept(Object, Method, Object[], MethodProxy)源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * General purpose AOP callback. Used when the target is dynamic or when the</span></span><br><span class="line"><span class="comment"> * proxy is not frozen.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DynamicAdvisedInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DynamicAdvisedInterceptor</span><span class="params">(AdvisedSupport advised)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.advised = advised;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">oldProxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">setProxyContext</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">Class</span> <span class="variable">targetClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = getTarget();</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">targetClass = target.getClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从advised(AdvisedSupport类型，继承自ProxyConfig)中取得配置好的通知</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="built_in">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">Object retVal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有配置的AOP通知，那么就直接调用target的对应方法</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">retVal = methodProxy.invoke(target, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 通过CglibMethodInvocation来启动advice通知</span></span><br><span class="line">retVal = <span class="keyword">new</span> <span class="title class_">CglibMethodInvocation</span>(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</span><br><span class="line">&#125;</span><br><span class="line">retVal = massageReturnTypeIfNecessary(proxy, target, method, retVal);</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP拦截器的调用"><a href="#AOP拦截器的调用" class="headerlink" title="AOP拦截器的调用"></a>AOP拦截器的调用</h2><p>两种方式对拦截器的调用都是在ReflectiveMethodInvocation中通过proceed方法实现。在proceed方法中逐个实现拦截器的拦截方法。每个拦截器在执行之前，需要对代理方法完成一个匹配判断（即Pointcut切点中需要进行matches匹配过程）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// 从索引为-1的拦截器开始调用，并按序递增</span></span><br><span class="line"><span class="comment">// 如果拦截器链中的拦截器迭代调用完毕，这里开始调用target的函数，这个函数时通过反射机制完成的</span></span><br><span class="line"><span class="comment">// 这个函数具体实现在AopUtils.invokeJoinpointUsingReflection方法中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.currentInterceptorIndex == <span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">interceptorOrInterceptionAdvice</span> <span class="operator">=</span></span><br><span class="line"><span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="built_in">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line"><span class="comment">// 这里对拦截器进行动态匹配的判断</span></span><br><span class="line"><span class="comment">//这里是触发进行匹配的地方，如果和定义好的PointCut匹配，那么这个advice将会得到执行</span></span><br><span class="line"><span class="type">InterceptorAndDynamicMethodMatcher</span> <span class="variable">dm</span> <span class="operator">=</span></span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="built_in">this</span>.method, <span class="built_in">this</span>.targetClass, <span class="built_in">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，整个AOP实现的来龙去脉，便走完了个大致流程。</p><h1 id="JVM级别的AOP"><a href="#JVM级别的AOP" class="headerlink" title="JVM级别的AOP"></a>JVM级别的AOP</h1><p><a href="https://www.jianshu.com/p/b72f66da679f">基于Java Instrument的Agent实现</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.csdn.net/luanlouis/article/details/24589193">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a></li><li><a href="https://juejin.im/post/5c01533de51d451b80257752">一文读懂 AOP | 你想要的最全面 AOP 方法探讨</a></li><li><a href="https://zackku.com/spring-aop/">从源码入手，一文带你读懂Spring AOP面向切面编程</a></li><li><a href="https://link.jianshu.com/?t=https://book.douban.com/subject/10470970/">Spring设计内幕（第2版）》计文柯</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LRU Cache</title>
      <link href="/2019/04/20/LRUCache/"/>
      <url>/2019/04/20/LRUCache/</url>
      
        <content type="html"><![CDATA[<p>记录，备忘…</p><h1 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h1><p>LRU，即Least Recently Used（最近被使用得最少的），是一种常见的缓存淘汰策略，意思是把缓存中最久未被使用的值优先考虑淘汰。而基于这种淘汰策略的缓存就是所谓的LRU Cache。</p><h1 id="LinkedHashMap–现成的LRU"><a href="#LinkedHashMap–现成的LRU" class="headerlink" title="LinkedHashMap–现成的LRU"></a>LinkedHashMap–现成的LRU</h1><p>Java中的LinkedHashMap，可以简单理解为LinkedList+HashMap，Java中的LinkedList为双向链表，可以维护一个逻辑，就是按一个方向把元素按一个维度来线性排序：表头总是指向当前最近访问的节点，表尾总是指向当前最久未被访问的节点，也就是LRU。</p><h1 id="LinkedHashMap数据结构示意图"><a href="#LinkedHashMap数据结构示意图" class="headerlink" title="LinkedHashMap数据结构示意图"></a>LinkedHashMap数据结构示意图</h1><h2 id="从HashMap角度"><a href="#从HashMap角度" class="headerlink" title="从HashMap角度"></a>从HashMap角度</h2><p>基于HashMap角度看，就是加了双向指针的HashMap：<br><img src="/images/post-lrucache/20190421112238.png"></p><h2 id="从LinkedList角度"><a href="#从LinkedList角度" class="headerlink" title="从LinkedList角度"></a>从LinkedList角度</h2><p>基于LinkedList角度看，可以简化为链表加上散列：<br><img src="/images/post-lrucache/20190421112209.png"></p><h2 id="Entry节点"><a href="#Entry节点" class="headerlink" title="Entry节点"></a>Entry节点</h2><p><img src="/images/post-lrucache/%E2%80%8E20190%E2%80%8E4%E2%80%8E21%E2%80%8E142102.png"></p><p><strong>以上仅仅是帮助理解的示意图，并非严谨数据结构图</strong></p><h1 id="双向链表简单实现"><a href="#双向链表简单实现" class="headerlink" title="双向链表简单实现"></a>双向链表简单实现</h1><p>基于HashMap，再实现双向链表的基本操作：</p><ul><li>添加操作：由于是添加操作，就意味着可能出现容量不够，也就是链表已满，那么就要执行淘汰策略：删除最久未被访问的节点。</li><li>删除操作：把指定节点移除掉，移除前需调整涉及到的各个指针的指向，包括当前节点的前节点的后指针、后节点的前指针，链表的头指针、尾指针。</li><li>请求读取元素：<ul><li>命中：更新表头指针，即把当前命中的节点作为头节点；</li><li>未命中：如果是单纯只读操作，而又未命中，则不会引起任何变化。</li></ul></li></ul><p>[LRUCache.java](https://github.com/FGU123/LRU/blob/master/src/main/java/com/xu/tlab/service/impl/self/LRUCache.java)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义节点结构简单实现双向链表，节点包含前后双向指针，基于HashMap存储节点达到时间复杂度O(1)的目的，最差为O(1+s)，s为Map.size</span></span><br><span class="line"><span class="comment"> * 额外维护两个指针：链表的头、尾指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;K, Node&gt; map = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头指针</span></span><br><span class="line"><span class="keyword">private</span> Node head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾指针</span></span><br><span class="line"><span class="keyword">private</span> Node tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">()</span> &#123;</span><br><span class="line">map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;K, Node&gt;( capacity );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">( <span class="type">int</span> capacity )</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;K, Node&gt;( capacity );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  定义 节点的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前指针</span></span><br><span class="line"><span class="keyword">private</span> Node prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后指针</span></span><br><span class="line"><span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">( K key, V value )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get( key );</span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == node ) &#123;</span><br><span class="line">node = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">node.key = key;</span><br><span class="line">&#125;</span><br><span class="line">node.value = value;</span><br><span class="line"><span class="keyword">if</span>( removeEldest( node ) ) &#123;</span><br><span class="line">removeTail();</span><br><span class="line">&#125;</span><br><span class="line">map.put( key, node );</span><br><span class="line">moveToHead( node );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义成方法，让它可以开放出去，让使用者重写来自定义逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldest</span><span class="params">( Node eldest )</span> &#123;</span><br><span class="line"><span class="keyword">return</span> map.size() &gt;= capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeTail</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( tail != <span class="literal">null</span> ) &#123;</span><br><span class="line">remove( tail );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管好4个指针即可： 链表的头指针、尾指针，当前节点的前节点的后指针、后节点的前指针，</span></span><br><span class="line"><span class="comment"> * 因为是当前节点是被删除的节点，所以自己的前后指针不需要管</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 1. 如果当前节点是尾节点，把尾指针往前挪一个节点</span></span><br><span class="line"><span class="comment"> * 2. 如果当前节点是头节点，把头指针往后挪一个节点</span></span><br><span class="line"><span class="comment"> * 3. 如果当前节点的前指针不为空，前节点的后指针指向后节点</span></span><br><span class="line"><span class="comment"> * 4. 如果当前节点的后指针不为空，后节点的前指针指向前节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">( Node node )</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( tail == node ) &#123;</span><br><span class="line">tail = tail.prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( head == node ) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( node.prev != <span class="literal">null</span> ) &#123;</span><br><span class="line">node.prev.next = node.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( node.next != <span class="literal">null</span> ) &#123;</span><br><span class="line">node.next.prev = node.prev;</span><br><span class="line">&#125;</span><br><span class="line">map.remove( node.key );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">( K key )</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get( key );</span><br><span class="line"><span class="keyword">if</span>( node != <span class="literal">null</span> ) &#123;</span><br><span class="line">moveToHead( node );</span><br><span class="line"><span class="keyword">return</span> node.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管好最多6个指针即可： </span></span><br><span class="line"><span class="comment"> * 链表的头指针(head)、尾指针(tail)，</span></span><br><span class="line"><span class="comment"> * 被移位的节点的前节点的后指针(node.prev.next)、后节点的前指针(node.next.prev)，</span></span><br><span class="line"><span class="comment"> * 被移位的节点自己的前后指针(node.prev，node.next) </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">( Node node )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头尾指针为空，说明在挪头操作之前，一个节点都没有，而当前节点为新增节点，则只需要把头尾指针都指向当前节点即可</span></span><br><span class="line"><span class="keyword">if</span>( tail == <span class="literal">null</span> || head == <span class="literal">null</span> ) &#123;</span><br><span class="line">head = tail = node;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前节点已经为头节点，则啥也不需要做，直接返回</span></span><br><span class="line"><span class="keyword">if</span>( head == node ) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前节点是尾节点，则挪头操作后必然要把尾指针需要改为尾节点的上一个节点</span></span><br><span class="line"><span class="keyword">if</span>( tail == node ) &#123;</span><br><span class="line">tail = tail.prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前节点的前节点不为空，则把前节点的后指针指向当前节点的前节点</span></span><br><span class="line"><span class="keyword">if</span>( node.prev != <span class="literal">null</span> ) &#123;</span><br><span class="line">node.prev.next = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前节点的后节点不为空，则把后节点的前指针指向当前节点的前节点</span></span><br><span class="line"><span class="keyword">if</span>( node.next != <span class="literal">null</span> ) &#123;</span><br><span class="line">node.next.prev = node.prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来是挪头操作：</span></span><br><span class="line"><span class="comment">// 1. 前边已经判断过了头节点是存在的，那么把头节点的前指针由null指向为当前节点</span></span><br><span class="line"><span class="comment">// 2. 当前节点的后指针指向头节点</span></span><br><span class="line"><span class="comment">// 3. 当前节点的前指针指向null</span></span><br><span class="line"><span class="comment">// 4. 头指针指向当前节点</span></span><br><span class="line">head.prev = node;</span><br><span class="line">node.next = head;</span><br><span class="line">node.prev = <span class="literal">null</span>;</span><br><span class="line">head = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么使用双向链表"><a href="#为什么使用双向链表" class="headerlink" title="为什么使用双向链表"></a>为什么使用双向链表</h1><h2 id="队列行不行？"><a href="#队列行不行？" class="headerlink" title="队列行不行？"></a>队列行不行？</h2><p>不行，队列只能做到先进先出，但是如果是访问排在中间的数据，此时无法把中间的数据移动到顶端。</p><h2 id="单链表行不行？"><a href="#单链表行不行？" class="headerlink" title="单链表行不行？"></a>单链表行不行？</h2><p>如果用单链表，能保证实现最新或最热节点放到一侧，但是最久未被使用要放到另一侧，如果只有表头一个指针，那么获取尾节点，则需要从头指针一直到尾，遍历整个单链表，而双向链表同时还有尾指针，尾指针可以帮助直接定位到最后一个节点。更关键的是，在做移动&#x2F;删除节点的操作的时候，当需要把当前节点的前节点的后指针指向为后节点时（node.prev.next&#x3D;node.next），获取前节点的操作就只需要透过前指针获取即可，但如果是在单链表中，则需要进行更费时的遍历查找操作来获取到前节点。</p><h1 id="为什么使用HashMap"><a href="#为什么使用HashMap" class="headerlink" title="为什么使用HashMap"></a>为什么使用HashMap</h1><p>HashMap是用于降低寻找节点的时间复杂度的。主要是因为可以快速定位（散列查找的最优时间复杂度是O(1)）。配合LinkedList，定位+移位节点的操作的效率变得更高。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>为了保证Cache的读写在多线程下正确，也就是线程安全，最简单粗暴的就是给引起指针变化的操作及遍历操作全加锁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Netty</title>
      <link href="/2019/04/14/About-Netty/"/>
      <url>/2019/04/14/About-Netty/</url>
      
        <content type="html"><![CDATA[<p>总结，备忘...</p><h1 id="What’s-Netty"><a href="#What’s-Netty" class="headerlink" title="What’s Netty"></a>What’s Netty</h1><p>Netty是一个 Java 开源框架，一个提供异步的、事件驱动的网络应用程序框架工具，作用是封装了JAVA NIO所支持的多路复用的I&#x2F;O模型，还封装了Java BIO支持的步网络通信模型，对应用程序层面屏蔽网络底层的实现细节，让应用开发者快速开发高性能，高可靠性的网络服务器和客户端程序。</p><h1 id="Why-Netty"><a href="#Why-Netty" class="headerlink" title="Why Netty"></a>Why Netty</h1><p>本质上Netty是一个框架，要成为一个主流的框架，首要条件，必须是好用。<br>尽管Java NIO、Java AIO框架己经实现了各主流操作系统的底层支持，但比之Netty还是不够，Netty能提供的好处有更多：</p><ol><li>对信息格式的良好封装<br>基于责任链模式的编码和解码功能，提供Java原生NIO没有提供的诸如针对Protocol Buffer、JSON等信息格式的封装。</li><li>处理很多上层特有服务<br>框架除了本身要兼容各类操作系统的I&#x2F;O底层实现，还要提供例如客户端权限，还有上面提到的信息格式封装、简单的数据读取等上层服务。事实上，不仅NIO，netty也有对BIO框架的再次封装，Netty框架是一个面向上层业务实现进行封装的“业务层”框架。</li><li>解决Java原生NIO的bug</li></ol><ul><li>空轮询问题<br>Linux内核上出现的“不能阻塞导致CPU的使用率100%”问题<br>Bug出现在 Linux 系统环境，大致是说 Java NIO 框架在实现 Linux 内核 kernel 2.6+ 中的 epoll 模型时，Selector.select(timeout)方法不能阻塞指定的 timeout 时间，导致 CPU 100% 的情况。Java官方称在JDK 7版本中问题被解决，Netty 框架在JDK 轩的环境下在 JavaNIO 框架封装之上解决了这 Bug。</li><li>空指针问题<br>发生于Selector.open()的NPE<br>JDK-6427854 : (se) NullPointerException in Selector.open() <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6427854">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6427854</a><br>这个问题在 Netty 框架中，在负责进行 Java NIO Selector 的 NIOEventLoop 类中得到了解决。</li></ul><ol start="4"><li>解决半包&#x2F;粘包问题<br><a href="#半包-粘包问题">半包&#x2F;粘包问题</a></li></ol><h1 id="多路复用I-O模型"><a href="#多路复用I-O模型" class="headerlink" title="多路复用I&#x2F;O模型"></a>多路复用I&#x2F;O模型</h1><p>Netty的核心在于封装了多路复用的I&#x2F;O模型<br>—-<a href="/2018/11/20/Linux-IO-Types/#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">I&#x2F;O模型</a></p><h2 id="白话Reactor模型"><a href="#白话Reactor模型" class="headerlink" title="白话Reactor模型"></a>白话Reactor模型</h2><p>经典的现实举例:<br>一个餐厅同时有100位客人到店，他们到店后要做的第一件事情就是点菜。但是问题来了，餐厅老板为了节约人力成本目前<strong>只有一位大堂服务员拿着唯一的一本菜单等待客人进行服务。</strong></p><p>那么最粗暴（但是最简单）的方法是（记为方法A）：无论有多少客人等待点餐，服务员都把仅有的一份菜单递给其中一位客人，然后站在客人身旁等待这个客人完成点菜过程。在记录客人点菜内容后，把点菜记录交给后堂厨师。然后再来到第二位客人面前将以上工作方式重复一次……然后是第X位客人。很明显，这样设置服务流程是不行的。因为随后的80位客人，在等待超时后就会离店，还会给差评。</p>于是，餐厅老板通过一种办法（记为方法B）进行了改进。老板立刻雇用99名服务员，同时印制99本新的菜单。每一名服务员手持一份菜单负责1位客人（关键不只在于服务员，还在于菜单。因为没有菜单客人也无法点菜）。在客人点完菜后，记录点菜内容交给后堂厨师（当然为了更高效，后堂厨师最好也有100名）。这样每一位客人享受的都是 VIP 服务，客人当然不会走还会给好评。但是高昂的人力成本就让人头疼了。<p>另外一种办法（记为方法C），就是改进点菜的方式：当客人到店后，自己领取一份菜单想好自己要点的菜后，再呼叫服务员。服务员站在客人身边记录点菜内容。将菜单递给厨师的过程也要进行改进，并不是每一份菜单记录好以后 都要交给后堂厨师。<strong>服务员可以记录好多份菜单后，同时交给厨师。</strong>那么这种方式，对于老板来说人力成本是最低的；对于客人来说，虽然不再享受VIP服务井且要等待一定的时间，但是这些都是可接受的，对于服务员来说，基本上他的时间都没有浪费，被老板榨干了每一滴血汗。</p>如果你是老板，会采用哪种方式呢？<p>到店情况：并发量。到店情况不理想时，一名服务员一份菜单，当然是足够了。所以不同的老板在不同的场合下，将会灵活选择服务员和菜单的配置。客人：客户端请求。点餐内容：客户端发送的实际数据。老板：操作系统。人力成本：系统资源。菜单：文件状态描述符。操作系统对于一个进程能够同时持有的文件状态描述符的个数是有限制的，在Linux系统中可用$ulimit -n 命令查看这个限制值，当然也可以（并且应该）进行内核参数调整。服务员：操作系统内核用于网络 I/O 操作的线程（内核线程）。厨师：应用程序线程（厨房就是应用程序进程）。餐单传递方式：包括了阻塞式和非阻塞式两种。方法A: 阻塞式／非阻塞式，同步I/O。方法B: 使用线程（池）进行处理的阻塞式／非阻塞式同步I/O。方法C: 多路复用网络 I/O 模型。</p><h2 id="Reactor线程模型"><a href="#Reactor线程模型" class="headerlink" title="Reactor线程模型"></a>Reactor线程模型</h2><p>基于Reactor处理模式中，定义以下三种角色:</p><ul><li>Reactor将I&#x2F;O事件分派给对应的Handler</li><li>Acceptor处理客户端新连接，并分派请求到处理器链中</li><li>Handlers执行非阻塞读&#x2F;写任务</li></ul><h3 id="单Reactor单线程模型"><a href="#单Reactor单线程模型" class="headerlink" title="单Reactor单线程模型"></a>单Reactor单线程模型</h3><p><img src="/images/post-about-netty/20190414235342.png"></p><p>这是最基本的单Reactor单线程模型。其中Reactor线程，负责多路分离套接字，有新连接到来触发connect事件之后，交由Acceptor进行处理，有IO读写事件之后交给hanlder处理。</p><p>Acceptor主要任务就是构建handler，在获取到和client相关的SocketChannel之后，绑定到相应的hanlder上，对应的SocketChannel有读写事件之后，基于racotor分发,hanlder就可以处理了（所有的IO事件都绑定到selector上，由Reactor分发）。</p><p>该模型适用于处理器链中业务处理组件能快速完成的场景。不过，这种单线程模型不能充分利用多核资源，所以实际使用的不多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 等待事件到来，分发事件处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Reactor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="title function_">Reactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">​</span><br><span class="line">          <span class="type">SelectionKey</span> <span class="variable">sk</span> <span class="operator">=</span></span><br><span class="line">                  serverSocket.register(selector,</span><br><span class="line">                          SelectionKey.OP_ACCEPT);</span><br><span class="line">          <span class="comment">// attach Acceptor 处理新连接</span></span><br><span class="line">          sk.attach(<span class="keyword">new</span> <span class="title class_">Acceptor</span>());</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                  selector.select();</span><br><span class="line">                  <span class="type">Set</span> <span class="variable">selected</span> <span class="operator">=</span> selector.selectedKeys();</span><br><span class="line">                  <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> selected.iterator();</span><br><span class="line">                  <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                      it.remove();</span><br><span class="line">                      <span class="comment">//分发事件处理</span></span><br><span class="line">                      dispatch((SelectionKey) (it.next()));</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">              <span class="comment">//do something</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(SelectionKey k)</span> &#123;</span><br><span class="line">          <span class="comment">// 若是连接事件获取是acceptor</span></span><br><span class="line">          <span class="comment">// 若是IO读写事件获取是handler</span></span><br><span class="line">          <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> (Runnable) (k.attachment());</span><br><span class="line">          <span class="keyword">if</span> (runnable != <span class="literal">null</span>) &#123;</span><br><span class="line">              runnable.run();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 连接事件就绪,处理连接事件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Acceptor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">SocketChannel</span> <span class="variable">c</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">              <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;<span class="comment">// 注册读写</span></span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">Handler</span>(c, selector);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">​</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理读写业务逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READING</span> <span class="operator">=</span> <span class="number">0</span>, WRITING = <span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> state;</span><br><span class="line">      <span class="keyword">final</span> SocketChannel socket;</span><br><span class="line">      <span class="keyword">final</span> SelectionKey sk;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(SocketChannel socket, Selector sl)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="built_in">this</span>.state = READING;</span><br><span class="line">          <span class="built_in">this</span>.socket = socket;</span><br><span class="line">          sk = socket.register(selector, SelectionKey.OP_READ);</span><br><span class="line">          sk.attach(<span class="built_in">this</span>);</span><br><span class="line">          socket.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">              read();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == WRITING) &#123;</span><br><span class="line">              write();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">          process();</span><br><span class="line">          <span class="comment">//下一步处理写事件</span></span><br><span class="line">          sk.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">          <span class="built_in">this</span>.state = WRITING;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">          process();</span><br><span class="line">          <span class="comment">//下一步处理读事件</span></span><br><span class="line">          sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">          <span class="built_in">this</span>.state = READING;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * task 业务处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//do something</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="单Reactor多线程模型"><a href="#单Reactor多线程模型" class="headerlink" title="单Reactor多线程模型"></a>单Reactor多线程模型</h3><p><img src="/images/post-about-netty/20190415000931.png"><br>相对于第一种单线程的模式来说，在处理业务逻辑，也就是获取到IO的读写事件之后，交由线程池来处理，这样可以减小主reactor的性能开销，从而更专注的做事件分发工作了，从而提升整个应用的吞吐。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 多线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MultiThreadHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READING</span> <span class="operator">=</span> <span class="number">0</span>, WRITING = <span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> state;</span><br><span class="line">      <span class="keyword">final</span> SocketChannel socket;</span><br><span class="line">      <span class="keyword">final</span> SelectionKey sk;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">      <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.</span><br><span class="line">  newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">MultiThreadHandler</span><span class="params">(SocketChannel socket, Selector sl)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="built_in">this</span>.state = READING;</span><br><span class="line">          <span class="built_in">this</span>.socket = socket;</span><br><span class="line">          sk = socket.register(selector, SelectionKey.OP_READ);</span><br><span class="line">          sk.attach(<span class="built_in">this</span>);</span><br><span class="line">          socket.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (state == READING) &#123;</span><br><span class="line">              read();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == WRITING) &#123;</span><br><span class="line">              write();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//任务异步处理</span></span><br><span class="line">          executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">          <span class="comment">//下一步处理写事件</span></span><br><span class="line">          sk.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">          <span class="built_in">this</span>.state = WRITING;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//任务异步处理</span></span><br><span class="line">          executorService.submit(() -&gt; process());</span><br><span class="line">​</span><br><span class="line">          <span class="comment">//下一步处理读事件</span></span><br><span class="line">          sk.interestOps(SelectionKey.OP_READ);</span><br><span class="line">          <span class="built_in">this</span>.state = READING;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * task 业务处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="多Reactor多线程模型"><a href="#多Reactor多线程模型" class="headerlink" title="多Reactor多线程模型"></a>多Reactor多线程模型</h3><p><img src="/images/post-about-netty/20190415001239.png"><br>第三种模型比起第二种模型，是将Reactor分成两部分:</p><ol><li>mainReactor负责监听server socket，用来处理新连接的建立，将建立的socketChannel指定注册给subReactor。</li><li>subReactor维护自己的selector, 基于mainReactor 注册的socketChannel多路分离IO读写事件，读写网 络数据，对业务处理的功能，另外扔给worker线程池来完成。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 多work 连接事件Acceptor,处理连接事件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MultiWorkThreadAcceptor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">// cpu线程数相同多work线程</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">workCount</span> <span class="operator">=</span>Runtime.getRuntime().availableProcessors();</span><br><span class="line">      SubReactor[] workThreadHandlers = <span class="keyword">new</span> <span class="title class_">SubReactor</span>[workCount];</span><br><span class="line">      <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">nextHandler</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">MultiWorkThreadAcceptor</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.init();</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">          nextHandler = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; workThreadHandlers.length; i++) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  workThreadHandlers[i] = <span class="keyword">new</span> <span class="title class_">SubReactor</span>();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              &#125;</span><br><span class="line">​</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">SocketChannel</span> <span class="variable">c</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">              <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;<span class="comment">// 注册读写</span></span><br><span class="line">                  <span class="keyword">synchronized</span> (c) &#123;</span><br><span class="line">                      <span class="comment">// 顺序获取SubReactor，然后注册channel </span></span><br><span class="line">                      <span class="type">SubReactor</span> <span class="variable">work</span> <span class="operator">=</span> workThreadHandlers[nextHandler];</span><br><span class="line">                      work.registerChannel(c);</span><br><span class="line">                      nextHandler++;</span><br><span class="line">                      <span class="keyword">if</span> (nextHandler &gt;= workThreadHandlers.length) &#123;</span><br><span class="line">                          nextHandler = <span class="number">0</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 多work线程处理读写业务逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">SubReactor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Selector mySelector;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">//多线程处理业务逻辑</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">workCount</span> <span class="operator">=</span>Runtime.getRuntime().availableProcessors();</span><br><span class="line">      <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(workCount);</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">SubReactor</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="comment">// 每个SubReactor 一个selector </span></span><br><span class="line">          <span class="built_in">this</span>.mySelector = SelectorProvider.provider().openSelector();</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 注册chanel</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          sc.register(mySelector, SelectionKey.OP_READ | SelectionKey.OP_CONNECT);</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//每个SubReactor 自己做事件分派处理读写事件</span></span><br><span class="line">                  selector.select();</span><br><span class="line">                  Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">                  Iterator&lt;SelectionKey&gt; iterator = keys.iterator();</span><br><span class="line">                  <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                      <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                      iterator.remove();</span><br><span class="line">                      <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                          read();</span><br><span class="line">                      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                          write();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">​</span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">​</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//任务异步处理</span></span><br><span class="line">          executorService.submit(() -&gt; process());</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//任务异步处理</span></span><br><span class="line">          executorService.submit(() -&gt; process());</span><br><span class="line">      &#125;</span><br><span class="line">​</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * task 业务处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//do IO ,task,queue something</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></li></ol><h2 id="典型的多路复用-I-O-实现"><a href="#典型的多路复用-I-O-实现" class="headerlink" title="典型的多路复用 I&#x2F;O 实现"></a>典型的多路复用 I&#x2F;O 实现</h2><p>多路复用 I&#x2F;O 模型在应用层工作效率比我们俗称的 I&#x2F;O 模型快的本质原因是，前者不再使用操作系统级别的“同步 ”模型，OS操作进程&#x2F;线程的挂起与恢复涉及的用户态与核心态的切换会引起较大的开销。Linux 操作系统环境下，多路复用 I&#x2F;O 型就是技术人员通常简称的 NIO 技术。多路复用目前具体的实现主要包括四种： select、poll、epoll、kqueue。<br><img src="/images/post-about-netty/20190414232933.png"></p><h3 id="多路复用I-O技术的优缺点"><a href="#多路复用I-O技术的优缺点" class="headerlink" title="多路复用I&#x2F;O技术的优缺点"></a>多路复用I&#x2F;O技术的优缺点</h3><h4 id="优"><a href="#优" class="headerlink" title="优"></a>优</h4><p>多路复用 I&#x2F;O 技术由操作系统提供支持，并提供给各种高级语言进行使用。它针对阻塞式同步 I&#x2F;O 和非阻塞式同步 I&#x2F;O 而言有很多优势，最直接的效果就是它绕过了 I&#x2F;O 在操作系统层面的 accept() 方法的阻塞问题。</p><ul><li>使用 多路复用I&#x2F;O 技术 ，应用程序就可以不用再单纯使用多线程技术来解决并发 I&#x2F;O 处理的性能问题了（针对操作系统内核 I&#x2F;O 管理模块和应用程序进程而言都是这样的）。在实际业务的处理中，应用程序进程还是需要引入（一般由线程池支持）多线程技术的* 同一个端口可以处理多种网络协议。例如，使用 ServerSocketChannel 类的服务器端口监昕，既可以接收到TCP协议又可以接收 UDP协议内容。也就是说端口的数据接收规则只和 Selector 注册的需要关心的事件有关。</li><li>操作系统级别的优化： 多路复用I&#x2F;O技术可以使操作系统级别在一个端口上能够同时接受多个客户端的I&#x2F;O时间，同时具有之前我们讲到的阻塞式同步I&#x2F;O的所有特点。Selector的一部分作用更相当于“轮询代理器”。</li><li>依然是同步I&#x2F;O模型： 多路复用I&#x2F;O，是基于<strong>操作系统级别对“同步I&#x2F;O”的实现。</strong>这里所说的“同步I&#x2F;O”，简单一句话解释就是：只有上层（包括上层的某种代理机制）系统询问“我”是否有某个事件发生了，否则“我”不会主动告诉上层系统事件发生了。</li></ul><h4 id="缺"><a href="#缺" class="headerlink" title="缺"></a>缺</h4><ol><li>多路复用 I&#x2F;O 技术最适用的是“高并发”场景，所谓高并发是指1毫秒内至少同时有成百上千个连接请求准备就绪，其他情况下多路复用 I&#x2F;O 技术发挥不出它的明显优势。</li><li>使用Java NIO 进行功能实现，相对于传统的 Socket 套接宇实现要复杂一些，所以实际应用中，需要根据自己的业务需求进行技术选择。</li></ol><h1 id="Netty的几个重要概念"><a href="#Netty的几个重要概念" class="headerlink" title="Netty的几个重要概念"></a>Netty的几个重要概念</h1><ol><li>Netty线程机制<br/>采用的多Reactor模型：Boss线程+Work线程<p>Boss线程负责发现连接到服务器的新的 Channel (SocketServerChannel 的 ACCEPT事件），<strong>并且将这个 Channel经过检查后注册到 Work 连接池的某个 EventLoop 线程中.而当 Work 线程发现操作系统有它感兴趣的 I/O 事件时</strong>（例如SocketChannel的READ事件），<strong>则调用相应的ChannelHandler事件</strong>。当某个channel失效后（例如显示调用ctx.close()），这个channel将从绑定的EventLoop中剔除。</p>在Netty中，如果我们使用的是Java NIO框架实现的对多路复用I/O模型的支持，那么进行这个循环的是NIOEventLoop类（processSelectedKeyPlain方法、processSelectedKey方法）。另外这个类中Netty解决了空轮询bug及Selector.open()的NPE。<p>一个Work线程池的线程将按照底层封装Java NIO框架中Selector的事件状态，决定要执行ChannelHandler中的哪一个事件方法（Netty中包括了channelRegistered、channelUnregistered、channelActive、channelInactive等事件方法）。执行完成后，Work线程将一直轮询直到操作系统回复下一个它所管理的channel发生了新的I/O事件。</p></li><li>ByteBuf<br>Netty 重写了 Java NIO 框架中的缓存结构，井将这个结构应用在更上层的封装中。<blockquote><ul><li>io.netty.buffer.EmptyByteBuf：这是一个初始容量和最大容量都为0的缓存区。一般我们用这种缓存区描述“没有任何处理结果”，并将其向下 Handler 传递。</li><li>io.netty.buffer.ReadOnlyByteBuf：这是一个不允许任何“写请求”的只读缓存区。一般通过Unpooled.unmodifiableBuffer(ByteBuf)方法将某一个可正常读写缓存区转变而成。如果我们需要在下一个 Handler 理的过程中禁止写入任何数据到缓存区，那么就可以在这个 Ha ndler 中进行“只读缓存区”的转换。</li><li>io.netty.buffer.UnpooledDirectByteBuf：基本的 Java NIO 框架的 ByteBuffer 封装。直接使用这个缓存区实现来处理 Handler 事件。</li><li>io.netty.buffer.PooledByteBuf: Netty 4.x 版本的缓存新特性。主要是为了减少之前unpoolByteBuf 在创建和销毁时的 GC 时间。</li></ul></blockquote></li><li>Channel<br>Channel可译为通道。你可以使用 Java NIO 中的 Channel 去初步理解它，但实际上它的意义和 Java NIO 中的通道意义还不 样。我们可以解释成 “更抽象、更丰富”。<blockquote><ul><li>Netty中的channel专门指网络通信，不同于Java NIO中的Channel，后者还有指类似FileChannel本地文件的I&#x2F;O通道。</li><li>Netty更加抽象，它不仅封装了多路复用I&#x2F;O模型，还封装了Java BIO模型。</li></ul></blockquote></li><li>ChannelPipeline和ChannelHandler<br>Netty 中的每一个 Channel ，都有一个独立的 ChannelPipeline 中文名称为“通道水管”。只不过这个水管是双向的，里面流淌着数据，数据可以通过这个“水管”流入到服务器，也可以通过这个“水管”从服务器流出。<br>(1) 责任链和适配器的应用<br>(2) ChannellnboundHandler 类举例<blockquote><ul><li>HttpRequestDecoder</li><li>ByteArrayDecoder</li><li>DelimiterBasedFrameDecoder</li><li>ProtobuIDecoder和ProtobufVarint32FrameDecoder等标准数据格式解析处理器</li></ul></blockquote>(3) ChannelOutboundHandler 类举例<blockquote><ul><li>HttpResponseEncoder</li><li>ByteArrayEncoder</li><li>ProtobutEncoder、ProtobufVarint32LengthFieldPrepender、MarshallingEncoder、JZlibEncoder等。</li></ul></blockquote></li></ol><h1 id="半包-粘包问题"><a href="#半包-粘包问题" class="headerlink" title="半包&#x2F;粘包问题"></a>半包&#x2F;粘包问题</h1><p>在TCP连接中，指令和指令之间没有间隔，接收方可能为了接收两条连贯的指令，一共做了三次的接收，而第二次接收会收到一部分的包1的部分内容和包2的部分内容。</p><p>半包是指，接收方应用程序在接收信息时，没有收到一个完整的信息格式块。粘包是指，接收方应用程序在接收信息时，除了接收到发送方应用程序发送的某一个完整数据信息描述，还接收到了发送方应用程序发送的下一个数据信息的一部分。</p><p>半包和粘包问题产生的根本原因是TCP本质上没有“数据块”的概念，而是一连串的数据流。<strong>在应用程序层面上、业务层面上，我们自行定义的“数据块”在TCP层面上并不被协议认可。</strong></p><p>这个问题只会发生在TCP协议进行连续发送数据时（TCP长连接），由于UDP都是有边界的数据报，所以UDP不会出现这个问题。而TCP短连接也不会出现这问题，因为发送完一个指令信息后连接就断开了，不会再发送第二个指令数据。</p><p><strong>半包/粘包是一个应用层问题。</strong>要解决半包/粘包问题，就是在应用程序层面建立协商一致的信息还原依据。常见的有两种方式：* 消息定长即保证每一个完整的信息描述的长度都是一定的，这样无论 TCP/IP 协议如何进行分片，数据接收方都可以按照固定长度进行消息的还原。* 增加分隔符在完整的一块数据结束后增加协商一致的分隔符（例如增加一个回车符）</p>Netty提供了多种解码器的封装帮助解决半包/粘包问题。> * FixedLengthFrameDecoder> * DelimiterBasedFrameDecoder> * LineBasedFrameDecoder> * 甚至针对不同的数据格式， Netty都提供了半包和粘包问题的现成解决方式。例如 ProtobuN arint32FrameDecoder 解码器，就是专门解决 Protobuf 数据格式在 TCP 长连接传输时的半包问题的。<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>《高性能服务系统构建与实战》–银文杰&#x2F;编著<br><a href="https://juejin.im/post/5b4570cce51d451984695a9b">【NIO系列】——之Reactor模型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图解Spring事务传播类型</title>
      <link href="/2019/03/19/Spring-Transaction-Propagation/"/>
      <url>/2019/03/19/Spring-Transaction-Propagation/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h1><p>Spring管理的事务是逻辑事务，而且物理事务和逻辑事务最大差别就在于事务传播行为，事务传播行为用于指定在多个事务方法间调用时，事务是如何在这些方法间传播的。</p><p>下面以a.save()里调用了b.save()举例，事务方法之间调用时事务如何传播。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.XXX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">b.save();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(propagation=Propagation.XXX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-REQUIRED"><a href="#1-REQUIRED" class="headerlink" title="1. REQUIRED"></a>1. REQUIRED</h2><p>默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。如下图：<br><img src="/images/post-Spring-Transaction-Propagation/required-20190319055811.png"><br>由于两个方法属于同一个物理事务，如果发生回滚，则两者都回滚。</p><h2 id="2-SUPPORTS"><a href="#2-SUPPORTS" class="headerlink" title="2. SUPPORTS"></a>2. SUPPORTS</h2><p>顾名思义就是可以支持事务，如果b.save()在事务环境中运行，则以事务形式运行，否则以非事务运行。<br><strong><br>注：这里所谓的非事务形式的数据库访问只是指没有显式的事务边界而已，就是说数据库操作只是 auto-commit 的方式，在数据库的物理事务概念上，还是有事务的。譬如在这里，a.save()调用b.save()，如果当a是非事务执行（非手动提交事务，而是auto-commit），那么b.save()在执行前，a.save()的物理事务就要先提交，而同时，b.save()的物理事务也是auto-commit，这样才是这里说的b.save()以非事务方法运行，而不是指b.save()不开启数据库物理事务。而所谓的b.save()在事务环境中运行，是指当b的外层a.save()本身是手动提交事务时，b.save()也会包含在a.save()里边的同一个事务去执行，也就是说a.save()与b.save()的SQL操作在同一个物理事务中。<br></strong><br><img src="/images/post-Spring-Transaction-Propagation/supports-20190319055812.png"></p><h2 id="3-MANDATORY"><a href="#3-MANDATORY" class="headerlink" title="3. MANDATORY"></a>3. MANDATORY</h2><p>必须在一个事务中运行，也就是说，b.save()只能在已有事务的方法中被调用，否则会抛异常。<br><img src="/images/post-Spring-Transaction-Propagation/mandatory-20190319055813.png"></p><h2 id="4-REQUIRES-NEW"><a href="#4-REQUIRES-NEW" class="headerlink" title="4. REQUIRES_NEW"></a>4. REQUIRES_NEW</h2><p>总是会创建一个新事务（包括物理事务），该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。如下图：<br><img src="/images/post-Spring-Transaction-Propagation/requires_new-20190319055814.png"><br>两个方法之间既不属于同一个逻辑事务也不属于同一个物理事务。</p><h2 id="5-NOT-SUPPORTED"><a href="#5-NOT-SUPPORTED" class="headerlink" title="5. NOT_SUPPORTED"></a>5. NOT_SUPPORTED</h2><p>顾名思义不支持事务，当处于存在事务的上下文环境中运行时，b.save()会暂停当前已开启的事务，意味着a.save()的事务被挂起直至b.save()以非事务方法运行完毕后，a.save()的事务继续执行。<br><img src="/images/post-Spring-Transaction-Propagation/not_supported-20190319055815.png"></p><h2 id="6-NEVER"><a href="#6-NEVER" class="headerlink" title="6. NEVER"></a>6. NEVER</h2><p>绝不能在事务环境中运行，如果a.save()里声明了使用事务，而b.save()的事务类型声明为never，那么只能以抛异常告终。<br><img src="/images/post-Spring-Transaction-Propagation/never-20190319055816.png"><br>与Mandatory相反，Mandatory意思是强制要求上下文中有事务（外层有事务），否则抛异常，而Never是上下文中不能有事务（外层无事务），否则抛异常。</p><h2 id="7-NESTED"><a href="#7-NESTED" class="headerlink" title="7. NESTED"></a>7. NESTED</h2><p>嵌套事务支持。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。<br><img src="/images/post-Spring-Transaction-Propagation/nested-20190319055817.png"><br>Nested和RequiresNew的区别：</p><ul><li>RequiresNew每次都创建新的独立的物理事务，而Nested只有一个物理事务；Nested嵌套事务回滚或提交不会导致外部事务回滚或提交，但外部事务回滚将导致嵌套事务回滚，而RequiresNew由于都是全新的事务，所以之间是无关联的</li><li>Nested使用JDBC 3的保存点实现，即如果使用低版本驱动将导致不支持嵌套事务<p><strong>使用嵌套事务，必须确保具体事务管理器实现的nestedTransactionAllowed属性为true，否则不支持嵌套事务，如DataSourceTransactionManager默认支持，而HibernateTransactionManager默认不支持，需要我们来开启。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Transaction </tag>
            
            <tag> Propagation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于页缓存技术提高中间件读写性能的应用</title>
      <link href="/2019/03/17/About-OS-Page-Cache/"/>
      <url>/2019/03/17/About-OS-Page-Cache/</url>
      
        <content type="html"><![CDATA[<h1 id="页缓存"><a href="#页缓存" class="headerlink" title="页缓存"></a>页缓存</h1><p>在计算机系统中，页面缓存（有时也称为磁盘缓存）是用于源自诸如硬盘驱动器（HDD）或固态驱动器（SSD）的辅助存储设备的页面的透明缓存。操作系统将页面缓存保留在主存储器（RAM，内存）的其他未使用部分中，从而更快地访问缓存页面的内容和达到整体性能改进。页面缓存在具有分页内存管理的内核中实现，并且对应用程序大多是透明的。通常是由操作系统将所有未直接分配给应用程序的物理内存用于页面缓存。</p><p>以linux系统为例，linux中页缓存的本质就是对于磁盘中的部分数据在内存中保留一定的副本，使得应用程序能够快速的读取到磁盘中相应的数据，并实现不同进程之间的数据共享。<p>因此，linux中页缓存的引入主要是为了解决两类重要的问题：<p>1.磁盘读写速度较慢（ms 级别);</p><p>2.实现不同进程之间或者同一进程的前后不同部分之间对于数据的共享；</p><p>在虚拟内存机制出现以前，操作系统使用块缓存机制，但是在虚拟内存出现以后操作系统管理IO的粒度更大，因此采用了页缓存机制。此后，和后备存储的数据交互普遍以页为单位。页缓存是基于页的、面向文件的一种缓存机制。<p>简单来讲，页缓存就是一种副本技术，为加速磁盘读写而在内存中保留的一份磁盘数据的副本，又称为磁盘缓存、文件系统缓存、操作系统缓存等。<p>---- [Page Cache(From Wikipedia)](https://en.wikipedia.org/wiki/Page_cache)<h2 id="页缓存在RocketMQ的应用"><a href="#页缓存在RocketMQ的应用" class="headerlink" title="页缓存在RocketMQ的应用"></a>页缓存在RocketMQ的应用</h2><h3 id="刷盘策略"><a href="#刷盘策略" class="headerlink" title="刷盘策略"></a>刷盘策略</h3><p><img src="/images/post-RocketMQ-Summary/20181118164510.jpg"><br>作为一款纯 Java 语言开发的消息引擎，RocketMQ 自主研发的存储组件，依赖 Page Cache 进行加速和堆积，意味着它的性能会受到 JVM、 GC、内核、Linux 内存管理机制、文件 IO 等因素的影响。Rocketmq中的所有消息都是持久化到硬盘的，但会使用系统PageCache加速访问，消息的落地方式是先写PageCache后刷盘，可以保证内存与磁盘都有一份数据，访问时，可以直接从内存读取。如图所示，一条消息从客户端发送出，到最终落盘持久化。</p><p>---- [RocketMQ相关总结](/2018/11/18/RocketMQ-Summary/#刷盘策略)<h2 id="Kafka的高性能写入"><a href="#Kafka的高性能写入" class="headerlink" title="Kafka的高性能写入"></a>Kafka的高性能写入</h2><h3 id="页缓存技术-磁盘顺序写"><a href="#页缓存技术-磁盘顺序写" class="headerlink" title="页缓存技术 + 磁盘顺序写"></a>页缓存技术 + 磁盘顺序写</h3><p>同RocketMQ的持久化操作的设计类似，Kafka每次接收到数据都会往磁盘上去写，而为了保证数据写入性能，Kafka也是基于操作系统的页缓存来实现文件写入的。</p><p>在消息生产端写入消息时，其实是直接写入到OS Cache（Page Cache）中，也就是说仅仅是写入到内存中，而接下来由操作系统自己决定什么时候把os cache里的数据真的刷入磁盘文件中。<p>另外，还有关键的一点，就是kafka写数据的方式是顺序写入，也就是说，仅仅将数据追加到文件的末尾，而不是在文件的随机位置来修改数据。<p>---- [Kafka如何实现每秒上百万的超高并发写入？](http://developer.51cto.com/art/201903/592916.htm)<h2 id="Elastic-Search-准实时搜索"><a href="#Elastic-Search-准实时搜索" class="headerlink" title="Elastic Search 准实时搜索"></a>Elastic Search 准实时搜索</h2><p>Elasticsearch和磁盘之间有一层称为FileSystem Cache的系统缓存（OS Cache），正是由于这层cache的存在才使得es能够拥有更快搜索响应能力。</p><p>我们都知道一个index是由若干个segment组成，随着每个segment的不断增长，我们索引一条数据后可能要经过分钟级别的延迟才能被搜索，为什么有种这么大的延迟，这里面的瓶颈点主要在磁盘。<p>持久化一个segment需要fsync操作用来确保segment能够物理的被写入磁盘以真正的避免数据丢失，但是fsync操作比较耗时，所以它不能在每索引一条数据后就执行一次，如果那样索引和搜索的延迟都会非常之大。<p>所以这里需要一个更轻量级的处理方式，从而保证搜索的延迟更小。这就需要用到上面提到的FileSystem Cache，所以在es中新增的document会被收集到indexing buffer区后被重写成一个segment然后直接写入filesystem cache中，这个操作是非常轻量级的，相对耗时较少，之后经过一定的间隔或外部触发后才会被flush到磁盘上，这个操作非常耗时。但只要sengment文件被写入cache后，这个sengment就可以打开和查询，从而确保在短时间内就可以搜到，而不用执行一个full commit也就是fsync操作，这是一个非常轻量级的处理方式而且是可以高频次的被执行，而不会破坏es的性能。<p>---- [Elastic Search的近实时搜索](https://www.elastic.co/guide/cn/elasticsearch/guide/current/near-real-time.html)<h2 id="框架的设计思想，本质大同"><a href="#框架的设计思想，本质大同" class="headerlink" title="框架的设计思想，本质大同"></a>框架的设计思想，本质大同</h2><p>由一个页缓存技术的利用可以看出，多个中间件在处理数据高性能读写问题方面的思想基本大同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MiddleWare </tag>
            
            <tag> Cache </tag>
            
            <tag> Kafka </tag>
            
            <tag> Elastic Search </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁实现去服务单点问题实践</title>
      <link href="/2019/02/17/Distributed-Lock-HA/"/>
      <url>/2019/02/17/Distributed-Lock-HA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>常见的单个应用服务需要完成某个功能模块，由于业务设计上的原因，该服务只允许一个而不能多个服务实例同时运行。但在高可用架构设计上，这存在单点问题，即一旦主机发生故障，如宕机或网络中断等，而导致服务终止，这种场景下我们希望能采用一种优雅的方式保证服务不中断。于是我们可以采用分布式锁来实现一主多备的高可用方案。</p><h2 id="一主多备"><a href="#一主多备" class="headerlink" title="一主多备"></a>一主多备</h2><p>我们可以实现服务的一主多备模式，有且仅有一个master，至少一个standby，当master节点失败后则由多个standby中选取一个作为主节点继续提供服务。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>考虑到需要有多个服务节点，但同时只允许一个服务节点运行，我们可以实现分布式锁来解决问题。</p><h3 id="分布式锁的几个要求"><a href="#分布式锁的几个要求" class="headerlink" title="分布式锁的几个要求"></a>分布式锁的几个要求</h3><ul><li>最基本要求：互斥性（唯一性），同一时间只能被一个机器节点上的一个线程获得锁。</li><li>避免死锁：可重入性。</li><li>高可用的锁获取及锁释放。</li><li>高性能的锁获取及锁释放。</li><li>阻塞性：最好是一把阻塞锁。</li></ul><h3 id="分布式锁的常见三种实现方式"><a href="#分布式锁的常见三种实现方式" class="headerlink" title="分布式锁的常见三种实现方式"></a>分布式锁的常见三种实现方式</h3><p>分布式锁的常见3种实现方式有基于数据库、缓存及zookeeper的实现，网上一抓有一大把的实现过程可以搜索，此处不详细说明，只简单说明一下各个实现的核心思路及优劣。</p><h4 id="基于数据库的实现方式"><a href="#基于数据库的实现方式" class="headerlink" title="基于数据库的实现方式"></a>基于数据库的实现方式</h4><p>核心思想在于：利用数据库表的唯一索引，以方法名字段作为唯一键，想要执行方法时，使用方法名向表中插入数据，成功则表示获得锁，执行完成后再删除对应的行数据以释放锁。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>思路简单，容易理解。</p><h5 id="问题及优化"><a href="#问题及优化" class="headerlink" title="问题及优化"></a>问题及优化</h5><ol><li>高可用及性能问题：基于数据库实现，数据库的可用性及性能直接影响分布式锁的可用性及性能。数据库要避免单点，需要双机部署、数据同步、主备切换等。</li><li>不可重入：因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据。所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程相同，若相同则直接获取锁。</li><li>没有锁失效机制：因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，导致锁一直被占用，不但其它节点无法获得锁，当服务恢复后也一直获取不到锁，所以，需要在表中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据。</li><li>非阻塞锁：获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</li></ol><p><strong>注意：这只是使用基于数据库的一种方法，使用数据库实现分布式锁还有很多其他的玩法！</strong> </p><h4 id="基于Zookeeper的实现方式"><a href="#基于Zookeeper的实现方式" class="headerlink" title="基于Zookeeper的实现方式"></a>基于Zookeeper的实现方式</h4><p>ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。基于ZooKeeper实现分布式锁的步骤如下：</p><p>（1）创建一个目录作为锁目录；<br>（2）线程A想获取锁就在锁目录下创建临时顺序节点；<br>（3）获取锁目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；<br>（4）线程B获取所有节点，判断自己不是最小节点，设置监听比自己次序小的节点；<br>（5）线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</p><p><img src="/images/post-Distributed-Lock-HA/20190317213111.jpg"></p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>Zookeeper是一个分布式协同服务，使用Zookeeper实现分布式锁具有天然优势，最大的优点是API使用简单。</p><p>建议直接使用zookeeper第三方库Curator客户端，这个客户端中封装了一个可重入的锁服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interProcessMutex.acquire(timeout, unit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        interProcessMutex.release();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        executorService.schedule(<span class="keyword">new</span> <span class="title class_">Cleaner</span>(client, path), delayTimeForClean, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它优点：</p><ol><li>解决单点问题：ZK是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。</li><li>解决不可重入问题：客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</li><li>解决锁失效问题：使用ZK可以有效让锁自动失效而释放。在创建锁的时候，客户端会在ZK中创建一个临时节点，一旦客户端获取到锁之后突然挂掉（Session连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</li><li>解决非阻塞性问题：Watch机制，客户端可以通过在ZK中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁。</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>性能问题：性能上不如使用缓存实现分布式锁。因为每次在创建锁和释放锁的过程中，都要动态创建、销毁瞬时节点来实现锁功能。ZK中创建和删除节点只能通过Leader服务器来执行，然后将数据同不到所有的Follower机器上。</li><li>并发问题：在网络抖动情况下，客户端与ZK集群的session连接断了，那么zk以为客户端宕掉了，就会删除临时节点，这时候其他客户端就可以获取到分布式锁了。就可能产生并发问题。这个问题不常见是因为zk有重试机制，一旦zk集群检测不到客户端的心跳，就会重试，Curator客户端支持多种重试策略。多次重试之后还不行的话才会删除临时节点。（所以，选择一个合适的重试策略也比较重要，要在锁的粒度和并发之间找一个平衡。）</li></ol><p>建议尽可能的使用Zookeeper来实现分布式协同服务，但如果，业务强依赖于一个Redis集群且服务并没有使用Zookeeper的意愿，不妨可以试试使用Redis。</p><h4 id="基于缓存的实现方式"><a href="#基于缓存的实现方式" class="headerlink" title="基于缓存的实现方式"></a>基于缓存的实现方式</h4><p>各种成熟的缓存产品，包括Redis，memcached以及Tair，分布式锁实现思路基本类似，以Redis举例说明核心思路：<br>（1）获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的标识值为一个随机生成的UUID，通过此标识在释放锁的时候进行判断。<br>（2）获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。<br>（3）释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。</p><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><p>性能高是最大优点，基于内存实现的缓存系统。</p><ol><li>解决单点问题：Redis既可单点部署，也支持集群部署。</li><li>解决不可重入问题：在一个线程获取到锁之后，把当前主机信息和线程信息保存起来，下次再获取之前先检查自己是不是当前锁的持有者。</li><li>解决锁失效问题：设定锁key失效时间。</li><li>非阻塞锁：可以循环多次去执行获取操作，直至获得锁。</li></ol><p>至于失效时间设多久才好？<br>Redisson给出了解决方案–Watchdog看门狗：<br>先获得锁，默认过期时间30秒，如果处理完了，走正常逻辑。 对一个值加锁之后，会在自身维护一个Watchdog后台线程，维护一个内部队列，每过10秒去重新设置一下锁Key的过期时间，这样，一个锁即使对应的进程挂掉，也就维持30秒的时间，如果没有挂，并且30秒不够用了，内部队列会不断的更新这个过期时间为30秒，保证不会出现锁饥饿的问题。<br><br/><br>以下为重设Key过期时间的核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (expirationRenewalMap.containsKey(getEntryName())) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Future&lt;Boolean&gt; future = expireAsync(internalLockLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                future.addListener(<span class="keyword">new</span> <span class="title class_">FutureListener</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(Future&lt;Boolean&gt; future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        expirationRenewalMap.remove(getEntryName());</span><br><span class="line">                        <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, future.cause());</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (future.getNow()) &#123;</span><br><span class="line">                            <span class="comment">// reschedule itself</span></span><br><span class="line">                            scheduleExpirationRenewal();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (expirationRenewalMap.putIfAbsent(getEntryName(), task) != <span class="literal">null</span>) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br/>事实上，使用Redisson，还有一个好处，就是Redisson调Redis命令的底层实现，是使用Lua脚本，这样做，是因为假设有一大坨复杂的业务逻辑，可以通过封装在Lua脚本中发送给Redis，保证这段复杂的业务逻辑执行的原子性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;Long&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> leaseTime, <span class="keyword">final</span> TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">       internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_LONG,</span><br><span class="line">                           <span class="string">&quot;local mode = redis.call(&#x27;hget&#x27;, KEYS[1], &#x27;mode&#x27;); &quot;</span> +</span><br><span class="line">                           <span class="string">&quot;if (mode == false) then &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], &#x27;mode&#x27;, &#x27;write&#x27;); &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                             <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                             <span class="string">&quot;if (mode == &#x27;write&#x27;) then &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                                     <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                                     <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                                     <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                               <span class="string">&quot;end;&quot;</span> +</span><br><span class="line">                               <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                       Arrays.&lt;Object&gt;asList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>通过超时时间来控制锁的失效时间并非十分的靠谱。譬如在指定的锁Key更新时间内网络抖动导致无法正常失效时间，被认为锁被主节点主动释放了，而实际上并没有，但备节点此时可能已抢得锁，出现多客户端获得锁的问题。</li><li>最大的问题，还是在于Redis的主从集群的复制问题。客户端1对Redis Master写入锁Key的Value，此时会异步复制给Redis Slave。一旦发生Master宕机，Redis主从切换，Slave变成了新的Master，而此时若有客户端2来尝试加锁，在新的Master上完成了加锁，而客户端1也以为自己成功加了锁，此时也出现了多客户端获得锁的问题。</li></ol><h2 id="使用Redis分布式锁去服务单点实践"><a href="#使用Redis分布式锁去服务单点实践" class="headerlink" title="使用Redis分布式锁去服务单点实践"></a>使用Redis分布式锁去服务单点实践</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;192.168.4.104:6379&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;redis&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;redis_lock&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runWithRedisLock</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> RedisUtils.getRedissonClientInstance(</span><br><span class="line">REDIS_ADDRESS, REDIS_PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonLock</span> <span class="variable">lock</span> <span class="operator">=</span> (RedissonLock) redissonClient.getLock(LOCK_KEY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步方式尝试Redis加锁操作</span></span><br><span class="line">Future&lt;Boolean&gt; tryLockAsync = lock.tryLockAsync(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 一定要通过调get方法拿到执行加锁的结果，因为是异步方式加锁，调此方法会阻塞直至拿到执行结果</span></span><br><span class="line"><span class="keyword">if</span> (tryLockAsync.get()) &#123;</span><br><span class="line"><span class="comment">// 尝试执行业务逻辑，如果发生异常，则释放锁 </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Application.runApplication(args);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">ILOG.error(<span class="string">&quot;run application exception, &quot;</span>, e);</span><br><span class="line"><span class="keyword">if</span>( lock.isHeldByCurrentThread() ) &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ILOG.info(<span class="string">&quot;lock[&#123;&#125;] is being held&quot;</span>, lock.getName());</span><br><span class="line">Application.stopApplication(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">ILOG.error(<span class="string">&quot;lock interrupted exception, &quot;</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">ILOG.error(<span class="string">&quot;lock executed exception, &quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Config;</span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.SingleServerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RedissonClient <span class="title function_">getRedissonClientInstance</span><span class="params">(String redisAddress,</span></span><br><span class="line"><span class="params">String redisPassword)</span> &#123;</span><br><span class="line">address = redisAddress;</span><br><span class="line">password = redisPassword;</span><br><span class="line"><span class="keyword">return</span> RedissonClientHolder.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedissonClientHolder</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">RedissonClient</span> <span class="variable">instance</span> <span class="operator">=</span> createRedissonClient(address,</span><br><span class="line">password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> RedissonClient <span class="title function_">createRedissonClient</span><span class="params">(String address,</span></span><br><span class="line"><span class="params">String password)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line"><span class="type">SingleServerConfig</span> <span class="variable">singleSerververConfig</span> <span class="operator">=</span> config.useSingleServer();</span><br><span class="line">singleSerververConfig.setAddress(address).setPassword(password)</span><br><span class="line">.setConnectionMinimumIdleSize(<span class="number">1</span>).setConnectionPoolSize(<span class="number">64</span>);</span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line"><span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="降级处理的实践"><a href="#降级处理的实践" class="headerlink" title="降级处理的实践"></a>降级处理的实践</h2><p>如上所述，如果Redis（或Redis集群）服务宕掉了，或者当网络抖动或Redis集群主从切换导致的各种异常导致Redis方式不可行，于是，需要做降级处理，所谓降级，就是异常情况下的备胎处理方式，这里我们先假设最容易处理的一种方式，如果系统中只有一主一从两个节点，那么我们可以简单处理，让双方错开一个定时间隔，分别使用netCat命令向对方进行端口检测，如果检测到对方节点中有正在运行的服务，则不启动甚至退出自己当前的服务。如果对方节点不在运行服务，则说明自己可以“获得锁”，便可运行服务，取代对方成为主节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，定时检测运行</span></span><br><span class="line"><span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"></span><br><span class="line">timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">runWithRedisLock(args);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">runWithNetCat(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isRunning</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设两台机器服务地址+端口分别为[对方：&quot;192.168.11.20:8080&quot;, 本机：&quot;192.168.11.21:8080&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对方的服务地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;192.168.11.20&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对方的服务端口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="string">&quot;8080&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runWithNetCat</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isRunning) &#123;</span><br><span class="line">ILOG.info(<span class="string">&quot;application is already running&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasRunner</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (netCat(ADDRESS, PORT)) &#123;</span><br><span class="line">hasRunner = <span class="literal">true</span>;</span><br><span class="line">Application.stopApplication(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!hasRunner) &#123;</span><br><span class="line">Application.runApplication(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">netCat</span><span class="params">(String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">NetUtil.netCat(host, port, <span class="keyword">new</span> <span class="title class_">byte</span>[] &#123;&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">ILOG.warn(<span class="string">&quot;net check error. &quot;</span>, e);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用服务端口检测方法的优缺点"><a href="#使用服务端口检测方法的优缺点" class="headerlink" title="使用服务端口检测方法的优缺点"></a>使用服务端口检测方法的优缺点</h3><p>这样的做法非常容易理解且操作简单，但也存在问题，譬如当两者不能互相ping通对方时，则两者可能都以为自己可以升级为主，造成脑裂现象。</p><h3 id="降级处理的更优实践"><a href="#降级处理的更优实践" class="headerlink" title="降级处理的更优实践"></a>降级处理的更优实践</h3><p>由上分析，我们得知依赖网络去简单做服务端口检测会存在不可靠，并且条件也限定在系统中只有一主一备两节点，如果存在多台节点服务，即一主多备时，我们还是要保证顺序一致性。基于这一点考虑，我们若使用数据库的实现方式，便可以满足实现上更简单、更可靠的降级要求。</p><h2 id="基于Spring-Boot的启动优化方案"><a href="#基于Spring-Boot的启动优化方案" class="headerlink" title="基于Spring Boot的启动优化方案"></a>基于Spring Boot的启动优化方案</h2><p>Spring Boot提供了 CommandLineRunner 接口，实现了 CommandLineRunner 接口的 Component 会在所有 Spring Beans 都初始化之后，SpringApplication.run() 之前执行，我们可以在这个方法里hold住服务的启动，在这里边作加锁成功的判断，从而实现一种只加载容器但不启动服务的“预加载”方案，这么做是因为，我们知道，spring应用启动的过程中，容器加载是较为耗时的，这种“待机式”的方案，可以让应用先准备好，当需要启动服务时便可更快速地进入服务状态。而除 CommandLineRunner 之外，使用ApplicationRunner也可以达到相同的目的，两者差别不大。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Zookeeper分布式锁原理图：<a href="https://juejin.im/post/5c01532ef265da61362232ed">七张图彻底讲清楚ZooKeeper分布式锁的实现原理【石杉的架构笔记】</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed </tag>
            
            <tag> HA </tag>
            
            <tag> Redis </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几张图总结几种I/O类型</title>
      <link href="/2018/11/20/Linux-IO-Types/"/>
      <url>/2018/11/20/Linux-IO-Types/</url>
      
        <content type="html"><![CDATA[<p>Unix&#x2F;Linux支持的5种I&#x2F;O类型：</p><ul><li>同步模型（synchronous IO） <ul><li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li></ul></li><li>异步IO（asynchronous IO）</li></ul><h2 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h2><h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p><img src="/images/post-IO-Types/20161010144954475.jpg"><br></br></p><h3 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h3><p><img src="/images/post-IO-Types/20161010145820444.jpg"><br></br></p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p><img src="/images/post-IO-Types/20161010150720979.jpg"><br></br></p><h3 id="信号驱动"><a href="#信号驱动" class="headerlink" title="信号驱动"></a>信号驱动</h3><p><img src="/images/post-IO-Types/20161010153821072.jpg"><br></br></p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p><img src="/images/post-IO-Types/20161010153944432.jpg"></p><h2 id="怎么理解"><a href="#怎么理解" class="headerlink" title="怎么理解"></a>怎么理解</h2><p>I&#x2F;O过程分两个阶段：</p><ol><li>数据从硬件（网卡、硬盘）拷贝到内核的内存空间。</li><li>数据从内核的内存空间拷贝到用户态的内存空间</br>为什么要分两个阶段？（撇开零拷贝不说）前提是用户态程序（应用程序）不能直接跟硬件打交道，而能与硬件打交道的就只能是内核，用户态程序要想从硬件获得数据，必须通知内核我要获得硬件中的数据，此过程称为系统调用，为第一阶段。于是，自然就有了第二阶段，数据从内核内存空间到用户态内存空间。（对用户态来讲，此过程才是I/O发生的地方）</li></ol><h2 id="概括每种I-O类型的过程"><a href="#概括每种I-O类型的过程" class="headerlink" title="概括每种I&#x2F;O类型的过程"></a>概括每种I&#x2F;O类型的过程</h2><p>OK，有了两阶段的概念后，可以简单来理解并总结每种I&#x2F;O类型的过程:<br><img src="/images/post-IO-Types/20181120062926.jpg"></p><p>一图胜千言：<br><img src="/images/post-IO-Types/20181121075237.jpg"></p><h2 id="浅谈零拷贝"><a href="#浅谈零拷贝" class="headerlink" title="浅谈零拷贝"></a>浅谈零拷贝</h2><p>既然提到零拷贝，那就粗浅地说明一下：<br>零拷贝是指，减免了数据在内核空间和用户空间来回拷贝（无cpu copy过程）。<br></br><br>用户态程序调用mmap()，磁盘上的数据会通过DMA（直接内存存取，direct memory access，一种透过DMA控制器让内存与硬盘&#x2F;网卡直接对接的IO技术，过程中无需依赖CPU的大量中断负载）被拷贝到内核缓冲区，接着操作系统会把这段内核缓冲区与应用程序共享，这种所谓的共享，方式就是mmap（内存映射，memory map），这样就不需要把内核缓冲区的内容往用户空间拷贝。用户态程序再调用write()，操作系统直接将内核缓冲区的内容拷贝到socket缓冲区中，这一切都发生在内核态，最后，socket缓冲区再把数据发到网卡去。<br></br><br>好吧，一图胜千言：<br><img src="/images/post-IO-Types/20181120064306.jpg"></p><p>OK，上面所说的DMA技术直接让内存对接硬盘IO，以及mmap让用户程序共享内核缓冲区，都可以省掉内核空间与用户空间之间的cpu copy，但是还有个问题，就是内核与socket缓冲区之间是否也可以免掉一次CPU copy呢？借助于硬件上的帮助，我们是可以办到的。之前我们是把页缓存的数据拷贝到socket缓存中，实际上，我们仅仅需要把缓冲区描述符传到socket缓冲区，再把数据长度传过去，这样DMA控制器直接将页缓存中的数据打包发送到网络（网卡）中去就可以了。这样，就是可以实现真正的全程零CPU拷贝了。<br><img src="/images/post-IO-Types/20190409222209.jpg"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>《UNIX网络编程》</p><p><a href="https://www.jianshu.com/p/fad3339e3448">浅析Linux中的零拷贝技术</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> I/O </tag>
            
            <tag> UNIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ相关总结</title>
      <link href="/2018/11/18/RocketMQ-Summary/"/>
      <url>/2018/11/18/RocketMQ-Summary/</url>
      
        <content type="html"><![CDATA[<p>总结RocketMQ相关知识点，便于回顾记忆…</p><h2 id="RocketMQ相关网址"><a href="#RocketMQ相关网址" class="headerlink" title="RocketMQ相关网址"></a>RocketMQ相关网址</h2><p>官网：<a href="https://rocketmq.incubator.apache.org/">https://rocketmq.incubator.apache.org/</a></p><p>源码：<a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq</a></p><h2 id="RocketMQ总体特点"><a href="#RocketMQ总体特点" class="headerlink" title="RocketMQ总体特点"></a>RocketMQ总体特点</h2><ol><li><p>能够保证严格的消息顺序</p></li><li><p>提供丰富的消息拉取模式</p></li><li><p>高效的订阅者水平扩展能力</p></li><li><p>实时的消息订阅机制</p></li><li><p>亿级消息堆积能力</p></li></ol><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>主要以commitLog为消息存储的数据结构。<br><img src="/images/post-RocketMQ-Summary/20160627161734720.jpg"></p><p><img src="/images/post-RocketMQ-Summary/20160627161750955.jpg"></p><p>（1）所有数据单独储存到commit Log ，完全顺序写，随机读</p><p>（2）对最终用户展现的队列实际只储存消息在Commit Log 的位置信息，并且串行方式刷盘</p><p>（3）按照MessageId查询消息</p><p><img src="/images/post-RocketMQ-Summary/20160627161909644.jpg"></p><p>（4）根据查询的key的hashcode%slotNum得到具体的槽位置</p><p><img src="/images/post-RocketMQ-Summary/20160627162003737.jpg"></p><p>（5）根据slotValue（slot对应位置的值）查找到索引项列表的最后一项</p><p>（6）遍历索引项列表返回查询时间范围内的结果集</p><h3 id="刷盘策略"><a href="#刷盘策略" class="headerlink" title="刷盘策略"></a>刷盘策略</h3><p><img src="/images/post-RocketMQ-Summary/20181118164510.jpg"><br>作为一款纯 Java 语言开发的消息引擎，RocketMQ 自主研发的存储组件，依赖 Page Cache 进行加速和堆积，意味着它的性能会受到 JVM、 GC、内核、Linux 内存管理机制、文件 IO 等因素的影响。Rocketmq中的所有消息都是持久化到硬盘的，但会使用系统PageCache加速访问，消息的落地方式是先写PageCache后刷盘，可以保证内存与磁盘都有一份数据，访问时，可以直接从内存读取。如图所示，一条消息从客户端发送出，到最终落盘持久化，每个环节都有产生延迟的风险。</p><blockquote><p>《不一样的技术创新-阿里巴巴2016双十一背后的技术》一书中提到，有线上数据显示，RocketMQ 写消息链路存在偶发的高达数秒的延迟</p></blockquote><ul><li><p><strong>同步刷盘</strong><br>同步刷盘是指，broker在收到每个消息后，都是先要保存到硬盘上，然后再给producer确认。</p></li><li><p><strong>异步刷盘</strong><br>异步刷盘就是先回复确认，然后批量保存到硬盘上。异步刷盘有更好的性能，当然也有更大的丢失消息的风险。</p></li></ul><h2 id="角色关系图"><a href="#角色关系图" class="headerlink" title="角色关系图"></a>角色关系图</h2><p><img src="/images/post-RocketMQ-Summary/20181118155237.jpg"></p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/images/post-RocketMQ-Summary/20160629175853107.jpg"></p><h3 id="架构特点"><a href="#架构特点" class="headerlink" title="架构特点"></a>架构特点</h3><p>所有的集群都具有水平扩展能力，无单点障碍。<br><br/></p><ul><li>NameServer以轻量级的方式提供服务发现和路由功能，每个NameServer存有全量的路由信息，提供对等的读写服务，是一个几乎无状态节点，可集群部署，节点之间无任何信息同步，支持快速扩缩容。<br/></li><li>Broker为实际的消息队列服务器(MQ Server)，在整体架构中，可以看作是Producer与Comsumer之间的驳脚者，消息通过它从Producer接收，并存储，后转发给Consumer。以Topic为纬度支持轻量级的队列，单机可以支撑上万队列规模，支持消息推拉模型，具备多副本容错机制（2副本或3副本）、强大的削峰填谷以及上亿级消息堆积能力，同时可严格保证消息的有序性。<blockquote><p>除此之外，Broker还提供了同城异地容灾能力，丰富的Metrics统计以及告警机制。这些都是传统消息系统无法比拟的。</p></blockquote></li><li>Producer由用户进行分布式部署，消息由Producer通过多种负载均衡模式发送到Broker集群，发送低延时，支持快速失败。</li><li>Consumer也由用户部署，支持PUSH和PULL两种消费模式（推模式的实现也是用的拉方式），支持集群消费和广播消息，提供实时的消息订阅机制，满足大多数消费场景。</li></ul><h2 id="RocketMQ亮点-支持多种消费模式"><a href="#RocketMQ亮点-支持多种消费模式" class="headerlink" title="RocketMQ亮点-支持多种消费模式"></a>RocketMQ亮点-支持多种消费模式</h2><p>RocketMQ最初还未正式称为RocketMQ，一开始v1.0还是叫metaQ，经历了3代的重要演进，v3.0开始改名RocketMQ，其重要改进包括消息获取模式。<br><br/></p><ol><li>第一代，推模式，数据存储采用关系型数据库。在这种模式下，消息具有很低的延迟特性，并且很容易支持分布式事务。尤其在阿里淘宝这种高频交易场景中，具有非常广泛地应用。典型代表包括Notify、Napoli。</li><li>第二代，拉模式，自研的专有消息存储。在日志处理方面能够媲美Kafka的吞吐性能，但考虑到淘宝的应用场景，尤其是其交易链路的高可靠需求，消息引擎并没有一味的追求吞吐，而是将稳定可靠放在首位。因为采用了长连接拉模式，在消息的实时方面丝毫不逊推模式。典型代表MetaQ。</li><li>第三代，以拉模式为主，兼有推模式的高性能、低延迟消息引擎RocketMQ，在二代功能特性的基础上，为电商金融领域添加了可靠重试、基于文件存储的分布式事务等特性，并做了大量优化。从2012年开始，经历了历次双11核心交易链路检验。目前已经捐赠给Apache基金会。</li></ol><p>不难看出，RocketMQ其实是伴随着阿里巴巴整个生态的成长，逐渐衍生出来的高性能，高可用，兼具高吞吐量和低延迟、能够同时满足电商领域和金融领域的极尽苛刻场景的消息中间件。</p><h2 id="Broker部署方式"><a href="#Broker部署方式" class="headerlink" title="Broker部署方式"></a>Broker部署方式</h2><h3 id="单Master"><a href="#单Master" class="headerlink" title="单Master"></a>单Master</h3><blockquote><p>这种方式风险较大，一旦Broker 重启或者宕机时，会导致整个服务不可用，不建议线上环境使用。</p></blockquote><h3 id="多Master模式"><a href="#多Master模式" class="headerlink" title="多Master模式"></a>多Master模式</h3><p>多台Broker，全是Master</p><blockquote><p>优点：配置简单，单个Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢）。性能最高。<br>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到受到影响。</p></blockquote><h3 id="HA方案：多Master-Slave对模式"><a href="#HA方案：多Master-Slave对模式" class="headerlink" title="HA方案：多Master&#x2F;Slave对模式"></a>HA方案：多Master&#x2F;Slave对模式</h3><p>每个 Master 配对一个 Slave，有多对Master-Slave。</p><h4 id="Master-Slave复制方式"><a href="#Master-Slave复制方式" class="headerlink" title="Master&#x2F;Slave复制方式"></a>Master&#x2F;Slave复制方式</h4><ul><li><p>同步双写<br>写入消息时，master先写入，之后复制到slave，确认slave也存储了消息后才向producer答复返回成功。</p><blockquote><p>优点：数据与服务都无单点，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高<br>缺点：性能比异步复制模式略低，大约低10%左右，发送单个消息的 RT 会略高。目前主宕机后，备机不能自动切换为主机，后续会支持自动切换功能。</p></blockquote></li><li><p>异步复制<br>先答复producer，再去向salve复制。</p><blockquote><p>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，因为 Master 宕机后，消费者仍然可以从 Slave 消费，此过程对应用透明。不需要人工干预。性能同多 Master 模式几乎一样。<br>缺点：Master宕机，磁盘损坏情况，会丢失少量消息。</p></blockquote></li></ul><p>通过同步复制技术可以完全避免单点，同步复制势必会影响性能，适合应用于消息可靠性要求极高的场合。RocketMQ从3.0版本开始支持同步双写。</p><h2 id="两种消息消费的交互方式的区别"><a href="#两种消息消费的交互方式的区别" class="headerlink" title="两种消息消费的交互方式的区别"></a>两种消息消费的交互方式的区别</h2><p>留意源码可以得知：<br>consumer被分为2类：MQPullConsumer和MQPushConsumer，本质都是拉模式（pull），即consumer轮询从broker拉取消息。<br>区别在于：</p><ul><li><p>push方式里，consumer把轮询过程封装了，并注册MessageListener监听器，取到消息后，唤醒MessageListener的consumeMessage()来消费，对客户端而言，感觉消息是被推送（push）过来的。</p></li><li><p>pull方式里，取消息的过程，RocketMQ交给了用户自己实现，首先通过待消费的Topic拿到MessageQueue的集合，遍历MessageQueue集合，然后针对每个MessageQueue批量取消息，一次取完后，记录该队列下一次要取的开始offset，直到取完了，再换另一个MessageQueue。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Java缓存  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;MessageQueue, Long&gt; offseTable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;MessageQueue, Long&gt;();  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">nameServAndAddr</span> <span class="operator">=</span> <span class="string">&quot;172.16.235.77:9876;172.16.235.78:9876&quot;</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">consumerGroupName</span> <span class="operator">=</span><span class="string">&quot;ConsumerGroupName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">consumber</span> <span class="operator">=</span><span class="string">&quot;Consumber&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 主动拉取方式消费 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MQClientException </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt; </span></span><br><span class="line"><span class="comment">         * 注意：ConsumerGroupName需要由应用来保证唯一 ,最好使用服务的包名区分同一服务,一类Consumer集合的名称， </span></span><br><span class="line"><span class="comment">         * 这类Consumer通常消费一类消息，且消费逻辑一致 </span></span><br><span class="line"><span class="comment">         * PullConsumer：Consumer的一种，应用通常主动调用Consumer的拉取消息方法从Broker拉消息，主动权由应用控制 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="type">DefaultMQPullConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPullConsumer</span>(consumerGroupName);  </span><br><span class="line">        <span class="comment">// //nameserver服务  </span></span><br><span class="line">        consumer.setNamesrvAddr(nameServAndAddr);  </span><br><span class="line">        consumer.setInstanceName(consumber);  </span><br><span class="line">        consumer.start();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 拉取订阅主题的队列，默认队列大小是4  </span></span><br><span class="line">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class="string">&quot;TopicTest1&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (MessageQueue mq : mqs) &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;Consume from the queue: &quot;</span> + mq);  </span><br><span class="line">            SINGLE_MQ: <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    <span class="type">PullResult</span> <span class="variable">pullResult</span> <span class="operator">=</span> </span><br><span class="line">                consumer.pullBlockIfNotFound(</span><br><span class="line">                        mq, <span class="literal">null</span>, getMessageQueueOffset(mq), <span class="number">32</span>);  </span><br><span class="line">                    List&lt;MessageExt&gt; list = pullResult.getMsgFoundList();  </span><br><span class="line">                    <span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &lt; <span class="number">100</span>) &#123;  </span><br><span class="line">                        <span class="keyword">for</span> (MessageExt msg : list) &#123;  </span><br><span class="line">                            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()));  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    System.out.println(pullResult.getNextBeginOffset());  </span><br><span class="line">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());  </span><br><span class="line">                    <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> FOUND:  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> NO_MATCHED_MSG:  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">case</span> NO_NEW_MSG:  </span><br><span class="line">                            <span class="keyword">break</span> SINGLE_MQ;  </span><br><span class="line">                        <span class="keyword">case</span> OFFSET_ILLEGAL:  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        <span class="keyword">default</span>:  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        consumer.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putMessageQueueOffset</span><span class="params">(MessageQueue mq, <span class="type">long</span> offset)</span> &#123;  </span><br><span class="line">        offseTable.put(mq, offset);  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getMessageQueueOffset</span><span class="params">(MessageQueue mq)</span> &#123;  </span><br><span class="line">        <span class="type">Long</span> <span class="variable">offset</span> <span class="operator">=</span> offseTable.get(mq);  </span><br><span class="line">        <span class="keyword">if</span> (offset != <span class="literal">null</span>) &#123;  </span><br><span class="line">            System.out.println(offset);  </span><br><span class="line">            <span class="keyword">return</span> offset;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RocketMQ使用长轮询Pull方式，可保证消息非常实时，消息实时性不低于Push</p></blockquote><p>长轮询Pull：<br>建立长连接，每隔一定时间，客户端向服务端发起请求询问数据，如有则返回数据，如无则返回空，然后关闭请求。<br>长轮询与普通轮询的不同之处在于，哪怕服务端此时没有数据，连接还是保持的，等到有数据时可以立即返回（也就模拟push），或者超时返回。<br>长轮询好处在于可以减少无效请求，保证消息实时性获取，又不会造成积压。</p><blockquote><p>推拉模式的具体选取视乎实际情况而定，在一些离线大批量数据处理系统中，消息获取的需求强调的更多是吞吐量，而非低延迟，此时拉模式可能更优。</p></blockquote><h2 id="RocketMQ-高可用保障"><a href="#RocketMQ-高可用保障" class="headerlink" title="RocketMQ 高可用保障"></a>RocketMQ 高可用保障</h2><p>通过可用性计算公式可以看出，要提升系统的可用性，需要在保障系统健壮性以延长平均无故障时间的基础上，进一步加强系统的故障自动恢复能力以缩短平均故障修复时间。 RocketMQ 高可用架构设计并实现了 Controller 组件，按照单主状态、异步复制状态、半同步状态以及最终的同步复制状态的有限状态机进行转换。在最终的同步复制状态下，Master 和 Slave 任一节点故障时，其它节点能够在秒级时间内切换到单主状态继续提供服务。相比于之前人工介入重启来恢复服务，RokcetMQ 高可用架构赋予了系统故障自动恢复的能力，能极大缩短平均故障恢复时间，提升系统的可用性。</p><p>下图描述了 RocketMQ 高可用架构中有限状态机的转换：</p><p><img src="/images/post-RocketMQ-Summary/20181118180808.jpg"></p><p>1） 第一个节点启动后，Controller 控制状态机切换为单主状态，通知启动节点以 Master 角色提供服务。<br>2） 第二个节点启动后， Controller 控制状态机切换成异步复制状态。Master 通过异步方式向 Slave 复制数据。<br>3） 当 Slave 的数据即将赶上 Master，Controller 控制状态机切换成半同步状态，此时命中 Master 的写请求会被 Hold 住，直到 Master以异步方式向 Slave 复制了所有差异的数据。<br>4） 当半同步状态下 Slave 的数据完全赶上 Master 时，Controller控制状态机切换成同步复制模式，Mater 开始以同步方式向 Slave 复制数据。该状态下任一节点出现故障，其它节点能够在秒级内切换到单主状态继续提供服务。<br>Controller 组件控制 RocketMQ 按照单主状态，异步复制状态，半同步状态，同步复制状态的顺序进行状态机切换。中间状态的停留时间与主备之间的数据差异以及网络带宽有关，但最终都会稳定在同步复制状态下。</p><h2 id="如何保证消息有序消费？"><a href="#如何保证消息有序消费？" class="headerlink" title="如何保证消息有序消费？"></a>如何保证消息有序消费？</h2><p>消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了 3 条消息，分别是订单创建、订单付款、订单完成。消费时，要按照这个顺序消费才有意义。但同时订单之间又是可以并行消费的。</p><p>假如生产者产生了2条消息：M1、M2，要保证这两条消息的顺序，应该怎样做？你脑中想到的可能是这样：<br><img src="/images/post-RocketMQ-Summary/20160628162759326.jpg"></p><p>M1发送到S1后，M2发送到S2，如果要保证M1先于M2被消费，那么需要M1到达消费端后，通知S2，然后S2再将M2发送到消费端。</p><p>这个模型存在的问题是，如果M1和M2分别发送到两台Server上，就不能保证M1先达到，也就不能保证M1被先消费，那么就需要在MQ Server集群维护消息的顺序。那么如何解决？一种简单的方式就是将M1、M2发送到同一个Server上：<br><img src="/images/post-RocketMQ-Summary/20160628163033073.jpg"></p><p>这样可以保证M1先于M2到达MQServer（客户端等待M1成功后再发送M2），根据先达到先被消费的原则，M1会先于M2被消费，这样就保证了消息的顺序。</p><p>这个模型，理论上可以保证消息的顺序，但在实际运用中你应该会遇到下面的问题：<br><img src="/images/post-RocketMQ-Summary/20160628163128871.jpg"></p><p>只要将消息从一台服务器发往另一台服务器，就会存在网络延迟问题。如上图所示，如果发送M1耗时大于发送M2的耗时，那么M2就先被消费，仍然不能保证消息的顺序。即使M1和M2同时到达消费端，由于不清楚消费端1和消费端2的负载情况，仍然有可能出现M2先于M1被消费。如何解决这个问题？将M1和M2发往同一个消费者即可，且发送M1后，需要消费端响应成功后才能发送M2。</p><p>但又会引入另外一个问题，如果发送M1后，消费端1没有响应，那是继续发送M2呢，还是重新发送M1？一般为了保证消息一定被消费，肯定会选择重发M1到另外一个消费端2，就如下图所示。</p><p><img src="/images/post-RocketMQ-Summary/20160628163222107.jpg"></p><p>这样的模型就严格保证消息的顺序，细心的你仍然会发现问题，消费端1没有响应Server时有两种情况，一种是M1确实没有到达，另外一种情况是消费端1已经响应，但是Server端没有收到。如果是第二种情况，重发M1，就会造成M1被重复消费。也就是我们后面要说的第二个问题，消息重复问题。</p><p>回过头来看消息顺序问题，严格的顺序消息非常容易理解，而且处理问题也比较容易，要实现严格的顺序消息，简单且可行的办法就是：</p><blockquote><p>保证生产者 - MQServer - 消费者是一对一对一的关系</p></blockquote><p>但是这样设计，并行度就成为了消息系统的瓶颈（吞吐量不够），也会导致更多的异常处理，比如：只要消费端出现问题，就会导致整个处理流程阻塞，我们不得不花费更多的精力来解决阻塞的问题。</p><p>但我们的最终目标是要集群的高容错性和高吞吐量。这似乎是一对不可调和的矛盾，那么阿里是如何解决的？</p><p>有些问题，看起来很重要，但实际上我们可以通过合理的设计或者将问题分解来规避。如果硬要把时间花在解决它们身上，实际上是浪费的，效率低下的。从这个角度来看消息的顺序问题，我们可以得出两个结论：</p><blockquote><ol><li>不关注乱序的应用实际大量存在 </li><li>队列无序并不意味着消息无序</li></ol></blockquote><p>最后我们从源码角度分析RocketMQ怎么实现发送顺序消息。</p><p>一般消息是通过轮询所有队列来发送的（负载均衡策略），顺序消息可以根据业务，比如说订单号相同的消息发送到同一个队列。下面的示例中，OrderId相同的消息，会发送到同一个队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RocketMQ默认提供了两种MessageQueueSelector实现：随机/Hash</span></span><br><span class="line"><span class="type">SendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> producer.send(msg, <span class="keyword">new</span> <span class="title class_">MessageQueueSelector</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MessageQueue <span class="title function_">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) arg;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> id % mqs.size();</span><br><span class="line">        <span class="keyword">return</span> mqs.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, orderId);</span><br></pre></td></tr></table></figure><p>在获取到路由信息以后，会根据MessageQueueSelector实现的算法来选择一个队列，同一个OrderId获取到的队列是同一个队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SendResult <span class="title function_">send</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="comment">// 获取topic路由信息</span></span><br><span class="line">    <span class="type">TopicPublishInfo</span> <span class="variable">topicPublishInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.tryToFindTopicPublishInfo(msg.getTopic());</span><br><span class="line">    <span class="keyword">if</span> (topicPublishInfo != <span class="literal">null</span> &amp;&amp; topicPublishInfo.ok()) &#123;</span><br><span class="line">        <span class="type">MessageQueue</span> <span class="variable">mq</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 根据我们的算法，选择一个发送队列</span></span><br><span class="line">        <span class="comment">// 这里的arg = orderId</span></span><br><span class="line">        mq = selector.select(topicPublishInfo.getMessageQueueList(), msg, arg);</span><br><span class="line">        <span class="keyword">if</span> (mq != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.sendKernelImpl(msg, mq, communicationMode, sendCallback, timeout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息重复–如何保证幂等性"><a href="#消息重复–如何保证幂等性" class="headerlink" title="消息重复–如何保证幂等性"></a>消息重复–如何保证幂等性</h2><p>上面在解决消息顺序问题时，引入了一个新的问题，就是消息重复。那么RocketMQ是怎样解决消息重复的问题呢？还是“恰好”不解决。</p><p>造成消息的重复的根本原因是：网络不可达。只要通过网络交换数据，就无法避免这个问题。所以解决这个问题的办法就是不解决，转而绕过这个问题。那么问题就变成了：如果消费端收到两条一样的消息，应该怎样处理？</p><blockquote><ol><li>消费端处理消息的业务逻辑保持幂等性 </li><li>保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现</li></ol></blockquote><p>第1条很好理解，只要保持幂等性，不管来多少条重复消息，最后处理的结果都一样。第2条原理就是利用一张日志表来记录已经处理成功的消息的ID，如果新到的消息ID已经在日志表中，那么就不再处理这条消息。</p><p>我们可以看到第1条的解决方式，很明显应该在消费端实现，不属于消息系统要实现的功能。第2条可以消息系统实现，也可以业务端实现。正常情况下出现重复消息的概率不一定大，且由消息系统实现的话，肯定会对消息系统的吞吐量和高可用有影响，所以最好还是由业务端自己处理消息重复的问题，这也是RocketMQ不解决消息重复的问题的原因。</p><p>RocketMQ不保证消息不重复，如果你的业务需要保证严格的不重复消息，需要你自己在业务端去重。</p><h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h2><p>RocketMQ除了支持普通消息，顺序消息，另外还支持事务消息。</p><h3 id="旧版事务消息："><a href="#旧版事务消息：" class="headerlink" title="旧版事务消息："></a>旧版事务消息：</h3><p>参考 <a href="https://blog.csdn.net/asdf08442a/article/details/54882769">RocketMQ总结整理</a>-事务消息</p><h3 id="RocketMQ-4-3-新版事务消息："><a href="#RocketMQ-4-3-新版事务消息：" class="headerlink" title="RocketMQ 4.3 新版事务消息："></a>RocketMQ 4.3 新版事务消息：</h3><p><img src="/images/post-RocketMQ-Summary/20181118221948.jpg"></p><p>这张图说明了事务消息的大致方案，分为两个逻辑：正常事务消息的发送及提交、事务消息的补偿流程。</p><ul><li><p>事务消息发送及提交：</p><p>  发送消息（half消息）<br>  服务端响应消息写入结果<br>  根据发送结果执行本地事务（如果写入失败，此时half消息对业务不可见，本地逻辑不执行）<br>  根据本地事务状态执行Commit或者Rollback（Commit操作生成消息索引，消息对消费者可见）</p></li><li><p>补偿流程：</p><p>  对没有Commit&#x2F;Rollback的事务消息（pending状态的消息），从服务端发起一次“回查”<br>  Producer收到回查消息，检查回查消息对应的本地事务的状态<br>  根据本地事务状态，重新Commit或者Rollback<br>  补偿阶段用于解决消息Commit或者Rollback发生超时或者失败的情况。</p></li></ul><h3 id="新版事务消息的设计原理"><a href="#新版事务消息的设计原理" class="headerlink" title="新版事务消息的设计原理"></a>新版事务消息的设计原理</h3><p>RocketMQ事务消息的提交方式是2PC，一阶段消息可以理解为Prepared Message或者Pending Message，实际上就是说，消息要先提交并落地到Broker，但不能是对用户可见的。<br><br/><br>如何做到写入了消息但是对用户不可见?——写入消息数据，但是不创建对应的消息的索引信息。<br><img src="/images/post-RocketMQ-Summary/20181119061401.jpg"><br>RocketMQ消息在服务端的存储结构如上，每条消息都会有对应的索引信息，Consumer通过索引读取消息。<br>那么实现一阶段写入的消息不被用户消费（需要在Commit后才能消费），只需要写入Storage Queue，但是不构建Index Queue即可。</p><p>RocketMQ中具体实现策略是：写入的如果是事务消息，则对消息的Topic和Queue等属性进行替换，同时将原来的Topic和Queue信息存储到消息的属性中。<br>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PutMessageResult <span class="title function_">putHalfMessage</span><span class="params">(MessageExtBrokerInner messageInner)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> store.putMessage(parseHalfMessageInner(messageInner));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageExtBrokerInner <span class="title function_">parseHalfMessageInner</span><span class="params">(MessageExtBrokerInner msgInner)</span> &#123;</span><br><span class="line">        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC, msgInner.getTopic());</span><br><span class="line">        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_QUEUE_ID,</span><br><span class="line">            String.valueOf(msgInner.getQueueId()));</span><br><span class="line">        msgInner.setSysFlag(</span><br><span class="line">            MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), </span><br><span class="line">            MessageSysFlag.TRANSACTION_NOT_TYPE));</span><br><span class="line">        msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic());</span><br><span class="line">        msgInner.setQueueId(<span class="number">0</span>);</span><br><span class="line">        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class="line">        <span class="keyword">return</span> msgInner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>替换属性后这条消息被写入到TransactionalMessageUtil.buildHalfTopic()的Queue 0中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionalMessageUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REMOVETAG</span> <span class="operator">=</span> <span class="string">&quot;d&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Charset</span> <span class="variable">charset</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildHalfTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MixAll.RMQ_SYS_TRANS_HALF_TOPIC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在完成Storage Queue的写入后，在appendCallback中，普通消息会去构建消息索引，<strong>而如果发现是事务消息，则跳过了创建索引的逻辑。</strong></p><blockquote><p>RocketMQ将事务消息一阶段发送的消息称为Half消息，我们可以理解为，这条消息相对普通消息的操作只做了一半（只落地而未索引），不算是一条完整的普通消息</p></blockquote><p>在完成一阶段写入一条对用户不可见的消息后，二阶段如果是Commit操作，则需要让消息对用户可见；如果是Rollback则需要撤销一阶段的消息。</p><p>先说Rollback的情况。对于Rollback，本身一阶段的消息对用户是不可见的，其实不需要真正撤销消息（实际上RocketMQ也无法去真正的删除一条消息，因为是顺序写文件的）。</p><p>但是区别于这条消息没有确定状态（Pending状态，事务悬而未决），需要一个操作来标识这条消息的最终状态。</p><p>RocketMQ事务消息方案中引入了Op消息的概念，用Op消息标识事务消息是否状态已经确定（Commit或者Rollback）。如果一条事务消息没有对应的Op消息，说明这个事务的状态还无法确定（可能是二阶段失败了）。</p><p>引入Op消息后，事务消息无论是Commit或者Rollback都会记录一个Op操作。</p><p>Commit相对于Rollback只是在写入Op消息前创建Half消息的索引。</p><p>Half消息的索引构建</p><p>在执行二阶段的Commit操作时，需要构建出Half消息的索引。</p><p>一阶段的Half消息由于是写到一个特殊的Topic，所以二阶段构建索引时需要读取出Half消息，并将Topic和Queue替换成真正的目标的Topic和Queue，之后通过一次普通消息的写入操作来生成一条对用户可见的消息。</p><p>所以RocketMQ事务消息二阶段其实是利用了一阶段存储的消息的内容，在二阶段时恢复出一条完整的普通消息，然后走一遍消息写入流程。</p><p>如何处理二阶段失败的消息</p><p>如果二阶段失败了，比如在Commit操作时出现网络问题导致Commit失败，那么需要通过一定的策略使这条消息最终被Commit。</p><p>RocketMQ采用了一种补偿机制，称为“回查”。</p><p>Broker端对未确定状态的消息发起回查，将消息发送到对应的Producer端（同一个Group的Producer），由Producer根据消息来检查本地事务的状态，进而执行Commit或者Rollback。</p><p>Broker端通过对比Half消息和Op消息进行事务消息的回查并且推进CheckPoint（记录那些事务消息的状态是确定的）。</p><p>值得注意的一点是具体实现中，在回查前，系统会执行putBackHalfMsgQueue操作，即将Half消息重新写一遍到Half消息的Queue中。这么做其实是为了能有效的推进上面的CheckPoint。</p><h3 id="新版事务消息设计总结"><a href="#新版事务消息设计总结" class="headerlink" title="新版事务消息设计总结"></a>新版事务消息设计总结</h3><p><img src="/images/post-RocketMQ-Summary/20181119063901.jpg"></p><ul><li>通过写Half消息的方式来实现一阶段消息对用户不可见</li><li>通过Op消息来标记事务消息的状态</li><li>通过读取Half消息来生成一条新的Normal消息来完成二阶段Commit之后消息对Consumer可见</li><li>通过Op消息来执行回查</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><p>分布式消息引擎 《不一样的技术创新-阿里巴巴2016双十一背后的技术》</p></li><li><p><a href="https://www.jianshu.com/p/66edd4f99e3c">RocketMq知识点理解</a></p></li><li><p><a href="https://blog.csdn.net/asdf08442a/article/details/54882769">RocketMQ总结整理</a></p></li><li><p><a href="https://blog.csdn.net/qq_42564846/article/details/81476291">RocketMQ事务消息实现分析</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 削峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结ThreadLocal</title>
      <link href="/2018/11/05/ThreadLocal-Summary/"/>
      <url>/2018/11/05/ThreadLocal-Summary/</url>
      
        <content type="html"><![CDATA[<h2 id="ThreadLoacal简介"><a href="#ThreadLoacal简介" class="headerlink" title="ThreadLoacal简介"></a>ThreadLoacal简介</h2><p>ThreadLocal类是修饰变量的，重点是在控制变量的作用域，初衷可不是为了解决线程并发和线程冲突的，而是为了让变量的种类变的更多更丰富，方便人们使用罢了。<br><br/><br>根据变量的作用域，可以将变量分为全局变量，局部变量。简单的说，类里面定义的变量是全局变量，函数里面定义的变量是局部变量。<br>还有一种作用域是线程作用域，线程一般是跨越几个函数的。为了在几个函数之间共用一个变量，所以才出现：线程变量，这种变量在Java中就是ThreadLocal变量。<br><br/><br>ThreadLocal变量，不同于它们的普通对应物，因为访问某个变量（通过其get 或 set 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。<strong>ThreadLocal为每个使用该变量的线程分配一个独立的变量副本。所以每一个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。</strong>所以我们说，ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。</p><h2 id="ThreadLocal的用处"><a href="#ThreadLocal的用处" class="headerlink" title="ThreadLocal的用处"></a>ThreadLocal的用处</h2><p>Web开发中常见到的一个问题：多用户session问题。<br>假设有多个用户需要获取用户信息，一个线程对应一个用户。在mybatis中，session用于操作数据库，那么设置、获取操作分别是session.set()、session.get()，如何保证每个线程都能正确操作达到想要的结果呢？</p><p>假如我们要设置一个变量，作为各个线程共享的变量，来存储session信息，那么当我们需要让每个线程独立地设置session信息而不被其它线程打扰，要怎么做呢？很容易想到了加锁，譬如synchronized，互斥同步锁synchronized自JDK1.5经过优化后，不会很消耗资源了，但当成千上万个操作来临之时，扛高并发能力不说，数据返回延迟带来的用户体验变差又如何解决？</p><p>那么，就上文提出的问题，引申出来，像mybatis，hibernate一类的框架是如何解决这个session问题的呢？</p><p>来看一下，mybatis的SqlSessionManager类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionManager</span> <span class="keyword">implements</span> <span class="title class_">SqlSessionFactory</span>, SqlSession &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSessionProxy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ThreadLocal&lt;SqlSession&gt; localSqlSession = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">SqlSessionManager</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    <span class="built_in">this</span>.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(</span><br><span class="line">        SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SqlSession.class&#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SqlSessionInterceptor</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(autoCommit));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(connection));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot get connection.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sqlSession.getConnection();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>留意到，mybatis里的localSqlSession就是用的ThreadLocal变量来实现。</p><p>从内存模型出发看ThreadLocal：<br><img src="/images/post-ThreadLocal-Summary/20181111170001.jpg"></p><p>我们知道，在虚拟机中，堆内存就是用于存储共享数据，也就是这里所说的主内存。</p><p>每个线程将会在堆内存中开辟一块空间叫做线程的工作内存，附带一块缓存区用于存储共享数据副本。那么，共享数据在堆内存当中，线程通信就是通过主内存为中介，线程在本地内存读并且操作完共享变量操作完毕以后，把值写入主内存。</p><ol><li>ThreadLocal被称为线程局部变量，说白了就是线程工作内存的一小块内存，用于存储数据。</li><li>那么，ThreadLocal.set()、ThreadLocal.get()方法，就相当于把数据存储于线程本地，取也是在本地内存读取。就不会像synchronized需要频繁的修改主内存的数据，再把数据复制到工作内存，也大大提高访问效率。</li></ol><p>那么，我们再来回答上面引出的问题，mybatis为什么要用ThreadLocal来存储session？</p><p> 首先，因为线程间的数据交互是通过工作内存与主存的频繁读写完成通信，然而存储于线程本地内存，提高访问效率，避免线程阻塞造成cpu吞吐率下降。再者，在多线程中，每一个线程都各自维护session，轻易完成对线程独享资源的操作。</p><h2 id="理解ThreadLocal的关键源码"><a href="#理解ThreadLocal的关键源码" class="headerlink" title="理解ThreadLocal的关键源码"></a>理解ThreadLocal的关键源码</h2><p>首先，要理解ThreadLocal的数据结构，我们可以看它的set&#x2F;get方法：<br>ThreadLocal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ol><li>ThreadLocalMap作为ThreadLocal的静态内部类，用于存储多个ThreadLocal对象</li><li>ThreadLocal对象作为ThreadLocalMap的key来存储，我们set进去的独享数据作为value存储</li><li>留意到它里边调到的getMap(Thread)方法，得知ThreadLocalMap的获取跟当前Thread有关，仔细看threadLocals其实就是当前线程的一个ThreadLocalMap变量。也就是说，一个线程对应一个ThreadLocalMap，get()就是当前程获取自己的ThreadLocalMap。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 线程根据使用那一小块的线程本地内存，以ThreadLocal对象作为key，去获取存储于ThreadLocalMap中的值。</p><h2 id="ThreadLocal内存泄露"><a href="#ThreadLocal内存泄露" class="headerlink" title="ThreadLocal内存泄露"></a>ThreadLocal内存泄露</h2><h3 id="引用关系图"><a href="#引用关系图" class="headerlink" title="引用关系图"></a>引用关系图</h3><p> 先引用一张经典的引用关系图来说明当前线程(currentThread)以及threadLocalMap、key、threadLocal实例几个之间的引用关系：<br><img src="/images/post-ThreadLocal-Summary/20181111174333.jpg"></p><p>利用这图来回顾总结一下ThreadLocal的实现：<br>每个Thread 维护一个 ThreadLocalMap 映射表，这个映射表的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object。</p><p>也就是说 ThreadLocal 本身并不存储值，它只是作为一个 key 来让线程从 ThreadLocalMap 获取 value。值得注意的是图中的虚线，表示 ThreadLocalMap 是使用 ThreadLocal 的弱引用作为 Key 的，弱引用的对象在 GC 时会被回收。</p><h3 id="ThreadLocal为什么会内存泄漏"><a href="#ThreadLocal为什么会内存泄漏" class="headerlink" title="ThreadLocal为什么会内存泄漏"></a>ThreadLocal为什么会内存泄漏</h3><p>我们可以理解到，每个线程都会创建一块工作内存，每个线程都有一个ThreadLocalMap，而ThreadLocalMap可以有多个key，也就是说可以存储多个ThreadLocal。那么假设，开启1万个线程，每个线程创建1万个ThreadLocal，也就是每个线程维护1万个ThreadLocal小内存空间！<br>那么，当线程执行结束以后，如果一个ThreadLocal没有外部强引用来引用它而是用弱引用来引用，那么系统 GC 的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value永远无法回收，造成内存泄漏。</p><h4 id="Key使用什么引用才好？"><a href="#Key使用什么引用才好？" class="headerlink" title="Key使用什么引用才好？"></a>Key使用什么引用才好？</h4><p>如上，key对ThreadLocal使用弱引用会发生内存泄露。<br>那么，如果使用强使用，问题是否就得以解决？<br></br><br>若 key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。<br></br><br>那么如果 key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的引用是弱引用，即使没有手动删除，ThreadLocal也会被回收。至于value，则在下一次ThreadLocalMap调用set,get，remove的时候会被清除。<br></br><br>所以比较两种情况，我们可以发现：由于ThreadLocalMap的生命周期跟Thread一样长，如果都没有手动删除对应key，都会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用ThreadLocal不会内存泄漏，而对应的value在下一次ThreadLocalMap调用set,get,remove的时候会被清除。<br><br/><br>因此，<strong>ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</strong><br><br/></p><h3 id="ThreadLocal防内存泄露最佳实践"><a href="#ThreadLocal防内存泄露最佳实践" class="headerlink" title="ThreadLocal防内存泄露最佳实践"></a>ThreadLocal防内存泄露最佳实践</h3><p>综上，我们可以理解ThreadLocal为避免内存泄露的设计大致上是：</p><ol><li>JVM利用ThreadLocalMap的Key为弱引用，来避免ThreadLocal内存泄露。</li><li>由于Key设置为弱引用，那么，当ThreadLocal存储很多Key为null的Entry的时候，而不再去调用remove、get、set方法，那么将导致内存泄漏。<br/>所以，每次使用完ThreadLocal，都调用它的remove()方法，清除数据，则可以达到回收弱引用的结果，这是最佳的使用实践。否则，在使用线程池的情况下，没有及时清理ThreadLocal，不仅是内存泄漏的问题，更严重的是可能导致业务逻辑出现问题。所以，使用ThreadLocal就跟加锁完要解锁一样，用完就清理。</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/qiuyong/p/7091689.html">《并发编程（四）：ThreadLocal从源码分析总结到内存泄漏》</a><br><a href="http://www.importnew.com/22039.html">《深入分析 ThreadLocal 内存泄漏问题》</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理Volatile</title>
      <link href="/2018/11/03/Volatile-Summary/"/>
      <url>/2018/11/03/Volatile-Summary/</url>
      
        <content type="html"><![CDATA[<p>整理volatile相关，便于回顾记忆…</p><h2 id="Volatile简介"><a href="#Volatile简介" class="headerlink" title="Volatile简介"></a>Volatile简介</h2><p>volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”，但不像synchronized一样保证原子性。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。如果volatile变量修饰符使用恰当的话，它比synchronized的使用和执行成本更低，因为它不会引起线程上下文的切换和调度。</p><h2 id="Volatile的特性"><a href="#Volatile的特性" class="headerlink" title="Volatile的特性"></a>Volatile的特性</h2><ol><li>volatile可见性；对一个volatile的读，总可以看到对这个变量最近一次的写；</li><li>volatile原子性；volatile对单个读&#x2F;写具有原子性（32位Long、Double），但是复合操作除外，例如i++;</li><li>JVM底层采用“内存屏障”来实现volatile语义，禁止重排序以保证有序性</li></ol><p>理解volatile特性的一个好方法是把对volatile变量的单个读&#x2F;写，看成是使用同一个锁对这些单个读&#x2F;写操作做了同步。下面通过具体的示例来说明，示例代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileFeaturesExample</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">long</span> <span class="variable">vl</span> <span class="operator">=</span> <span class="number">0L</span>; <span class="comment">// 使用volatile声明64位的long型变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">        vl = l; <span class="comment">// 单个volatile变量的写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAndIncrement</span> <span class="params">()</span> &#123;</span><br><span class="line">        vl++; <span class="comment">// 复合（多个）volatile变量的读/写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vl; <span class="comment">// 单个volatile变量的读</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有多个线程分别调用上面程序的3个方法，这个程序在语义上和下面程序等价。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileFeaturesExample</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">vl</span> <span class="operator">=</span> <span class="number">0L</span>; <span class="comment">// 64位的long型普通变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">long</span> l)</span> &#123; <span class="comment">// 对单个的普通变量的写用同一个锁同步</span></span><br><span class="line">        vl = l;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAndIncrement</span> <span class="params">()</span> &#123; <span class="comment">// 普通方法调用</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> get(); <span class="comment">// 调用已同步的读方法</span></span><br><span class="line">        temp += <span class="number">1L</span>; <span class="comment">// 普通写操作</span></span><br><span class="line">        set(temp); <span class="comment">// 调用已同步的写方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">()</span> &#123; <span class="comment">// 对单个的普通变量的读用同一个锁同步</span></span><br><span class="line">        <span class="keyword">return</span> vl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面示例程序所示，一个volatile变量的单个读&#x2F;写操作，与一个普通变量的读&#x2F;写操作都是使用同一个锁来同步，它们之间的执行效果相同。<br></br><br>锁的happens-before规则保证释放锁和获取锁的两个线程之间的内存可见性，这意味着对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。<br></br><br>锁的语义决定了临界区代码的执行具有原子性。这意味着，即使是64位的long型和double型变量，只要它是volatile变量，对该变量的读&#x2F;写就具有原子性。如果是多个volatile操作或类似于volatile++这种复合操作，这些操作整体上不具有原子性。</p><h2 id="Volataile的内存语义及其实现"><a href="#Volataile的内存语义及其实现" class="headerlink" title="Volataile的内存语义及其实现"></a>Volataile的内存语义及其实现</h2><p>Java语言规范对volatile的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获得这个变量。</span><br></pre></td></tr></table></figure><p>通俗点讲就是说一个变量如果用volatile修饰了，则Java可以确保所有线程看到这个变量的值是一致的，如果某个线程对volatile修饰的共享变量进行更新，那么其他线程可以立马看到这个更新，这就是所谓的线程可见性。</p><p>在了解volatile实现原理之前，我们先来看下与其实现原理相关的CPU术语与说明。下表是CPU术语的定义</p><p><img src="/images/post-Volatile-Summary/20181104004150.jpg"></p><p>Volatile是如何来保证可见性的呢？让我们在X86处理器下通过工具获取JIT编译器生成的汇编指令来查看对volatile进行写操作时，CPU会做什么事情。</p><p>Java代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance = new Singleton(); // instance是volatile变量</span><br></pre></td></tr></table></figure><p>转变成汇编代码，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x01a3de1d: movb $0×0,0×1104800(%esi);0x01a3de24: lock addl $0×0,(%esp);</span><br></pre></td></tr></table></figure><p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事情。</p><p>1） 将当前处理器缓存行的数据写回到系统内存。<br>2） 这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。<br></br><br>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。<br></br><br>下面来具体讲解volatile的两条实现原则。</p><ol><li>Lock前缀指令会引起处理器缓存回写到内存。Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存[2]。但是，在最近的处理器里，LOCK＃信号一般不锁总线，而是锁缓存，毕竟锁总线开销的比较大。在8.1.4节有详细说明锁定操作对处理器缓存的影响，对于Intel486和Pentium处理器，在锁操作时，总是在总线上声言LOCK#信号。但在P6和目前的处理器中，如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反，它会锁定这块内存区域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁定”，缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</li><li>一个处理器的缓存回写到内存会导致其他处理器的缓存无效。IA-32处理器和Intel 64处理器使用MESI（修改、独占、共享、无效）控制协议去维护内部缓存和其他处理器缓存的一致性。在多核处理器系统中进行操作的时候，IA-32和Intel 64处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</li></ol><p><img src="/images/post-Volatile-Summary/%E2%80%8E2018%E2%80%8E%E2%80%8E11%E2%80%8E%E2%80%8E4%E2%80%8E%E2%80%8F104116.jpg"></p><h2 id="Volatile写-读建立的happens-before关系"><a href="#Volatile写-读建立的happens-before关系" class="headerlink" title="Volatile写-读建立的happens-before关系"></a>Volatile写-读建立的happens-before关系</h2><p>从JSR-133开始（即从JDK5开始），volatile变量的写-读可以实现线程之间的通信。<br></br><br>从内存语义的角度来说，volatile的写-读与锁的释放-获取有相同的内存效果：volatile写和锁的释放有相同的内存语义；volatile读与锁的获取有相同的内存语义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileExample</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">        flag = <span class="literal">true</span>; <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; <span class="comment">// 4</span></span><br><span class="line">            ……</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设线程A执行writer()方法之后，线程B执行reader()方法。根据happens-before规则，这个过程建立的happens-before关系可以分为3类：</p><ol><li>根据程序次序规则，1 happens-before 2;3 happens-before 4。</li><li>根据volatile规则，2 happens-before 3。</li><li>根据happens-before的传递性规则，1 happens-before 4。</br>![](/images/post-Volatile-Summary/20181104185650.jpg)在上图中，每一个箭头链接的两个节点，代表了一个happens-before关系。黑色箭头表示程序顺序规则；橙色箭头表示volatile规则；蓝色箭头表示组合这些规则后提供的happens-before保证。这里A线程写一个volatile变量后，B线程读同一个volatile变量。A线程在写volatile变量之前所有可见的共享变量，在B线程读同一个volatile变量后，将立即变得对B线程可见。</li></ol><h2 id="限制重排序"><a href="#限制重排序" class="headerlink" title="限制重排序"></a>限制重排序</h2><p>重排序分为编译器重排序和处理器重排序。为了实现volatile内存语义，JMM会分别限制这两种类型的重排序类型.以下是JMM针对编译器制定的volatile重排序规则表：<br><img src="/images/post-Volatile-Summary/20181105003929.jpg"><br>举例来说，第三行最后一个单元格的意思是：在程序中，当第一个操作为普通变量的读或写时，如果第二个操作为volatile写，则编译器不能重排序这两个操作。<br></br><br>从表中可以看出：</p><ul><li>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保<br>volatile写之前的操作不会被编译器重排序到volatile写之后。</li><li>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保<br>volatile读之后的操作不会被编译器重排序到volatile读之前。</li><li>当第一个操作是volatile写，第二个操作是volatile读时，不能重排序。</li></ul><p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略。</p><ul><li>在每个volatile写操作的前面插入一个StoreStore屏障。</li><li>在每个volatile写操作的后面插入一个StoreLoad屏障。</li><li>在每个volatile读操作的后面插入一个LoadLoad屏障。</li><li>在每个volatile读操作的后面插入一个LoadStore屏障。</li></ul><p>上述内存屏障插入策略非常保守，但它可以保证在任意处理器平台，任意的程序中都能得到正确的volatile内存语义。<br></br><br>下面是保守策略下，volatile写插入内存屏障后生成的指令序列示意图:<br><img src="/images/post-Volatile-Summary/20181105004613.jpg"><br>图中的StoreStore屏障可以保证在volatile写之前，其前面的所有普通写操作已经对任意处理器可见了。这是因为StoreStore屏障将保障上面所有的普通写在volatile写之前刷新到主内存。<br>这里比较有意思的是，volatile写后面的StoreLoad屏障。此屏障的作用是避免volatile写与后面可能有的volatile读&#x2F;写操作重排序。因为编译器常常无法准确判断在一个volatile写的后面是否需要插入一个StoreLoad屏障（比如，一个volatile写之后方法立即return）。为了保证能正确实现volatile的内存语义，JMM在采取了保守策略：在每个volatile写的后面，或者在每个volatile读的前面插入一个StoreLoad屏障。从整体执行效率的角度考虑，JMM最终选择了在每个volatile写的后面插入一个StoreLoad屏障。因为volatile写-读内存语义的常见使用模式是：一个写线程写volatile变量，多个读线程读同一个volatile变量。当读线程的数量大大超过写线程时，选择在volatile写之后插入StoreLoad屏障将带来可观的执行效率的提升。从这里可以看到JMM在实现上的一个特点：首先确保正确性，然后再去追求执行效率。<br></br><br>下面是在保守策略下，volatile读插入内存屏障后生成的指令序列示意图:<br><img src="/images/post-Volatile-Summary/20181105004941.jpg"><br>图中的LoadLoad屏障用来禁止处理器把上面的volatile读与下面的普通读重排序。LoadStore屏障用来禁止处理器把上面的volatile读与下面的普通写重排序。<br>上述volatile写和volatile读的内存屏障插入策略非常保守。在实际执行时，只要不改变volatile写-读的内存语义，编译器可以根据具体情况省略不必要的屏障。下面通过具体的示例代码进行说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileBarrierExample</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">readAndWrite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> v1; <span class="comment">// 第一个volatile读</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> v2; <span class="comment">// 第二个volatile读</span></span><br><span class="line">        a = i + j; <span class="comment">// 普通写</span></span><br><span class="line">        v1 = i + <span class="number">1</span>; <span class="comment">// 第一个volatile写</span></span><br><span class="line">        v2 = j * <span class="number">2</span>; <span class="comment">// 第二个 volatile写</span></span><br><span class="line">    &#125;</span><br><span class="line">    …<span class="comment">// 其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对readAndWrite()方法，编译器在生成字节码时可以做如下的优化。<br><img src="/images/post-Volatile-Summary/20181105005251.jpg"><br>注意，最后的StoreLoad屏障不能省略。因为第二个volatile写之后，方法立即return。此时编译器可能无法准确断定后面是否会有volatile读或写，为了安全起见，编译器通常会在这里插入一个StoreLoad屏障。<br>上面的优化针对任意处理器平台，由于不同的处理器有不同“松紧度”的处理器内存模型，内存屏障的插入还可以根据具体的处理器内存模型继续优化。以X86处理器为例，图3-21<br>中除最后的StoreLoad屏障外，其他的屏障都会被省略。<br>前面保守策略下的volatile读和写，在X86处理器平台可以优化成如下图所示。<br>前文提到过，X86处理器仅会对写-读操作做重排序。X86不会对读-读、读-写和写-写操作做重排序，因此在X86处理器中会省略掉这3种操作类型对应的内存屏障。在X86中，JMM仅需在volatile写后面插入一个StoreLoad屏障即可正确实现volatile写-读的内存语义。这意味着在X86处理器中，volatile写的开销比volatile读的开销会大很多（因为执行StoreLoad屏障开销会比较大）。<br><img src="/images/post-Volatile-Summary/20181105005442.jpg"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>《Java并发编程的艺术》–方腾飞</p>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理Synchronized</title>
      <link href="/2018/11/03/Synchronized-Summary/"/>
      <url>/2018/11/03/Synchronized-Summary/</url>
      
        <content type="html"><![CDATA[<p>整理volatile相关，便于回顾记忆…</p><h2 id="Synchronized简介"><a href="#Synchronized简介" class="headerlink" title="Synchronized简介"></a>Synchronized简介</h2><p>Synchronized一直是Java多线程并发编程中用作同步的元老级角色，很多人对它的概念都是一个重量级锁，但在JDK 1.6，对synchronized进行了各种优化，为了减少获得锁和释放锁带来的性能消耗而引入了偏向锁和轻量级锁，和锁的存储结构和升级过程。<br></br><br>Synchronized实现同步的基础在于Java中的每一个对象都可以作为，所以本质上synchronized就是一把对象锁。<br></br><br>Synchronized可作用于类，静态方法，普通方法，及代码块，具体表现为以下3种形式：</p><ul><li>对于普通同步方法，锁是当前实例对象</li><li>对于静态同步方法，锁是当前类的Class对象。</li><li>对于同步方法块，锁是Synchonized括号里配置的对象</li></ul><p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。<br></br><br>那么锁到底存在哪里呢？锁里面会存储什么信息呢？</p><h2 id="同步的原理"><a href="#同步的原理" class="headerlink" title="同步的原理"></a>同步的原理</h2><h3 id="管程-Monitor-对象"><a href="#管程-Monitor-对象" class="headerlink" title="管程(Monitor)对象"></a>管程(Monitor)对象</h3><p>Java 虚拟机中的同步(Synchronization)基于进入和退出管程(Monitor)对象实现，无论是显式同步，还是隐式同步都如此。</p><ul><li>显式同步是指有明确的monitorenter和monitorexit指令，也就是synchronized同步代码块的场景</li><li>隐式同步则是由方法调用指令读取运行时常量池中方法的ACC_SYNCHRONIZED 标志来隐式实现，也就是指方法同步的场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println( <span class="string">&quot;test1&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;test2&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/post-Synchronized-Summary/20181103195754.jpg"></p><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p>在JVM中，对象在内存中的布局分为三块区域：对象头、实例数据和对齐填充，一般而言，synchronized使用的锁对象是存储在Java对象头里的。如果对象是非数组类型，则用2字宽存储对象头，如果对象是数组则会分配3个字宽，多出来的1个字记录的是数组长度。在32位虚拟机中，一字宽等于四字节，即32bit。</p><p><img src="/images/post-Synchronized-Summary/20181103203445.jpg"></p><p>Java对象头里的Mark Word里默认存储对象的HashCode，分代年龄和锁标记位。32位JVM的Mark Word的默认存储结构如下：</p><p><img src="/images/post-Synchronized-Summary/20181103203925.jpg"></p><p>在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。Mark Word可能变化为存储以下4种数据：</p><p><img src="/images/post-Synchronized-Summary/20181103204047.jpg"></p><p>在64位虚拟机下，Mark Word是64bit大小的，其存储结构如下：</p><p><img src="/images/post-Synchronized-Summary/20181103204423.jpg">        </p><h3 id="Synchronized同步方法底层原理"><a href="#Synchronized同步方法底层原理" class="headerlink" title="Synchronized同步方法底层原理"></a>Synchronized同步方法底层原理</h3><p>方法级的同步是隐式，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 ACC_SYNCHRONIZED 访问标志区分一个方法是否同步方法。当方法调用时，调用指令将会 检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。如果一个同步方法执行期间抛 出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放。</p><h3 id="Synchronized同步代码块底层原理"><a href="#Synchronized同步代码块底层原理" class="headerlink" title="Synchronized同步代码块底层原理"></a>Synchronized同步代码块底层原理</h3><p>从字节码中可知同步语句块的实现使用的是monitorenter 和 monitorexit 指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置，当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><h2 id="实例对象锁的线程安全"><a href="#实例对象锁的线程安全" class="headerlink" title="实例对象锁的线程安全"></a>实例对象锁的线程安全</h2><p>当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized 方法，毕竟一个对象只有一把锁，当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所以无法访问该对象的其他synchronized实例方法，但是其他线程还是可以访问该实例对象的其他非synchronized方法，当然如果是一个线程 A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的 synchronized 方法 f2(当前对象锁是obj2)，这样是允许的，因为两个实例对象锁并不同相同，此时如果两个线程操作数据并非共享的，线程安全是有保障的，遗憾的是如果两个线程操作的是共享数据，那么线程安全就有可能无法保证了，如下代码将演示出该现象:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class AccountingSyncBad implements Runnable&#123;</span><br><span class="line">    static int i=0;</span><br><span class="line">    public synchronized void increase()&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int j=0;j&lt;1000000;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        //new新实例</span><br><span class="line">        Thread t1=new Thread(new AccountingSyncBad());</span><br><span class="line">        //new新实例</span><br><span class="line">        Thread t2=new Thread(new AccountingSyncBad());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        //join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码与前面不同的是我们同时创建了两个新实例AccountingSyncBad，然后启动两个不同的线程对共享变量i进行操作，但很遗憾操作结果是1452317而不是期望结果2000000，因为上述代码犯了严重的错误，虽然我们使用synchronized修饰了increase方法，但却new了两个不同的实例对象，这也就意味着存在着两个不同的实例对象锁，因此t1和t2都会进入各自的对象锁，也就是说t1和t2线程使用的是不同的锁，因此线程安全是无法保证的。</p><h2 id="锁的升级"><a href="#锁的升级" class="headerlink" title="锁的升级"></a>锁的升级</h2><p>Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。<br></br><br>Java SE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java SE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率，下文会详细分析。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>Hotspot的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要花费CAS操作来加锁和解锁，而只需简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p><h4 id="偏向锁的撤销"><a href="#偏向锁的撤销" class="headerlink" title="偏向锁的撤销"></a>偏向锁的撤销</h4><p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态，如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。下图中的线程1演示了偏向锁初始化的流程，线程2演示了偏向锁撤销的流程。</p><p><img src="/images/post-Synchronized-Summary/20181103204723.jpg">      </p><h4 id="关闭偏向锁"><a href="#关闭偏向锁" class="headerlink" title="关闭偏向锁"></a>关闭偏向锁</h4><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟-XX：BiasedLockingStartupDelay &#x3D; 0。如果你确定自己应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁-XX:-UseBiasedLocking&#x3D;false，那么默认会进入轻量级锁状态。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><h4 id="轻量级锁加锁"><a href="#轻量级锁加锁" class="headerlink" title="轻量级锁加锁"></a>轻量级锁加锁</h4><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p><h4 id="轻量级锁解锁"><a href="#轻量级锁解锁" class="headerlink" title="轻量级锁解锁"></a>轻量级锁解锁</h4><p>轻量级解锁时，会使用原子的CAS操作来将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。下图是两个线程同时争夺锁，导致锁膨胀的流程图。</p><p><img src="/images/post-Synchronized-Summary/20181103234923.jpg">  </p><p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。</p><h2 id="锁的优缺点对比"><a href="#锁的优缺点对比" class="headerlink" title="锁的优缺点对比"></a>锁的优缺点对比</h2><p><img src="/images/post-Synchronized-Summary/20181103235211.jpg">  </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>方腾飞：《Java并发编程的艺术》</li><li><a href="https://blog.csdn.net/javazejian/article/details/72828483">深入理解Java并发之synchronized实现原理</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本数据结构-Dict</title>
      <link href="/2018/11/03/Redis-DataStructure-3-Dict/"/>
      <url>/2018/11/03/Redis-DataStructure-3-Dict/</url>
      
        <content type="html"><![CDATA[<h2 id="Dict简介"><a href="#Dict简介" class="headerlink" title="Dict简介"></a>Dict简介</h2><p>字典（dict）是Redis一个重要的基础数据结构，它是一个用于维护key和value映射关系的数据结构，与很多语言中的Map或dictionary类似。不过，这只是它在Redis中的一个用途而已，它在Redis中被使用的地方还有很多。比如Redis的数据库就是使用字典来作为底层实现的，对数据的增删查改操作都是构建在对字典的操作之上，又比如，一个Redis hash结构，当它的field较多时，便会采用dict来存储。再比如，<strong>Redis配合使用dict和skiplist来共同维护一个sorted set。</strong><br></br><br>字典经常作为一种数据结构内置在很多高级的编程语言里，但Redis的实现所使用的C语言中并没有内置这种数据结构，因此<strong>Redis构建了自己的字典实现</strong>。</p><h2 id="Dict的双数组哈希表"><a href="#Dict的双数组哈希表" class="headerlink" title="Dict的双数组哈希表"></a>Dict的双数组哈希表</h2><p>Redis中的字典由dict.h&#x2F;dict结构表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="type">void</span> *privatedata;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当rehash不在进行时，值为-1</span></span><br><span class="line">    <span class="type">int</span> trehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">&#125;dict;</span><br></pre></td></tr></table></figure><p>其中ht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只用于对ht[0]哈希表进行rehash时。</br><br>除了ht[1]之外，另一个和rehash有关的属性就是rehashidx，它记录了rehash目前的进度，如果目前没有在进行rehash，那么它的值为-1。</p><p><img src="/images/post-Redis-DataStructure-3-Dict/20181103132847.jpg"></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>Redis计算哈希值和索引值的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用字典设置的哈希函数，计算键key的哈希值</span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line"></span><br><span class="line"># 使用哈希值的 sizemark 属性和和哈希值，计算出索引值</span><br><span class="line"># 根据情况不同，ht[x]可以是ht[<span class="number">0</span>]或者ht[<span class="number">1</span>]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemark;</span><br></pre></td></tr></table></figure><p>当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值。</p><h2 id="键冲突"><a href="#键冲突" class="headerlink" title="键冲突"></a>键冲突</h2><p>键冲突解决方法是链地址法（拉链法），与Java里的hashmap一样使用单向链表把同一个索引上的多个节点连接起来。<br>因为dictEntry节点组成的链表没有指向链表表尾的指针，所以为了速度考虑，程序总是把新节点添加到链表的表头位置（复杂度为O(1)），排在其它已有节点的前面。</p><h2 id="Rehash"><a href="#Rehash" class="headerlink" title="Rehash"></a>Rehash</h2><p>哈希表的扩展与收缩是通过执行rehash（重新散列）操作来完成，操作步骤如下：</p><ol><li>空间分配：<br>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量（也即是ht[0].used属性的值）:</li></ol><ul><li>如果是扩展操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的2ⁿ（2的n次幂）。</li><li>如果是收缩操作，那么ht[1]的大小为第一个大于等于ht[0].used的2ⁿ。</li></ul><ol start="2"><li>rehash：<br>将保存在ht[0]中的所有键值对rehash到ht[1]上面：rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上。</li><li>替换：<br>当ht[0]包含的所有键值对都迁移到ht[1]之后（ht[0]变为空表），释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新创建一个空白哈希表，为下一次rehash做准备。</li></ol><h3 id="哈希表的扩展与收缩"><a href="#哈希表的扩展与收缩" class="headerlink" title="哈希表的扩展与收缩"></a>哈希表的扩展与收缩</h3><p>当以下条件中的任意一个被满足时，程序会自动开始对哈希表执行扩展操作：</p><ol><li><p>没在执行BGSAVE命令或者BGREWRITEAOF命令，而哈希表的负载因子≥1。</p></li><li><p>有在执行BGSAVE命令或者BGREWRITEAOF命令,并且哈希表的负载因子≥0.5。</p><p> 负载因子计算为：<br> load_factor &#x3D; ht[0].used &#x2F; ht[0].size;</p></li></ol><p>负载因子＜0.1时，进行收缩操作。</p><h2 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h2><p>Redis的扩展或收缩需要把ht[0]所有键值对rehash到ht[1]里，这个动作并不是一次性、集中式完成的，而是分多次、渐进式完成的。<br>这么做的原因是，当哈希表数据量庞大到一定量级时，一次性rehash操作会带来庞大的计算量，这样可能会导致服务器在一段时间内停止服务。<br>以下是渐进式rehash的详细步骤：</p><ol><li>为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。</li><li>在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示工作正式开始。</li><li>在rehash进行期间，每次对字典执行增删改查操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash完成之后，程序将rehashidx属性的值增1。</li><li>随着字典操作的不断执行，最终在某个时间节点上，ht[0]的所有键值对都会到了ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作完成。</li></ol><strong>因为在进行渐进式rehash的过程中，字典会同时使用ht[0]和ht[1]两个哈希表，所以期间的增删查改操作都会在两个表上进行，例如查找操作时，先会在ht[0]里查找，如果没找到，再查ht[1]，诸如此类。增加操作时，那么新添加的键值对一律会被保存到ht[1]里，而ht[0]则不进行添加，保证了ht[0]包含的键值对只减不增，并随着rehash操作的执行完毕而最终变成空表。</strong>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本数据结构-SkipList</title>
      <link href="/2018/10/26/Redis-DataStructure-2-SkipList/"/>
      <url>/2018/10/26/Redis-DataStructure-2-SkipList/</url>
      
        <content type="html"><![CDATA[<h2 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h2><p>有序集合键（sorted set）提供的操作非常丰富，可以满足非常多的应用场景。这也意味着，sorted set相对来说实现比较复杂。Redis使用跳跃表（skipList）作为sorted set的底层实现之一，如果一个sorted set包含的元素数量比较多，又或者sorted set中元素的成员（member）是比较长的字符串时，Redis就会使用跳跃表来作为sorted set的底层实现。</p><p>跳跃表是一种有序数据结构，能支持平均O(logN)、最坏O(N)复杂度的节点查找，在大部分情况下，跳跃表的效率可以和平衡树相媲美，所以不少程序都使用跳跃表来替代平衡树。</p><h2 id="sorted-set的数据结构"><a href="#sorted-set的数据结构" class="headerlink" title="sorted set的数据结构"></a>sorted set的数据结构</h2><p>有序集合（sorted set）的数据结构底层实现就是跳跃表+字典，如图：<br><img src="/images/post-Redis-DataStructure-2-SkipList/20181031030619.jpg"></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181031030813.jpg"></p><h2 id="跳跃表的数据结构"><a href="#跳跃表的数据结构" class="headerlink" title="跳跃表的数据结构"></a>跳跃表的数据结构</h2><p>一般查找问题的解法分为两个大类：一个是基于各种平衡树，一个是基于哈希表。但skiplist却比较特殊，它没法归属到这两大类里面。</p><p>skiplist，顾名思义，首先它是一个list。实际上，它是在有序链表的基础上发展起来的。</p><p>下面我们从头分析一个要求有序的线性结构的查找元素及插入新元素存在的性能问题。</p><p>最容易表达线性结构的自然是数组和链表。可是，无论是数组还是链表，在插入新元素的时候，都会存在性能问题。</p><p> 如果使用数组，插入新元素的方式如下：<br/></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026023319.jpg"></p><p>如果要插入一个值是3的元素，首先要知道这个元素应该插入的位置。使用二分查找可以最快定位，这一步时间复杂度是O（logN）。<br/></p><p>插入过程中，原数组中所有大于3的元素都要右移，这一步时间复杂度是O（N）。所以总体时间复杂度是O（N）。<br/></p><p> 如果使用链表，插入新元素的方式如下：<br/></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026024211.jpg"></p><p>如果要插入一个值是3的元素，首先要知道这个元素应该插入的位置。链表无法使用二分查找，只能和原链表中的节点逐一比较大小来确定位置。这一步的时间复杂度是O（N）。<br/></p><p>插入的过程倒是很容易，直接改变节点指针的目标，时间复杂度O（1）。因此总体的时间复杂度也是O（N）。<br/></p><p>这对于拥有几十万元素的集合来说，这两种方法显然都太慢了。<br/></p><p>问题来了，既然数组也不行，链表也不想，那要用什么结构才好？<br/></p><p>我们可以利用索引的思想，提取出链表中的部分关键节点。<br/></p><p>比如给定一个长度是7的有序链表，节点值依次是1→2→3→5→6→7→8。那么我们可以取出所有奇数值的节点作为关键字。<br/><br/></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026024723.jpg"></p><p>此时如果要插入一个值是4的新节点，不再需要和原节点8,7,6,5,3逐一比较，只需要比较关键节点7,5,3 <br/></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026024910.jpg"></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026024923.jpg"></p><p>确定了新节点在关键节点中的位置（3和5之间），就可以回到原链表，迅速定位到对应的位置插入（同样3和5之间）</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026025910.jpg"></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026030000.jpg"></p><p>当链表中有1W设置10W个节点，优化效果会很明显，比较次数就整整减少了一半！但是这样的做法只是增加了50%的额外空间，却换来了一倍的性能提高。<br/></p><p>不过我们可以进一步思考，既然已经提取了一层关键节点作为索引，那我们为何不能从索引中进一步提取，再提取一层索引的索引呢？</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026030404.jpg"></p><p>于是乎，我们有了2级索引之后，新的节点可以先和2级索引比较，确定大体范围；然后再和1级索引比较；最后再回到原链表，找到并插入对应位置。<br/><br/></p><p>当节点很多的时候，比较次数会减少到原来的1&#x2F;4，如是者，如果我们再继续往上提取更高层的索引，保证每一层是上一层节点的一半，一直到同一层只有两个节点（因为只有一个节点没有比较的意义），那么这样一个多层链表结构，便是我们的跳跃表。</p><p>那么，跳跃表的介绍引子至此已告一段落，下面是一个正儿八经的跳跃表的概念的介绍：<br/><br/></p><p>我们先来看一个有序链表，如下图（最左侧的灰色节点表示一个空的头结点）：</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026031604.jpg"></p><p>在这样一个链表中，如果我们要查找某个数据，那么需要从头开始逐个进行比较，直到找到包含数据的那个节点，或者找到第一个比给定数据大的节点为止（没找到）。也就是说，时间复杂度为O(n)。同样，当我们要插入新数据的时候，也要经历同样的查找过程，从而确定插入位置。<br/><br/></p><p>假如我们每相邻两个节点增加一个指针，让指针指向下下个节点，如下图：</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026031812.jpg"></p><p>这样所有新增加的指针连成了一个新的链表，但它包含的节点个数只有原来的一半（上图中是7, 19, 26）。现在当我们想查找数据的时候，可以先沿着这个新链表进行查找。当碰到比待查数据大的节点时，再回到原来的链表中进行查找。比如，我们想查找23，查找的路径是沿着下图中标红的指针所指向的方向进行的：</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026031927.jpg"></p><ul><li>23首先和7比较，再和19比较，比它们都大，继续向后比较。</li><li>但23和26比较的时候，比26要小，因此回到下面的链表（原链表），与22比较。</li><li>23比22要大，沿下面的指针继续向后和26比较。23比26小，说明待查数据23在原链表中不存在，而且它的插入位置应该在22和26之间。</li></ul><p>在这个查找过程中，由于新增加的指针，我们不再需要与链表中每个节点逐个进行比较了。需要比较的节点数大概只有原来的一半。<br/></p><p>利用同样的方式，我们可以在上层新产生的链表上，继续为每相邻的两个节点增加一个指针，从而产生第三层链表。如下图：</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026032038.jpg"></p><p>在这个新的三层链表结构上，如果我们还是查找23，那么沿着最上层链表首先要比较的是19，发现23比19大，接下来我们就知道只需要到19的后面去继续查找，从而一下子跳过了19前面的所有节点。可以想象，当链表足够长的时候，这种多层链表的查找方式能让我们跳过很多下层节点，大大加快查找的速度。<br/></p><p>skiplist正是受这种多层链表的想法的启发而设计出来的。实际上，按照上面生成链表的方式，上面每一层链表的节点个数，是下面一层的节点个数的一半，这样查找过程就非常类似于一个二分查找，使得查找的时间复杂度可以降低到O(log n)。但是，这种方法在插入数据的时候有很大的问题。新插入一个节点之后，就会打乱上下相邻两层链表上节点个数严格的2:1的对应关系。如果要维持这种对应关系，就必须把新插入的节点后面的所有节点（也包括新插入的节点）重新进行调整，这会让时间复杂度重新蜕化成O(n)。删除数据也有同样的问题。</p><p>skiplist为了避免这一问题，它不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是为每个节点随机出一个层数(level)。比如，一个节点随机出的层数是3，那么就把它链入到第1层到第3层这三层链表中。为了表达清楚，下图展示了如何通过一步步的插入操作从而形成一个skiplist的过程:<br></p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026032227.jpg"></p><p>从上面skiplist的创建和插入过程可以看出，每一个节点的层数（level）是随机出来的，而且新插入一个节点不会影响其它节点的层数。因此，插入操作只需要修改插入节点前后的指针，而不需要对很多节点都进行调整。这就降低了插入操作的复杂度。实际上，这是skiplist的一个很重要的特性，这让它在插入性能上明显优于平衡树的方案。这在后面我们还会提到。</p><p>根据上图中的skiplist结构，我们很容易理解这种数据结构的名字的由来。skiplist，翻译成中文，可以翻译成“跳表”或“跳跃表”，指的就是除了最下面第1层链表之外，它会产生若干层稀疏的链表，这些链表里面的指针故意跳过了一些节点（而且越高层的链表跳过的节点越多）。这就使得我们在查找数据的时候能够先在高层的链表中进行查找，然后逐层降低，最终降到第1层链表来精确地确定数据位置。在这个过程中，我们跳过了一些节点，从而也就加快了查找速度。</p><p>刚刚创建的这个skiplist总共包含4层链表，现在假设我们在它里面依然查找23，下图给出了查找路径：</p><p><img src="/images/post-Redis-DataStructure-2-SkipList/20181026032425.jpg"></p><p>需要注意的是，前面演示的各个节点的插入过程，实际上在插入之前也要先经历一个类似的查找过程，在确定插入位置后，再完成插入操作。</p><p>至此，skiplist的查找和插入操作，我们已经很清楚了。而删除操作与插入操作类似，我们也很容易想象出来。这些操作我们也应该能很容易地用代码实现出来。</p><p>当然，实际应用中的skiplist每个节点应该包含key和value两部分。前面的描述中我们没有具体区分key和value，但实际上列表中是按照key进行排序的，查找过程也是根据key在比较。</p><p>但是，如果你是第一次接触skiplist，那么一定会产生一个疑问：节点插入时随机出一个层数，仅仅依靠这样一个简单的随机数操作而构建出来的多层链表结构，能保证它有一个良好的查找性能吗？为了回答这个疑问，我们需要分析skiplist的统计性能。</p><p>在分析之前，我们还需要着重指出的是，执行插入操作时计算随机数的过程，是一个很关键的过程，它对skiplist的统计特性有着很重要的影响。这并不是一个普通的服从均匀分布的随机数，它的计算过程如下：</p><p>首先，每个节点肯定都有第1层指针（每个节点都在第1层链表里）。</p><p>如果一个节点有第i层(i&gt;&#x3D;1)指针（即节点已经在第1层到第i层链表中），那么它有第(i+1)层指针的概率为p。</p><p>节点最大的层数不允许超过一个最大值，记为MaxLevel。</p><p>这个计算随机层数的伪码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">randomLevel()</span><br><span class="line">    level := 1</span><br><span class="line">    // random()返回一个[0...1)的随机数</span><br><span class="line">    while random() &lt; p and level &lt; MaxLevel do</span><br><span class="line">        level := level + 1</span><br><span class="line">    return level</span><br></pre></td></tr></table></figure><p>randomLevel()的伪码中包含两个参数，一个是p，一个是MaxLevel。在Redis的skiplist实现中，这两个参数的取值为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = 1/4</span><br><span class="line">MaxLevel = 32</span><br></pre></td></tr></table></figure><h2 id="skiplist与平衡树、哈希表的比较"><a href="#skiplist与平衡树、哈希表的比较" class="headerlink" title="skiplist与平衡树、哈希表的比较"></a>skiplist与平衡树、哈希表的比较</h2><ul><li><p>skiplist和各种平衡树（如AVL、红黑树等）的元素是有序排列的，而哈希表不是有序的。因此，在哈希表上只能做单个key的查找，不适宜做范围查找。所谓范围查找，指的是查找那些大小在指定的两个值之间的所有节点。</p></li><li><p>在做范围查找的时候，平衡树比skiplist操作要复杂。在平衡树上，我们找到指定范围的小值之后，还需要以中序遍历的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在skiplist上进行范围查找就非常简单，只需要在找到小值之后，对第1层链表进行若干步的遍历就可以实现。</p></li><li><p>平衡树的插入和删除操作可能引发子树的调整，逻辑复杂，而skiplist的插入和删除只需要修改相邻节点的指针，操作简单又快速。</p></li><li><p>从内存占用上来说，skiplist比平衡树更灵活一些。一般来说，平衡树每个节点包含2个指针（分别指向左右子树），而skiplist每个节点包含的指针数目平均为1&#x2F;(1-p)，具体取决于参数p的大小。如果像Redis里的实现一样，取p&#x3D;1&#x2F;4，那么平均每个节点包含1.33个指针，比平衡树更有优势。</p></li><li><p>查找单个key，skiplist和平衡树的时间复杂度都为O(log n)，大体相当；而哈希表在保持较低的哈希值冲突概率的前提下，查找时间复杂度接近O(1)，性能更高一些。所以我们平常使用的各种Map或dictionary结构，大都是基于哈希表实现的。</p></li><li><p>从算法实现难度上来比较，skiplist比平衡树要简单得多。</p></li></ul><h2 id="Redis中的sorted-set"><a href="#Redis中的sorted-set" class="headerlink" title="Redis中的sorted set"></a>Redis中的sorted set</h2><p>我们前面提到过，Redis中的sorted set，是在skiplist, dict和ziplist基础上构建起来的:</p><p>当数据较少时，sorted set是由一个ziplist来实现的。</p><p>当数据多的时候，sorted set是由一个叫zset的数据结构来实现的，这个zset包含一个dict + 一个skiplist。dict用来查询数据到分数(score)的对应关系，而skiplist用来根据分数查询数据（可能是范围查找）。</p><p>在这里我们先来讨论一下前一种情况——基于ziplist实现的sorted set。在本系列前面关于ziplist的文章里，我们介绍过，ziplist就是由很多数据项组成的一大块连续内存。由于sorted set的每一项元素都由数据和score组成，因此，当使用zadd命令插入一个(数据, score)对的时候，底层在相应的ziplist上就插入两个数据项：数据在前，score在后。</p><p>ziplist的主要优点是节省内存，但它上面的查找操作只能按顺序查找（可以正序也可以倒序）。因此，sorted set的各个查询操作，就是在ziplist上从前向后（或从后向前）一步步查找，每一步前进两个数据项，跨域一个(数据, score)对。</p><p>随着数据的插入，sorted set底层的这个ziplist就可能会转成zset的实现（转换过程详见t_zset.c的zsetConvert）。那么到底插入多少才会转呢？</p><p>在redis.conf中的ADVANCED CONFIG部分的两个Redis配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br></pre></td></tr></table></figure><p>这个配置的意思是说，在如下两个条件之一满足的时候，ziplist会转成zset（具体的触发条件参见t_zset.c中的zaddGenericCommand相关代码）：</p><p>当sorted set中的元素个数，即(数据, score)对的数目超过128的时候，也就是ziplist数据项超过256的时候。</p><p>当sorted set中插入的任意一个数据的长度超过了64的时候。</p><p>最后，zset结构的代码定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct zset &#123;</span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><h2 id="Redis为什么用skiplist而不用平衡树？"><a href="#Redis为什么用skiplist而不用平衡树？" class="headerlink" title="Redis为什么用skiplist而不用平衡树？"></a>Redis为什么用skiplist而不用平衡树？</h2><p>在前面我们对于skiplist和平衡树、哈希表的比较中，其实已经不难看出Redis里使用skiplist而不用平衡树的原因了。现在我们看看，对于这个问题，Redis的作者 @antirez 是怎么说的：</p><p>There are a few reasons:</p><ol><li><p>They are not very memory intensive. It’s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.</p></li><li><p>A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.</p></li><li><p>They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</p></li></ol><p>这段话原文出处：</p><p><a href="https://news.ycombinator.com/item?id=1171423">https://news.ycombinator.com/item?id=1171423</a><br>这里从内存占用、对范围查找的支持和实现难易程度这三方面总结的原因</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/2018/10/21/dead-lock/"/>
      <url>/2018/10/21/dead-lock/</url>
      
        <content type="html"><![CDATA[<h2 id="“死锁”的含义"><a href="#“死锁”的含义" class="headerlink" title="“死锁”的含义"></a>“死锁”的含义</h2><p>所谓死锁： 是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><h2 id="Java代码举例"><a href="#Java代码举例" class="headerlink" title="Java代码举例"></a>Java代码举例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deadlock</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取o1对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>( o1 ) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println( <span class="string">&quot;l1 lock o1&quot;</span> );</span><br><span class="line">                                <span class="comment">// 获取o1后先等一会儿，让Lock2有足够的时间锁住o2</span></span><br><span class="line">Thread.sleep( <span class="number">1000</span> );</span><br><span class="line"><span class="comment">// 接着获取o2对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>( o2 ) &#123;</span><br><span class="line">System.out.println( <span class="string">&quot;l1 lock o2&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>( Exception e ) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 获取o2对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>( o2 ) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println( <span class="string">&quot;l2 lock o2&quot;</span> );</span><br><span class="line">                                <span class="comment">// 获取o2后先等一会儿，让Lock1有足够的时间锁住o1</span></span><br><span class="line">Thread.sleep( <span class="number">1000</span> ); </span><br><span class="line"><span class="comment">// 接着获取o1对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>( o1 ) &#123;</span><br><span class="line">System.out.println( <span class="string">&quot;l2 lock o1&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>( Exception e ) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line"><span class="type">Deadlock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Deadlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>( <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">lock.lock1();</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>( <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">lock.lock2();</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建两个对象，两条线程，用synchronized锁住对象，线程1先锁对象1后锁对象2，线程2先锁对象2后锁对象1。假设线程1先锁对象1，然后休眠1秒，线程锁对象2，之后线程1就没法锁对象2，线程2也没法锁住对象1，双方都在等待对方释放自己在等待的锁。</p><h2 id="“死锁”产生的原因及四个必要条件"><a href="#“死锁”产生的原因及四个必要条件" class="headerlink" title="“死锁”产生的原因及四个必要条件"></a>“死锁”产生的原因及四个必要条件</h2><h3 id="“死锁”的原因可归结为"><a href="#“死锁”的原因可归结为" class="headerlink" title="“死锁”的原因可归结为"></a>“死锁”的原因可归结为</h3><ol><li><p>竞争资源。当系统中供多个进程共享的资源如打印机、公用队列等，其数目不足以满足进程的需要时，会引起诸进程的竞争而产生死锁。</p></li><li><p>进程间推进顺序非法。进程在运行过程中，请求和释放资源的顺序不当，也同样会导致产生进程死锁。</p></li></ol><h3 id="产生“死锁”的四个必要条件"><a href="#产生“死锁”的四个必要条件" class="headerlink" title="产生“死锁”的四个必要条件"></a>产生“死锁”的四个必要条件</h3><ul><li><p>互斥（Mutual exclusion）：存在这样一种资源，它在某个时刻只能被分配给一个执行绪（也称为线程）使用；</p></li><li><p>持有（Hold and wait）：当请求的资源已被占用从而导致执行绪阻塞时，资源占用者不但没有释放该资源，而且还可以继续请求更多资源；</p></li><li><p>不可剥夺（No preemption）：执行绪获得到的互斥资源不可被强行剥夺，换句话说，只有资源占用者自己才能释放资源；</p></li><li><p>环形等待（Circular wait）：若干执行绪以不同的次序获取互斥资源，从而形成环形等待的局面，想象在由多个执行绪组成的环形链中，每个执行绪都在等待下一个执行绪释放它持有的资源。</p></li></ul><h3 id="结合代码例子理解“死锁”的产生"><a href="#结合代码例子理解“死锁”的产生" class="headerlink" title="结合代码例子理解“死锁”的产生"></a>结合代码例子理解“死锁”的产生</h3><ul><li>互斥：两条线程各自占有的锁</li><li>持有：线程1持有线程2想要获得的锁1，线程2持有线程1想要的锁2，双方都没有 释放各自占有的对象锁，并且继续请求对方占有的锁</li><li>不可剥夺：两条线程得到互斥资源都没法被强行剥夺</li><li>环形等待：T1{O1}→→T2{O2}→→T1{O1}，{}表示被左边的线程占有{}里的资源，→→表示左边线程申请（等待）右边线程释放其占有的资源<br>PS：环形等待可以是多个线程对多个资源的争夺</li></ul><h2 id="“死锁”问题定位"><a href="#“死锁”问题定位" class="headerlink" title="“死锁”问题定位"></a>“死锁”问题定位</h2><h3 id="获取java进程ID"><a href="#获取java进程ID" class="headerlink" title="获取java进程ID"></a>获取java进程ID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep <span class="string">&quot;java&quot;</span></span><br></pre></td></tr></table></figure><h3 id="用jstack看进程堆栈"><a href="#用jstack看进程堆栈" class="headerlink" title="用jstack看进程堆栈"></a>用jstack看进程堆栈</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换进程ID（pid）</span></span><br><span class="line">jstack -l &#123;pid&#125; | grep -A50 -B10 <span class="string">&quot;deadlock&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/post-dead-lock/20181021190116.jpg" alt="Java线程间死锁堆栈"></p><h2 id="“死锁”的预防和解除"><a href="#“死锁”的预防和解除" class="headerlink" title="“死锁”的预防和解除"></a>“死锁”的预防和解除</h2><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁，消除产生死锁的四个必要条件中的任何一个都可以预防和解除死锁。不难看出，在死锁的四个必要条件中，第二、三和四项条件比较容易消除。</p><ol><li><p>静态分配：采用资源静态分配策略（进程资源静态分配方式是指一个进程在建立时就分配了它需要的全部资源），破坏”部分分配”条件；</p></li><li><p>可剥夺：允许进程剥夺使用其他进程占有的资源，从而破坏”不可剥夺”条件；</p></li><li><p>有序分配：采用资源有序分配法，破坏”环路”条件</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/yunfenglw/article/details/45950305">“死锁”四个必要条件的合理解释</a><br><br/><br/><br/></p>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本数据结构-SDS</title>
      <link href="/2018/10/14/Redis-DataStructure-1-String/"/>
      <url>/2018/10/14/Redis-DataStructure-1-String/</url>
      
        <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>&emsp;&emsp;String是我们最常用的Redis基本数据结构之一。Redis没有直接使用C语言传统的字符串表示（以空字符结尾的字符数组，以下简称C字符串），而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型，并将SDS用作Redis的默认字符串表示。<br>&emsp;&emsp;在Redis里边，C字符串只会作为字符串字面量用在一些无须对字符串值进行修改的地方，比如打印日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisLog(REDIS_WARNING, &quot;Redis is now ready to exit, bye bye...&quot;);</span><br></pre></td></tr></table></figure><h2 id="SDS与C字符串的区别"><a href="#SDS与C字符串的区别" class="headerlink" title="SDS与C字符串的区别"></a>SDS与C字符串的区别</h2><h3 id="常数级复杂度获取字符串长度"><a href="#常数级复杂度获取字符串长度" class="headerlink" title="常数级复杂度获取字符串长度"></a>常数级复杂度获取字符串长度</h3><p>&emsp;&emsp;C语言使用长度为N+1的字符串来表示长度为N的字符串，并且字符数组的最后一个元素总是空字符’\0’<br/><br><img src="/images/post-Redis-DataStructure-1-String/20181014173701.jpg" alt="C字符串"><br>&emsp;&emsp;因为C字符串并不记录自身的长度信息，所以为了获取一个C字符串的长度，程序必须便利整个字符数组，对遇到的每个字符进行技术，直到遇到代表字符串结尾的空字符为止，这个操作的复杂度为O(N)<br><img src="/images/post-Redis-DataStructure-1-String/20181014180720.jpg" alt="#计算C字符串长度的过程"><br>&emsp;&emsp;和C字符串不同，因为SDS在len属性中记录了SDS本身的长度，所以获取一个SDS长度的复杂度仅为O(1)，这确保了获取字符串长度的操作不会成为Redis的性能瓶颈。譬如”Redis”的长度为5，程序只需要访问SDS的len属性就可以立即得到长度值为5字节<br><img src="/images/post-Redis-DataStructure-1-String/20181014180419.jpg" alt="#5字节长的SDS"></p><h3 id="杜绝缓冲区溢出"><a href="#杜绝缓冲区溢出" class="headerlink" title="杜绝缓冲区溢出"></a>杜绝缓冲区溢出</h3><p>&emsp;&emsp;由于C字符串不记录自身长度，会带来另一个问题，就是容易造成缓冲区溢出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *strcat(char *dest, const char *src)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;假定用户在执行strcat函数时，已经为dest分配了足够多的内存，则可以容纳src字符串中的所有内容，而一旦这个假定不成立时，就会产生缓冲区溢出。<br>&emsp;&emsp;举个例子，假设程序里有两个在内存中紧邻着的C字符串s1和s2，其中s1保存了字符串”Redis”，而s2则保存了字符串”MongoDB”，如图所示：<br><img src="/images/post-Redis-DataStructure-1-String/20181014183933.jpg" alt="在内存中紧邻的两个C字符串"></p><p>&emsp;&emsp;如果此时要通过执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcat(s1, &quot; Cluster&quot;);</span><br></pre></td></tr></table></figure><p>将s1的内容修改为”Redis Cluster”，但如果粗心的他却忘了在执行strcat之前为s1分配足够的空间，那么在strcat函数执行之后，s1的数据将溢出到s2所在的空间中，导致s2的内容被意外地修改了，如图所示：<br><img src="/images/post-Redis-DataStructure-1-String/20181014184447.jpg" alt="#s1的内容溢出到了s2所在的位置上"></p><p>&emsp;&emsp;SDS的空间分配策略则完全杜绝了发生这种情况的可能性：当SDS API需要对SDS的内容进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，API会自动把SDS的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现上述的缓冲区溢出问题。</p><h3 id="减少修改字符串时带来的内容重分配次数"><a href="#减少修改字符串时带来的内容重分配次数" class="headerlink" title="减少修改字符串时带来的内容重分配次数"></a>减少修改字符串时带来的内容重分配次数</h3><p>&emsp;&emsp;因为C字符串并不记录自身的长度，所以一个C字符串的底层实现总是额外的多出一个字符空间用于保存空字符。因为C字符串的长度和底层数组长度之间存在着这种关联性，所以每次增长或缩短一个C字符串，都总会在保存这个C字符串的数组时引起一次内存重分配操作</p><p>&emsp;&emsp;而因为内存重分配涉及复杂的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作：</p><ul><li>在一般程序中，如果修改字符串长度的情况不太常出现，那么每次修改都执行一次内存重分配是可以接受的，但Redis作为数据库，经常被用于速度要求严苛、数据被频繁修改的场合，如果每次修改字符串的长度都需要执行一次内存重分配的话，那么光是这个操作的时间就会占去修改字符串所用时间的一大部分，如果这种修改频繁地发生的话，可能还会对性能造成影响</li></ul><p>&emsp;&emsp;为了避免C字符串的这种缺陷，SDS通过未使用空间解除了字符串长度和底层数组长度之间的关联：在SDS中，buf数组的长度不一定就是字符数加1，数组里边可以包含未使用的字节，而这些字节的数量就由SDS的free属性记录<br>&emsp;&emsp;通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略：</p><ol><li><p>空间预分配<br>&emsp;&emsp;空间预分配用于优化SDS的字符串增长操作：利用额外的未使用空间进行预分配以减少内存的频繁分配，这一点类似Java中的ArrayList。<br>&emsp;&emsp;当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。而字符串最大长度为 512M。<br>譬如，假如SDS进行修改后变为13字节（小于1MB），那么此时SDS的buf数组的实际长度将变成13+13+1&#x3D;27字节（额外的1字节用于保存空字符）。假如SDS进行修改后变为2MB（大于等于1MB），则程序将会分配1MB的未使用空间，也就是说，SDS的buf数组的实际长度将为2MB + 1MB + 1byte。</p></li><li><p>惰性空间释放<br>&emsp;&emsp;当要缩短SDS保存的字符串时，程序并不立即使用内存充分配来回收缩短后多出来的字节，而是使用表头的free成员将这些字节记录起来以备用。</p></li></ol><h3 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h3><p>&emsp;&emsp;SDS是二进制安全的，它可以存储任意二进制数据，因为SDS使用len属性的值而不是像C语言字符串那样以空字符（‘\0’）来标识字符串结束。</p><p>&emsp;&emsp;因为传统C字符串符合某种编码（比如ASCII），字符串不仅末尾，就连字符串里的内容也不能包含标记着结束的字符。如ASCII这种编码的操作的特点就是：遇零则止。即，当读一个字符串时，只要遇到’\0’结尾，就认为到达末尾，就忽略’\0’结尾以后的所有字符。因此，如果传统字符串保存图片、音频、视频等二进制文件，操作文件时就被截断了。</p><h3 id="兼容部分C字符串函数"><a href="#兼容部分C字符串函数" class="headerlink" title="兼容部分C字符串函数"></a>兼容部分C字符串函数</h3><p>&emsp;&emsp;虽然SDS的API都是二进制安全的，但它们一样遵循C字符串结尾的惯例：这些API总会将SDS保存的数据的末尾设置为空字符，并且总会在为buf数组分配空间时多分配一个字节来容纳这个空字符，这是为了让那些保存文本数据的SDS可以重用一部分&lt;string.h&gt;库定义的函数，避免不必要的代码重复。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/post-Redis-DataStructure-1-String/20181014212907.jpg" alt="C字符串与SDS之间的区别"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加搜索功能</title>
      <link href="/2018/10/14/Hexo-Search/"/>
      <url>/2018/10/14/Hexo-Search/</url>
      
        <content type="html"><![CDATA[<p>本文旨在记录站主基于hexo-generator-search插件实现本站的站内文章搜索功能</p><h2 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h2><ol>  <li>基于hexo-generator-search生成全文内容索引xml文件</li>  <li>利用jQ.ajax请求xml文件并解析</li>  <li>jQ搜索关键字内容匹配xml内容</li></ol><br/>主要的部分还是插件写的好，对应的解析函数也是改造插件作者的，网上一搜一大堆此类文章，本文仅仅意在记录本站使用该插件实现搜索的过程<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br></pre></td></tr></table></figure><p>这个插件可以生成供搜索的索引数据，生成后的xml文件保存在自己站内目录，可以通过 <a href="http://localhost:4000/search.xml">http://localhost:4000/search.xml</a> 查看</p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>在hexo根目录底下的_config.xml里加入以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  #field: post, page or all（3个可选参数）</span><br></pre></td></tr></table></figure><h2 id="解析函数"><a href="#解析函数" class="headerlink" title="解析函数"></a>解析函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performLocalSearch = <span class="keyword">function</span>(<span class="params">datas,keywords</span>)&#123;</span><br><span class="line"><span class="comment">// perform local searching</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;&lt;ul class=&quot;search-result-list&quot;&gt;&#x27;</span>;</span><br><span class="line">datas.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> content_index = [];</span><br><span class="line"><span class="keyword">var</span> data_title = data.<span class="property">title</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">var</span> data_content = data.<span class="property">content</span>.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">&quot;&quot;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">var</span> data_url = <span class="string">&quot;/&quot;</span> + data.<span class="property">url</span>;</span><br><span class="line"><span class="keyword">var</span> index_title = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> index_content = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> first_occur = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// only match artiles with not empty titles and contents</span></span><br><span class="line"><span class="keyword">if</span>(data_title != <span class="string">&#x27;&#x27;</span> &amp;&amp; data_content != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">keywords.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">keyword, i</span>) &#123;</span><br><span class="line">index_title = data_title.<span class="title function_">indexOf</span>(keyword);</span><br><span class="line">index_content = data_content.<span class="title function_">indexOf</span>(keyword);</span><br><span class="line"><span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</span><br><span class="line">isMatch = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">index_content = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">first_occur = index_content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// show search results</span></span><br><span class="line"><span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">str += <span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;&#x27;</span>+ data_url +<span class="string">&#x27;&quot; class=&quot;search-result-title&quot; target=&quot;_blank&quot;&gt;&#x27;</span>+ <span class="string">&#x27;&gt; &#x27;</span> + data_title +<span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> content = data.<span class="property">content</span>.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// cut out characters</span></span><br><span class="line"><span class="keyword">var</span> start = first_occur - <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> end = first_occur + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</span><br><span class="line">start = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</span><br><span class="line">end = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(end &gt; content.<span class="property">length</span>)&#123;</span><br><span class="line">end = content.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> match_content = content.<span class="title function_">substr</span>(start, end); </span><br><span class="line"><span class="comment">// highlight all keywords</span></span><br><span class="line">keywords.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">keyword</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="title class_">RegExp</span>(keyword, <span class="string">&quot;gi&quot;</span>);</span><br><span class="line">match_content = match_content.<span class="title function_">replace</span>(regS, <span class="string">&#x27;&lt;em class=\&quot;search-keyword\&quot;&gt;&#x27;</span>+keyword+<span class="string">&#x27;&lt;/em&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">str += <span class="string">&#x27;&lt;p class=\&quot;search-result\&quot;&gt;&#x27;</span> + match_content +<span class="string">&#x27;...&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Search入口功能函数"><a href="#Search入口功能函数" class="headerlink" title="Search入口功能函数"></a>Search入口功能函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> searchFunc = <span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) &#123;</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: path,</span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&quot;xml&quot;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"> xmlResponse </span>) &#123;</span><br><span class="line"><span class="comment">// get the contents from search data</span></span><br><span class="line"><span class="keyword">var</span> datas = $( <span class="string">&quot;entry&quot;</span>, xmlResponse ).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">title</span>: $( <span class="string">&quot;title&quot;</span>, <span class="variable language_">this</span> ).<span class="title function_">text</span>(),</span><br><span class="line"><span class="attr">content</span>: $(<span class="string">&quot;content&quot;</span>,<span class="variable language_">this</span>).<span class="title function_">text</span>(),</span><br><span class="line"><span class="attr">url</span>: $( <span class="string">&quot;url&quot;</span> , <span class="variable language_">this</span>).<span class="title function_">text</span>()</span><br><span class="line">&#125;;</span><br><span class="line">&#125;).<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $input = $(<span class="string">&#x27;#&#x27;</span>+search_id);</span><br><span class="line"><span class="keyword">var</span> $resultContent = $(<span class="string">&#x27;#&#x27;</span>+content_id);</span><br><span class="line"></span><br><span class="line">$input.<span class="title function_">on</span>(<span class="string">&quot;input propertychange&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> keywords = <span class="variable language_">this</span>.<span class="property">value</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="regexp">/[\s\-]+/</span>);</span><br><span class="line"><span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">val</span>()==<span class="string">&quot;&quot;</span>)&#123;$resultContent.<span class="title function_">html</span>(<span class="string">&#x27;&#x27;</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">$resultContent.<span class="title function_">html</span>(<span class="title function_">performLocalSearch</span>(datas,keywords));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">searchFunc</span>(<span class="string">&quot;/search.xml&quot;</span>,<span class="string">&quot;local-search-input&quot;</span>,<span class="string">&quot;local-search-result&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="页面HTML代码"><a href="#页面HTML代码" class="headerlink" title="页面HTML代码"></a>页面HTML代码</h2><p>申明html元素，id、class名字要跟解析函、Search入口功能函数里的代码对上号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;site_search&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;local-search-input&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span> <span class="attr">results</span>=<span class="string">&quot;0&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;search my blog...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;local-search-result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">## 样式调整</span><br><span class="line"><span class="string">``</span><span class="string">` css</span></span><br><span class="line"><span class="string">ul.search-result-list &#123;</span></span><br><span class="line"><span class="string">  padding-left: 10px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a.search-result-title &#123;</span></span><br><span class="line"><span class="string">  font-weight: bold;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">p.search-result &#123;</span></span><br><span class="line"><span class="string">  color=#555;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">em.search-keyword &#123;</span></span><br><span class="line"><span class="string">  border-bottom: 1px dashed #4088b8;</span></span><br><span class="line"><span class="string">  font-weight: bold;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.form-control &#123;</span></span><br><span class="line"><span class="string">padding-left:10px;</span></span><br><span class="line"><span class="string">margin-bottom: 10px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.bar &#123;</span></span><br><span class="line"><span class="string">padding: 10px 10px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.bar input &#123;</span></span><br><span class="line"><span class="string">width:350px;</span></span><br><span class="line"><span class="string">height: 25px;</span></span><br><span class="line"><span class="string">border-radius:42px;</span></span><br><span class="line"><span class="string">border:2px solid #324B4E;</span></span><br><span class="line"><span class="string">background:#F9F0DA;</span></span><br><span class="line"><span class="string">transition:.3s linear;</span></span><br><span class="line"><span class="string">float:center;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.bar input:focus &#123;</span></span><br><span class="line"><span class="string">width:420px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池类比公司经营之道</title>
      <link href="/2018/10/03/Java-ThreadPool-vs-Company/"/>
      <url>/2018/10/03/Java-ThreadPool-vs-Company/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;Java线程池的设计与公司经营的相似之处如果我们查看JDK源码，会发现FixedThreadPool、CachedThreadPool和SingleThreadExecutor都是通过创建一个ThreadPoolExcutor对象来实现的。我们来看一下该ThreadPoolExcutor的构造方法，并对线程池中线程的保留和新建策略做进一步的分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">( <span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;第一个参数corePoolSize代表了线程池中一定要保持的线程的数量；线程池中的线程可能发生变化，第二个参数maximumPoolSize约束了线程池中所能达到的线程的最大数量；线程有可能一直处于空闲状态，keepAliveTime代表了空闲状态的线程所能存活的时间；TimeUnit代表了时间单位；workQueue是一个缓冲队列，如果任务到达，但是还没有空闲线程可以执行该任务，那么就将该任务置于这个缓冲队列中。为了更加容易理解和记忆线程池这个几个属性的协调工作。我们利用一个精明的老板来比喻线程池。而将线程比作线程中的线程。</p><p>&emsp;&emsp;一个公司必须要保留一定数量的核心员工，不管这些员工是不是老闲着。当然，对于非常抠门的老板，这个数量可能是0，例如CachedThreadPool。核心员工的数量，就是corePoolSize。当一个公司初创时，所有的员工也就是那几个核心员工。当线程池新建时，同样只会创建与corePoolSize数量相当的线程。</p><p>&emsp;&emsp;当新的任务到达时，如果有空闲线程，马上将这些任务分配给空闲线程。如果没有的话，那么，怎么办呢？新建一个线程吗？非也，对于一个精明的老板来说，他只会把这些任务排进任务列表。手下的员工忙完手头的工作，马上就从任务列表的开头位置移出工作，并分配给空闲。这就让每名员工都不停的工作，甚至加班加点。这个任务列表就是workQueue。</p><p>&emsp;&emsp;如果更多的任务涌过来，如同这个公司的业务很好，工作多越堆越多。这个时候，就看任务列表能承受的极限了。有的老板在创立公司的时候，就抱着这种心态——任务列表可以无限长，反正我就招这么多人，客户能等就等，不能等就拉倒。但是，对于很多客户来说，如果等的时间过长，可能就放弃了。具有无限长workQueue的线程池来说，可能同样会导致某些线程等待时间过长，用户任务无响应的问题。</p><p>&emsp;&emsp;但是，如果workQueue不是无限长，那么，其容量总有可能被达到。而新的任务到达时，无法存入workQueue。这如同，这个老板既负责任（不想出现客户无限等待的情况），同时又不想放弃任何一个客户。那么，唯有增加员工数量了，这就如同线程池新建线程。但是，公司总要有个风险评估，不能让员工数量无限增长，于是，maximumPoolSize就代表了员工的最大数量。如同说，在无法两全其美的情形下，即使损失部分客户，也要控制公司的成本风险。线程池同样如此，每个线程都将消耗系统资源，这种消耗必须被控制在一定范围之内。</p><p>&emsp;&emsp;在大量任务涌入，workQueue无法缓存这些任务，而maxinumPoolSize也已经达到时，相当于一个公司达到了它的最大营运能力，就只能拒绝介绍客户任务了。线程池拒绝介绍新的任务，会抛出异常RejectedExecutionException。</p><p>&emsp;&emsp;当然，一个公司的营运既有旺季，也有淡季。上面我们所描述的情形是旺季的营运。如果淡季到了，许多员工都闲下来了。老板就会考虑裁员了。当然，老板不会马上动手，因为不能准确把握旺季和淡季的分界线。他会给空闲员工一个缓冲期，如果这个员工闲了三个月都没工作，那么证明，真的需要裁掉他了。对应到线程池中，keepAliveTime和TimeUnit限制了一个线程的最大空闲时间。相当于一个缓冲期，缓冲期一结束，就会将其销毁，以释放系统资源。当然，这些被“处理”的线程都是核心员工数量之外的，线程池总会保留corePoolSize个线程备用。</p><p>&emsp;&emsp;通过以上描述，我们应该对线程池的运作策略有了一个比较清晰的认识。总结这种策略，主要目的是基于成本考虑——尽量耗用最少的内存，来完成尽可能多的任务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Hello World</title>
      <link href="/2018/10/03/Hexo-First-Guide/"/>
      <url>/2018/10/03/Hexo-First-Guide/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
